% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ModuleInstantiation.R
\name{verifyModuleInstallation}
\alias{verifyModuleInstallation}
\title{Verify a module is properly installed}
\usage{
verifyModuleInstallation(
  module,
  version,
  silent = FALSE,
  forceVerification = FALSE
)
}
\arguments{
\item{module}{The name of the module to verify (i.e. "CohortGeneratorModule")}

\item{version}{The version of the module to verify (i.e. "0.2.1")}

\item{silent}{When TRUE output of this verification process is suppressed}

\item{forceVerification}{When set to TRUE, the verification process is forced
to re-evaluate if a module is properly installed. The default is FALSE
since if a module is successfully validated, the module will contain
the hash value of the module's renv.lock file in the file system so it can
by-pass running this check every time.}
}
\value{
A list with the output of the consistency check
}
\description{
In some instances a module may fail to instantiate and install due to problems
when calling renv::restore for the module's renv.lock file. This function
will allow you to surface inconsistencies between the module renv.lock file
and the module's renv project library. This function will check to that a
module has been properly installed using internal functions of the \code{renv}
package. If a module is verified to work via this function, the hash of
the module's renv.lock file will be written to a text file in the module
directory to indicate that it is ready for use. This will allow subsequent
calls to work faster since the initial verification process can take some
time.It is possible to re-run the verification of a module
by using the \code{forceVerification} parameter.

To fix issues with a module, you will need to open the module's .Rproj in
RStudio instance and debug the issues when calling renv::restore().
}
