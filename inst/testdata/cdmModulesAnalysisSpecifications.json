{
  "sharedResources": [
    {
      "cohortDefinitions": [
        {
          "cohortId": 1,
          "cohortName": "Celecoxib",
          "sql": "CREATE TABLE #Codesets (\r\n  codeset_id int NOT NULL,\r\n  concept_id bigint NOT NULL\r\n)\r\n;\r\n\r\nINSERT INTO #Codesets (codeset_id, concept_id)\r\nSELECT 0 as codeset_id, c.concept_id FROM (select distinct I.concept_id FROM\r\n(\r\n  select concept_id from @vocabulary_database_schema.CONCEPT where concept_id in (1118084)\r\n\r\n) I\r\n) C;\r\n\r\nUPDATE STATISTICS #Codesets;\r\n\r\n\r\nSELECT event_id, person_id, start_date, end_date, op_start_date, op_end_date, visit_occurrence_id\r\nINTO #qualified_events\r\nFROM\r\n(\r\n  select pe.event_id, pe.person_id, pe.start_date, pe.end_date, pe.op_start_date, pe.op_end_date, row_number() over (partition by pe.person_id order by pe.start_date ASC) as ordinal, cast(pe.visit_occurrence_id as bigint) as visit_occurrence_id\r\n  FROM (-- Begin Primary Events\r\nselect P.ordinal as event_id, P.person_id, P.start_date, P.end_date, op_start_date, op_end_date, cast(P.visit_occurrence_id as bigint) as visit_occurrence_id\r\nFROM\r\n(\r\n  select E.person_id, E.start_date, E.end_date,\r\n         row_number() OVER (PARTITION BY E.person_id ORDER BY E.sort_date ASC, E.event_id) ordinal,\r\n         OP.observation_period_start_date as op_start_date, OP.observation_period_end_date as op_end_date, cast(E.visit_occurrence_id as bigint) as visit_occurrence_id\r\n  FROM\r\n  (\r\n  -- Begin Drug Era Criteria\r\nselect C.person_id, C.drug_era_id as event_id, C.start_date, C.end_date,\r\n    CAST(NULL as bigint) as visit_occurrence_id,C.start_date as sort_date\r\nfrom\r\n(\r\n  select de.person_id,de.drug_era_id,de.drug_concept_id,de.drug_exposure_count,de.gap_days,de.drug_era_start_date as start_date, de.drug_era_end_date as end_date\r\n  FROM @cdm_database_schema.DRUG_ERA de\r\nwhere de.drug_concept_id in (SELECT concept_id from  #Codesets where codeset_id = 0)\r\n) C\r\n\r\n\r\n-- End Drug Era Criteria\r\n\r\n  ) E\r\n\tJOIN @cdm_database_schema.observation_period OP on E.person_id = OP.person_id and E.start_date >=  OP.observation_period_start_date and E.start_date <= op.observation_period_end_date\r\n  WHERE DATEADD(day,0,OP.OBSERVATION_PERIOD_START_DATE) <= E.START_DATE AND DATEADD(day,0,E.START_DATE) <= OP.OBSERVATION_PERIOD_END_DATE\r\n) P\r\n\r\n-- End Primary Events\r\n) pe\r\n\r\n) QE\r\n\r\n;\r\n\r\n--- Inclusion Rule Inserts\r\n\r\ncreate table #inclusion_events (inclusion_rule_id bigint,\r\n\tperson_id bigint,\r\n\tevent_id bigint\r\n);\r\n\r\nselect event_id, person_id, start_date, end_date, op_start_date, op_end_date\r\ninto #included_events\r\nFROM (\r\n  SELECT event_id, person_id, start_date, end_date, op_start_date, op_end_date, row_number() over (partition by person_id order by start_date ASC) as ordinal\r\n  from\r\n  (\r\n    select Q.event_id, Q.person_id, Q.start_date, Q.end_date, Q.op_start_date, Q.op_end_date, SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) as inclusion_rule_mask\r\n    from #qualified_events Q\r\n    LEFT JOIN #inclusion_events I on I.person_id = Q.person_id and I.event_id = Q.event_id\r\n    GROUP BY Q.event_id, Q.person_id, Q.start_date, Q.end_date, Q.op_start_date, Q.op_end_date\r\n  ) MG -- matching groups\r\n\r\n) Results\r\n\r\n;\r\n\r\n-- custom era strategy\r\n\r\nwith ctePersons(person_id) as (\r\n\tselect distinct person_id from #included_events\r\n)\r\n\r\nselect person_id, drug_exposure_start_date, drug_exposure_end_date\r\nINTO #drugTarget\r\nFROM (\r\n\tselect de.PERSON_ID, DRUG_EXPOSURE_START_DATE, COALESCE(DRUG_EXPOSURE_END_DATE, DATEADD(day,DAYS_SUPPLY,DRUG_EXPOSURE_START_DATE), DATEADD(day,1,DRUG_EXPOSURE_START_DATE)) as DRUG_EXPOSURE_END_DATE\r\n\tFROM @cdm_database_schema.DRUG_EXPOSURE de\r\n\tJOIN ctePersons p on de.person_id = p.person_id\r\n\tJOIN #Codesets cs on cs.codeset_id = 0 AND de.drug_concept_id = cs.concept_id\r\n\r\n\tUNION ALL\r\n\r\n\tselect de.PERSON_ID, DRUG_EXPOSURE_START_DATE, COALESCE(DRUG_EXPOSURE_END_DATE, DATEADD(day,DAYS_SUPPLY,DRUG_EXPOSURE_START_DATE), DATEADD(day,1,DRUG_EXPOSURE_START_DATE)) as DRUG_EXPOSURE_END_DATE\r\n\tFROM @cdm_database_schema.DRUG_EXPOSURE de\r\n\tJOIN ctePersons p on de.person_id = p.person_id\r\n\tJOIN #Codesets cs on cs.codeset_id = 0 AND de.drug_source_concept_id = cs.concept_id\r\n) E\r\n;\r\n\r\nselect et.event_id, et.person_id, ERAS.era_end_date as end_date\r\nINTO #strategy_ends\r\nfrom #included_events et\r\nJOIN\r\n(\r\n  select ENDS.person_id, min(drug_exposure_start_date) as era_start_date, DATEADD(day,0, ENDS.era_end_date) as era_end_date\r\n  from\r\n  (\r\n    select de.person_id, de.drug_exposure_start_date, MIN(e.END_DATE) as era_end_date\r\n    FROM #drugTarget DE\r\n    JOIN\r\n    (\r\n      --cteEndDates\r\n      select PERSON_ID, DATEADD(day,-1 * 30,EVENT_DATE) as END_DATE -- unpad the end date by 30\r\n      FROM\r\n      (\r\n\t\t\t\tselect PERSON_ID, EVENT_DATE, EVENT_TYPE,\r\n\t\t\t\tMAX(START_ORDINAL) OVER (PARTITION BY PERSON_ID ORDER BY event_date, event_type, START_ORDINAL ROWS UNBOUNDED PRECEDING) AS start_ordinal,\r\n\t\t\t\tROW_NUMBER() OVER (PARTITION BY PERSON_ID ORDER BY EVENT_DATE, EVENT_TYPE, START_ORDINAL) AS OVERALL_ORD -- this re-numbers the inner UNION so all rows are numbered ordered by the event date\r\n\t\t\t\tfrom\r\n\t\t\t\t(\r\n\t\t\t\t\t-- select the start dates, assigning a row number to each\r\n\t\t\t\t\tSelect PERSON_ID, DRUG_EXPOSURE_START_DATE AS EVENT_DATE, 0 as EVENT_TYPE, ROW_NUMBER() OVER (PARTITION BY PERSON_ID ORDER BY DRUG_EXPOSURE_START_DATE) as START_ORDINAL\r\n\t\t\t\t\tfrom #drugTarget D\r\n\r\n\t\t\t\t\tUNION ALL\r\n\r\n\t\t\t\t\t-- add the end dates with NULL as the row number, padding the end dates by 30 to allow a grace period for overlapping ranges.\r\n\t\t\t\t\tselect PERSON_ID, DATEADD(day,30,DRUG_EXPOSURE_END_DATE), 1 as EVENT_TYPE, NULL\r\n\t\t\t\t\tFROM #drugTarget D\r\n\t\t\t\t) RAWDATA\r\n      ) E\r\n      WHERE 2 * E.START_ORDINAL - E.OVERALL_ORD = 0\r\n    ) E on DE.PERSON_ID = E.PERSON_ID and E.END_DATE >= DE.DRUG_EXPOSURE_START_DATE\r\n    GROUP BY de.person_id, de.drug_exposure_start_date\r\n  ) ENDS\r\n  GROUP BY ENDS.person_id, ENDS.era_end_date\r\n) ERAS on ERAS.person_id = et.person_id\r\nWHERE et.start_date between ERAS.era_start_date and ERAS.era_end_date;\r\n\r\nTRUNCATE TABLE #drugTarget;\r\nDROP TABLE #drugTarget;\r\n\r\n\r\n-- generate cohort periods into #final_cohort\r\nselect person_id, start_date, end_date\r\nINTO #cohort_rows\r\nfrom ( -- first_ends\r\n\tselect F.person_id, F.start_date, F.end_date\r\n\tFROM (\r\n\t  select I.event_id, I.person_id, I.start_date, CE.end_date, row_number() over (partition by I.person_id, I.event_id order by CE.end_date) as ordinal\r\n\t  from #included_events I\r\n\t  join ( -- cohort_ends\r\n-- cohort exit dates\r\n-- By default, cohort exit at the event's op end date\r\nselect event_id, person_id, op_end_date as end_date from #included_events\r\nUNION ALL\r\n-- End Date Strategy\r\nSELECT event_id, person_id, end_date from #strategy_ends\r\n\r\n    ) CE on I.event_id = CE.event_id and I.person_id = CE.person_id and CE.end_date >= I.start_date\r\n\t) F\r\n\tWHERE F.ordinal = 1\r\n) FE;\r\n\r\nselect person_id, min(start_date) as start_date, end_date\r\ninto #final_cohort\r\nfrom ( --cteEnds\r\n\tSELECT\r\n\t\t c.person_id\r\n\t\t, c.start_date\r\n\t\t, MIN(ed.end_date) AS end_date\r\n\tFROM #cohort_rows c\r\n\tJOIN ( -- cteEndDates\r\n    SELECT\r\n      person_id\r\n      , DATEADD(day,-1 * 0, event_date)  as end_date\r\n    FROM\r\n    (\r\n      SELECT\r\n        person_id\r\n        , event_date\r\n        , event_type\r\n        , SUM(event_type) OVER (PARTITION BY person_id ORDER BY event_date, event_type ROWS UNBOUNDED PRECEDING) AS interval_status\r\n      FROM\r\n      (\r\n        SELECT\r\n          person_id\r\n          , start_date AS event_date\r\n          , -1 AS event_type\r\n        FROM #cohort_rows\r\n\r\n        UNION ALL\r\n\r\n\r\n        SELECT\r\n          person_id\r\n          , DATEADD(day,0,end_date) as end_date\r\n          , 1 AS event_type\r\n        FROM #cohort_rows\r\n      ) RAWDATA\r\n    ) e\r\n    WHERE interval_status = 0\r\n  ) ed ON c.person_id = ed.person_id AND ed.end_date >= c.start_date\r\n\tGROUP BY c.person_id, c.start_date\r\n) e\r\ngroup by person_id, end_date\r\n;\r\n\r\nDELETE FROM @target_database_schema.@target_cohort_table where cohort_definition_id = @target_cohort_id;\r\nINSERT INTO @target_database_schema.@target_cohort_table (cohort_definition_id, subject_id, cohort_start_date, cohort_end_date)\r\nselect @target_cohort_id as cohort_definition_id, person_id, start_date, end_date\r\nFROM #final_cohort CO\r\n;\r\n\r\n\r\n\r\n\r\nTRUNCATE TABLE #strategy_ends;\r\nDROP TABLE #strategy_ends;\r\n\r\n\r\nTRUNCATE TABLE #cohort_rows;\r\nDROP TABLE #cohort_rows;\r\n\r\nTRUNCATE TABLE #final_cohort;\r\nDROP TABLE #final_cohort;\r\n\r\nTRUNCATE TABLE #inclusion_events;\r\nDROP TABLE #inclusion_events;\r\n\r\nTRUNCATE TABLE #qualified_events;\r\nDROP TABLE #qualified_events;\r\n\r\nTRUNCATE TABLE #included_events;\r\nDROP TABLE #included_events;\r\n\r\nTRUNCATE TABLE #Codesets;\r\nDROP TABLE #Codesets;\r\n",
          "json": "{\r\n  \"ConceptSets\": [\r\n    {\r\n      \"id\": 0,\r\n      \"name\": \"Celecoxib\",\r\n      \"expression\": {\r\n        \"items\": [\r\n          {\r\n            \"concept\": {\r\n              \"CONCEPT_CLASS_ID\": \"Ingredient\",\r\n              \"CONCEPT_CODE\": \"140587\",\r\n              \"CONCEPT_ID\": 1118084,\r\n              \"CONCEPT_NAME\": \"celecoxib\",\r\n              \"DOMAIN_ID\": \"Drug\",\r\n              \"INVALID_REASON\": \"V\",\r\n              \"INVALID_REASON_CAPTION\": \"Valid\",\r\n              \"STANDARD_CONCEPT\": \"S\",\r\n              \"STANDARD_CONCEPT_CAPTION\": \"Standard\",\r\n              \"VOCABULARY_ID\": \"RxNorm\"\r\n            }\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  ],\r\n  \"PrimaryCriteria\": {\r\n    \"CriteriaList\": [\r\n      {\r\n        \"DrugEra\": {\r\n          \"CodesetId\": 0\r\n        }\r\n      }\r\n    ],\r\n    \"ObservationWindow\": {\r\n      \"PriorDays\": 0,\r\n      \"PostDays\": 0\r\n    },\r\n    \"PrimaryCriteriaLimit\": {\r\n      \"Type\": \"All\"\r\n    }\r\n  },\r\n  \"QualifiedLimit\": {\r\n    \"Type\": \"First\"\r\n  },\r\n  \"ExpressionLimit\": {\r\n    \"Type\": \"All\"\r\n  },\r\n  \"InclusionRules\": [],\r\n  \"EndStrategy\": {\r\n    \"CustomEra\": {\r\n      \"DrugCodesetId\": 0,\r\n      \"GapDays\": 30,\r\n      \"Offset\": 0\r\n    }\r\n  },\r\n  \"CensoringCriteria\": [],\r\n  \"CollapseSettings\": {\r\n    \"CollapseType\": \"ERA\",\r\n    \"EraPad\": 0\r\n  },\r\n  \"CensorWindow\": {},\r\n  \"cdmVersionRange\": \">=5.0.0\"\r\n}\r\n",
          "subsetParent": 1,
          "isSubset": false,
          "subsetDefinitionId": "NA"
        },
        {
          "cohortId": 2,
          "cohortName": "Diclofenac",
          "sql": "CREATE TABLE #Codesets (\r\n  codeset_id int NOT NULL,\r\n  concept_id bigint NOT NULL\r\n)\r\n;\r\n\r\nINSERT INTO #Codesets (codeset_id, concept_id)\r\nSELECT 0 as codeset_id, c.concept_id FROM (select distinct I.concept_id FROM\r\n(\r\n  select concept_id from @vocabulary_database_schema.CONCEPT where concept_id in (1124300)\r\n\r\n) I\r\n) C;\r\n\r\nUPDATE STATISTICS #Codesets;\r\n\r\n\r\nSELECT event_id, person_id, start_date, end_date, op_start_date, op_end_date, visit_occurrence_id\r\nINTO #qualified_events\r\nFROM\r\n(\r\n  select pe.event_id, pe.person_id, pe.start_date, pe.end_date, pe.op_start_date, pe.op_end_date, row_number() over (partition by pe.person_id order by pe.start_date ASC) as ordinal, cast(pe.visit_occurrence_id as bigint) as visit_occurrence_id\r\n  FROM (-- Begin Primary Events\r\nselect P.ordinal as event_id, P.person_id, P.start_date, P.end_date, op_start_date, op_end_date, cast(P.visit_occurrence_id as bigint) as visit_occurrence_id\r\nFROM\r\n(\r\n  select E.person_id, E.start_date, E.end_date,\r\n         row_number() OVER (PARTITION BY E.person_id ORDER BY E.sort_date ASC, E.event_id) ordinal,\r\n         OP.observation_period_start_date as op_start_date, OP.observation_period_end_date as op_end_date, cast(E.visit_occurrence_id as bigint) as visit_occurrence_id\r\n  FROM\r\n  (\r\n  -- Begin Drug Era Criteria\r\nselect C.person_id, C.drug_era_id as event_id, C.start_date, C.end_date,\r\n    CAST(NULL as bigint) as visit_occurrence_id,C.start_date as sort_date\r\nfrom\r\n(\r\n  select de.person_id,de.drug_era_id,de.drug_concept_id,de.drug_exposure_count,de.gap_days,de.drug_era_start_date as start_date, de.drug_era_end_date as end_date\r\n  FROM @cdm_database_schema.DRUG_ERA de\r\nwhere de.drug_concept_id in (SELECT concept_id from  #Codesets where codeset_id = 0)\r\n) C\r\n\r\n\r\n-- End Drug Era Criteria\r\n\r\n  ) E\r\n\tJOIN @cdm_database_schema.observation_period OP on E.person_id = OP.person_id and E.start_date >=  OP.observation_period_start_date and E.start_date <= op.observation_period_end_date\r\n  WHERE DATEADD(day,0,OP.OBSERVATION_PERIOD_START_DATE) <= E.START_DATE AND DATEADD(day,0,E.START_DATE) <= OP.OBSERVATION_PERIOD_END_DATE\r\n) P\r\n\r\n-- End Primary Events\r\n) pe\r\n\r\n) QE\r\n\r\n;\r\n\r\n--- Inclusion Rule Inserts\r\n\r\ncreate table #inclusion_events (inclusion_rule_id bigint,\r\n\tperson_id bigint,\r\n\tevent_id bigint\r\n);\r\n\r\nselect event_id, person_id, start_date, end_date, op_start_date, op_end_date\r\ninto #included_events\r\nFROM (\r\n  SELECT event_id, person_id, start_date, end_date, op_start_date, op_end_date, row_number() over (partition by person_id order by start_date ASC) as ordinal\r\n  from\r\n  (\r\n    select Q.event_id, Q.person_id, Q.start_date, Q.end_date, Q.op_start_date, Q.op_end_date, SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) as inclusion_rule_mask\r\n    from #qualified_events Q\r\n    LEFT JOIN #inclusion_events I on I.person_id = Q.person_id and I.event_id = Q.event_id\r\n    GROUP BY Q.event_id, Q.person_id, Q.start_date, Q.end_date, Q.op_start_date, Q.op_end_date\r\n  ) MG -- matching groups\r\n\r\n) Results\r\n\r\n;\r\n\r\n-- custom era strategy\r\n\r\nwith ctePersons(person_id) as (\r\n\tselect distinct person_id from #included_events\r\n)\r\n\r\nselect person_id, drug_exposure_start_date, drug_exposure_end_date\r\nINTO #drugTarget\r\nFROM (\r\n\tselect de.PERSON_ID, DRUG_EXPOSURE_START_DATE, COALESCE(DRUG_EXPOSURE_END_DATE, DATEADD(day,DAYS_SUPPLY,DRUG_EXPOSURE_START_DATE), DATEADD(day,1,DRUG_EXPOSURE_START_DATE)) as DRUG_EXPOSURE_END_DATE\r\n\tFROM @cdm_database_schema.DRUG_EXPOSURE de\r\n\tJOIN ctePersons p on de.person_id = p.person_id\r\n\tJOIN #Codesets cs on cs.codeset_id = 0 AND de.drug_concept_id = cs.concept_id\r\n\r\n\tUNION ALL\r\n\r\n\tselect de.PERSON_ID, DRUG_EXPOSURE_START_DATE, COALESCE(DRUG_EXPOSURE_END_DATE, DATEADD(day,DAYS_SUPPLY,DRUG_EXPOSURE_START_DATE), DATEADD(day,1,DRUG_EXPOSURE_START_DATE)) as DRUG_EXPOSURE_END_DATE\r\n\tFROM @cdm_database_schema.DRUG_EXPOSURE de\r\n\tJOIN ctePersons p on de.person_id = p.person_id\r\n\tJOIN #Codesets cs on cs.codeset_id = 0 AND de.drug_source_concept_id = cs.concept_id\r\n) E\r\n;\r\n\r\nselect et.event_id, et.person_id, ERAS.era_end_date as end_date\r\nINTO #strategy_ends\r\nfrom #included_events et\r\nJOIN\r\n(\r\n  select ENDS.person_id, min(drug_exposure_start_date) as era_start_date, DATEADD(day,0, ENDS.era_end_date) as era_end_date\r\n  from\r\n  (\r\n    select de.person_id, de.drug_exposure_start_date, MIN(e.END_DATE) as era_end_date\r\n    FROM #drugTarget DE\r\n    JOIN\r\n    (\r\n      --cteEndDates\r\n      select PERSON_ID, DATEADD(day,-1 * 30,EVENT_DATE) as END_DATE -- unpad the end date by 30\r\n      FROM\r\n      (\r\n\t\t\t\tselect PERSON_ID, EVENT_DATE, EVENT_TYPE,\r\n\t\t\t\tMAX(START_ORDINAL) OVER (PARTITION BY PERSON_ID ORDER BY event_date, event_type, START_ORDINAL ROWS UNBOUNDED PRECEDING) AS start_ordinal,\r\n\t\t\t\tROW_NUMBER() OVER (PARTITION BY PERSON_ID ORDER BY EVENT_DATE, EVENT_TYPE, START_ORDINAL) AS OVERALL_ORD -- this re-numbers the inner UNION so all rows are numbered ordered by the event date\r\n\t\t\t\tfrom\r\n\t\t\t\t(\r\n\t\t\t\t\t-- select the start dates, assigning a row number to each\r\n\t\t\t\t\tSelect PERSON_ID, DRUG_EXPOSURE_START_DATE AS EVENT_DATE, 0 as EVENT_TYPE, ROW_NUMBER() OVER (PARTITION BY PERSON_ID ORDER BY DRUG_EXPOSURE_START_DATE) as START_ORDINAL\r\n\t\t\t\t\tfrom #drugTarget D\r\n\r\n\t\t\t\t\tUNION ALL\r\n\r\n\t\t\t\t\t-- add the end dates with NULL as the row number, padding the end dates by 30 to allow a grace period for overlapping ranges.\r\n\t\t\t\t\tselect PERSON_ID, DATEADD(day,30,DRUG_EXPOSURE_END_DATE), 1 as EVENT_TYPE, NULL\r\n\t\t\t\t\tFROM #drugTarget D\r\n\t\t\t\t) RAWDATA\r\n      ) E\r\n      WHERE 2 * E.START_ORDINAL - E.OVERALL_ORD = 0\r\n    ) E on DE.PERSON_ID = E.PERSON_ID and E.END_DATE >= DE.DRUG_EXPOSURE_START_DATE\r\n    GROUP BY de.person_id, de.drug_exposure_start_date\r\n  ) ENDS\r\n  GROUP BY ENDS.person_id, ENDS.era_end_date\r\n) ERAS on ERAS.person_id = et.person_id\r\nWHERE et.start_date between ERAS.era_start_date and ERAS.era_end_date;\r\n\r\nTRUNCATE TABLE #drugTarget;\r\nDROP TABLE #drugTarget;\r\n\r\n\r\n-- generate cohort periods into #final_cohort\r\nselect person_id, start_date, end_date\r\nINTO #cohort_rows\r\nfrom ( -- first_ends\r\n\tselect F.person_id, F.start_date, F.end_date\r\n\tFROM (\r\n\t  select I.event_id, I.person_id, I.start_date, CE.end_date, row_number() over (partition by I.person_id, I.event_id order by CE.end_date) as ordinal\r\n\t  from #included_events I\r\n\t  join ( -- cohort_ends\r\n-- cohort exit dates\r\n-- By default, cohort exit at the event's op end date\r\nselect event_id, person_id, op_end_date as end_date from #included_events\r\nUNION ALL\r\n-- End Date Strategy\r\nSELECT event_id, person_id, end_date from #strategy_ends\r\n\r\n    ) CE on I.event_id = CE.event_id and I.person_id = CE.person_id and CE.end_date >= I.start_date\r\n\t) F\r\n\tWHERE F.ordinal = 1\r\n) FE;\r\n\r\nselect person_id, min(start_date) as start_date, end_date\r\ninto #final_cohort\r\nfrom ( --cteEnds\r\n\tSELECT\r\n\t\t c.person_id\r\n\t\t, c.start_date\r\n\t\t, MIN(ed.end_date) AS end_date\r\n\tFROM #cohort_rows c\r\n\tJOIN ( -- cteEndDates\r\n    SELECT\r\n      person_id\r\n      , DATEADD(day,-1 * 0, event_date)  as end_date\r\n    FROM\r\n    (\r\n      SELECT\r\n        person_id\r\n        , event_date\r\n        , event_type\r\n        , SUM(event_type) OVER (PARTITION BY person_id ORDER BY event_date, event_type ROWS UNBOUNDED PRECEDING) AS interval_status\r\n      FROM\r\n      (\r\n        SELECT\r\n          person_id\r\n          , start_date AS event_date\r\n          , -1 AS event_type\r\n        FROM #cohort_rows\r\n\r\n        UNION ALL\r\n\r\n\r\n        SELECT\r\n          person_id\r\n          , DATEADD(day,0,end_date) as end_date\r\n          , 1 AS event_type\r\n        FROM #cohort_rows\r\n      ) RAWDATA\r\n    ) e\r\n    WHERE interval_status = 0\r\n  ) ed ON c.person_id = ed.person_id AND ed.end_date >= c.start_date\r\n\tGROUP BY c.person_id, c.start_date\r\n) e\r\ngroup by person_id, end_date\r\n;\r\n\r\nDELETE FROM @target_database_schema.@target_cohort_table where cohort_definition_id = @target_cohort_id;\r\nINSERT INTO @target_database_schema.@target_cohort_table (cohort_definition_id, subject_id, cohort_start_date, cohort_end_date)\r\nselect @target_cohort_id as cohort_definition_id, person_id, start_date, end_date\r\nFROM #final_cohort CO\r\n;\r\n\r\n\r\n\r\n\r\nTRUNCATE TABLE #strategy_ends;\r\nDROP TABLE #strategy_ends;\r\n\r\n\r\nTRUNCATE TABLE #cohort_rows;\r\nDROP TABLE #cohort_rows;\r\n\r\nTRUNCATE TABLE #final_cohort;\r\nDROP TABLE #final_cohort;\r\n\r\nTRUNCATE TABLE #inclusion_events;\r\nDROP TABLE #inclusion_events;\r\n\r\nTRUNCATE TABLE #qualified_events;\r\nDROP TABLE #qualified_events;\r\n\r\nTRUNCATE TABLE #included_events;\r\nDROP TABLE #included_events;\r\n\r\nTRUNCATE TABLE #Codesets;\r\nDROP TABLE #Codesets;\r\n",
          "json": "{\r\n  \"ConceptSets\": [\r\n    {\r\n      \"id\": 0,\r\n      \"name\": \"Diclofenac\",\r\n      \"expression\": {\r\n        \"items\": [\r\n          {\r\n            \"concept\": {\r\n              \"CONCEPT_CLASS_ID\": \"Ingredient\",\r\n              \"CONCEPT_CODE\": \"3355\",\r\n              \"CONCEPT_ID\": 1124300,\r\n              \"CONCEPT_NAME\": \"diclofenac\",\r\n              \"DOMAIN_ID\": \"Drug\",\r\n              \"INVALID_REASON\": \"V\",\r\n              \"INVALID_REASON_CAPTION\": \"Valid\",\r\n              \"STANDARD_CONCEPT\": \"S\",\r\n              \"STANDARD_CONCEPT_CAPTION\": \"Standard\",\r\n              \"VOCABULARY_ID\": \"RxNorm\"\r\n            }\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  ],\r\n  \"PrimaryCriteria\": {\r\n    \"CriteriaList\": [\r\n      {\r\n        \"DrugEra\": {\r\n          \"CodesetId\": 0\r\n        }\r\n      }\r\n    ],\r\n    \"ObservationWindow\": {\r\n      \"PriorDays\": 0,\r\n      \"PostDays\": 0\r\n    },\r\n    \"PrimaryCriteriaLimit\": {\r\n      \"Type\": \"All\"\r\n    }\r\n  },\r\n  \"QualifiedLimit\": {\r\n    \"Type\": \"First\"\r\n  },\r\n  \"ExpressionLimit\": {\r\n    \"Type\": \"All\"\r\n  },\r\n  \"InclusionRules\": [],\r\n  \"EndStrategy\": {\r\n    \"CustomEra\": {\r\n      \"DrugCodesetId\": 0,\r\n      \"GapDays\": 30,\r\n      \"Offset\": 0\r\n    }\r\n  },\r\n  \"CensoringCriteria\": [],\r\n  \"CollapseSettings\": {\r\n    \"CollapseType\": \"ERA\",\r\n    \"EraPad\": 0\r\n  },\r\n  \"CensorWindow\": {},\r\n  \"cdmVersionRange\": \">=5.0.0\"\r\n}\r\n",
          "subsetParent": 2,
          "isSubset": false,
          "subsetDefinitionId": "NA"
        },
        {
          "cohortId": 3,
          "cohortName": "GI bleed",
          "sql": "CREATE TABLE #Codesets (\r\n  codeset_id int NOT NULL,\r\n  concept_id bigint NOT NULL\r\n)\r\n;\r\n\r\nINSERT INTO #Codesets (codeset_id, concept_id)\r\nSELECT 0 as codeset_id, c.concept_id FROM (select distinct I.concept_id FROM\r\n( \r\n  select concept_id from @vocabulary_database_schema.CONCEPT where concept_id in (192671)\r\nUNION  select c.concept_id\r\n  from @vocabulary_database_schema.CONCEPT c\r\n  join @vocabulary_database_schema.CONCEPT_ANCESTOR ca on c.concept_id = ca.descendant_concept_id\r\n  and ca.ancestor_concept_id in (192671)\r\n  and c.invalid_reason is null\r\n\r\n) I\r\n) C\r\n;\r\n\r\nSELECT event_id, person_id, start_date, end_date, op_start_date, op_end_date, visit_occurrence_id\r\nINTO #qualified_events\r\nFROM \r\n(\r\n  select pe.event_id, pe.person_id, pe.start_date, pe.end_date, pe.op_start_date, pe.op_end_date, row_number() over (partition by pe.person_id order by pe.start_date ASC) as ordinal, cast(pe.visit_occurrence_id as bigint) as visit_occurrence_id\r\n  FROM (-- Begin Primary Events\r\nselect P.ordinal as event_id, P.person_id, P.start_date, P.end_date, op_start_date, op_end_date, cast(P.visit_occurrence_id as bigint) as visit_occurrence_id\r\nFROM\r\n(\r\n  select E.person_id, E.start_date, E.end_date,\r\n         row_number() OVER (PARTITION BY E.person_id ORDER BY E.sort_date ASC, E.event_id) ordinal,\r\n         OP.observation_period_start_date as op_start_date, OP.observation_period_end_date as op_end_date, cast(E.visit_occurrence_id as bigint) as visit_occurrence_id\r\n  FROM \r\n  (\r\n  -- Begin Condition Occurrence Criteria\r\nSELECT C.person_id, C.condition_occurrence_id as event_id, C.condition_start_date as start_date, COALESCE(C.condition_end_date, DATEADD(day,1,C.condition_start_date)) as end_date,\r\n  C.visit_occurrence_id, C.condition_start_date as sort_date\r\nFROM \r\n(\r\n  SELECT co.* \r\n  FROM @cdm_database_schema.CONDITION_OCCURRENCE co\r\n  JOIN #Codesets cs on (co.condition_concept_id = cs.concept_id and cs.codeset_id = 0)\r\n) C\r\n\r\n\r\n-- End Condition Occurrence Criteria\r\n\r\n  ) E\r\n\tJOIN @cdm_database_schema.observation_period OP on E.person_id = OP.person_id and E.start_date >=  OP.observation_period_start_date and E.start_date <= op.observation_period_end_date\r\n  WHERE DATEADD(day,0,OP.OBSERVATION_PERIOD_START_DATE) <= E.START_DATE AND DATEADD(day,0,E.START_DATE) <= OP.OBSERVATION_PERIOD_END_DATE\r\n) P\r\n\r\n-- End Primary Events\r\n) pe\r\n  \r\n) QE\r\n\r\n;\r\n\r\n--- Inclusion Rule Inserts\r\n\r\ncreate table #inclusion_events (inclusion_rule_id bigint,\r\n\tperson_id bigint,\r\n\tevent_id bigint\r\n);\r\n\r\nselect event_id, person_id, start_date, end_date, op_start_date, op_end_date\r\ninto #included_events\r\nFROM (\r\n  SELECT event_id, person_id, start_date, end_date, op_start_date, op_end_date, row_number() over (partition by person_id order by start_date ASC) as ordinal\r\n  from\r\n  (\r\n    select Q.event_id, Q.person_id, Q.start_date, Q.end_date, Q.op_start_date, Q.op_end_date, SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) as inclusion_rule_mask\r\n    from #qualified_events Q\r\n    LEFT JOIN #inclusion_events I on I.person_id = Q.person_id and I.event_id = Q.event_id\r\n    GROUP BY Q.event_id, Q.person_id, Q.start_date, Q.end_date, Q.op_start_date, Q.op_end_date\r\n  ) MG -- matching groups\r\n{0 != 0}?{\r\n  -- the matching group with all bits set ( POWER(2,# of inclusion rules) - 1 = inclusion_rule_mask\r\n  WHERE (MG.inclusion_rule_mask = POWER(cast(2 as bigint),0)-1)\r\n}\r\n) Results\r\nWHERE Results.ordinal = 1\r\n;\r\n\r\n-- date offset strategy\r\n\r\nselect event_id, person_id, \r\n  case when DATEADD(day,0,start_date) > op_end_date then op_end_date else DATEADD(day,0,start_date) end as end_date\r\nINTO #strategy_ends\r\nfrom #included_events;\r\n\r\n\r\n-- generate cohort periods into #final_cohort\r\nselect person_id, start_date, end_date\r\nINTO #cohort_rows\r\nfrom ( -- first_ends\r\n\tselect F.person_id, F.start_date, F.end_date\r\n\tFROM (\r\n\t  select I.event_id, I.person_id, I.start_date, CE.end_date, row_number() over (partition by I.person_id, I.event_id order by CE.end_date) as ordinal\r\n\t  from #included_events I\r\n\t  join ( -- cohort_ends\r\n-- cohort exit dates\r\n-- End Date Strategy\r\nSELECT event_id, person_id, end_date from #strategy_ends\r\n\r\n    ) CE on I.event_id = CE.event_id and I.person_id = CE.person_id and CE.end_date >= I.start_date\r\n\t) F\r\n\tWHERE F.ordinal = 1\r\n) FE;\r\n\r\nselect person_id, min(start_date) as start_date, end_date\r\ninto #final_cohort\r\nfrom ( --cteEnds\r\n\tSELECT\r\n\t\t c.person_id\r\n\t\t, c.start_date\r\n\t\t, MIN(ed.end_date) AS end_date\r\n\tFROM #cohort_rows c\r\n\tJOIN ( -- cteEndDates\r\n    SELECT\r\n      person_id\r\n      , DATEADD(day,-1 * 0, event_date)  as end_date\r\n    FROM\r\n    (\r\n      SELECT\r\n        person_id\r\n        , event_date\r\n        , event_type\r\n        , SUM(event_type) OVER (PARTITION BY person_id ORDER BY event_date, event_type ROWS UNBOUNDED PRECEDING) AS interval_status\r\n      FROM\r\n      (\r\n        SELECT\r\n          person_id\r\n          , start_date AS event_date\r\n          , -1 AS event_type\r\n        FROM #cohort_rows\r\n\r\n        UNION ALL\r\n\r\n\r\n        SELECT\r\n          person_id\r\n          , DATEADD(day,0,end_date) as end_date\r\n          , 1 AS event_type\r\n        FROM #cohort_rows\r\n      ) RAWDATA\r\n    ) e\r\n    WHERE interval_status = 0\r\n  ) ed ON c.person_id = ed.person_id AND ed.end_date >= c.start_date\r\n\tGROUP BY c.person_id, c.start_date\r\n) e\r\ngroup by person_id, end_date\r\n;\r\n\r\nDELETE FROM @target_database_schema.@target_cohort_table where cohort_definition_id = @target_cohort_id;\r\nINSERT INTO @target_database_schema.@target_cohort_table (cohort_definition_id, subject_id, cohort_start_date, cohort_end_date)\r\nselect @target_cohort_id as cohort_definition_id, person_id, start_date, end_date \r\nFROM #final_cohort CO\r\n;\r\n\r\n{0 != 0}?{\r\n-- BEGIN: Censored Stats\r\n\r\ndelete from @results_database_schema.cohort_censor_stats where cohort_definition_id = @target_cohort_id;\r\n\r\n-- END: Censored Stats\r\n}\r\n{0 != 0 & 0 != 0}?{\r\n\r\nCREATE TABLE #inclusion_rules (rule_sequence int);\r\n\r\n-- Find the event that is the 'best match' per person.  \r\n-- the 'best match' is defined as the event that satisfies the most inclusion rules.\r\n-- ties are solved by choosing the event that matches the earliest inclusion rule, and then earliest.\r\n\r\nselect q.person_id, q.event_id\r\ninto #best_events\r\nfrom #qualified_events Q\r\njoin (\r\n\tSELECT R.person_id, R.event_id, ROW_NUMBER() OVER (PARTITION BY R.person_id ORDER BY R.rule_count DESC,R.min_rule_id ASC, R.start_date ASC) AS rank_value\r\n\tFROM (\r\n\t\tSELECT Q.person_id, Q.event_id, COALESCE(COUNT(DISTINCT I.inclusion_rule_id), 0) AS rule_count, COALESCE(MIN(I.inclusion_rule_id), 0) AS min_rule_id, Q.start_date\r\n\t\tFROM #qualified_events Q\r\n\t\tLEFT JOIN #inclusion_events I ON q.person_id = i.person_id AND q.event_id = i.event_id\r\n\t\tGROUP BY Q.person_id, Q.event_id, Q.start_date\r\n\t) R\r\n) ranked on Q.person_id = ranked.person_id and Q.event_id = ranked.event_id\r\nWHERE ranked.rank_value = 1\r\n;\r\n\r\n-- modes of generation: (the same tables store the results for the different modes, identified by the mode_id column)\r\n-- 0: all events\r\n-- 1: best event\r\n\r\n\r\n-- BEGIN: Inclusion Impact Analysis - event\r\n-- calculte matching group counts\r\ndelete from @results_database_schema.cohort_inclusion_result where cohort_definition_id = @target_cohort_id and mode_id = 0;\r\ninsert into @results_database_schema.cohort_inclusion_result (cohort_definition_id, inclusion_rule_mask, person_count, mode_id)\r\nselect @target_cohort_id as cohort_definition_id, inclusion_rule_mask, count_big(*) as person_count, 0 as mode_id\r\nfrom\r\n(\r\n  select Q.person_id, Q.event_id, CAST(SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) AS bigint) as inclusion_rule_mask\r\n  from #qualified_events Q\r\n  LEFT JOIN #inclusion_events I on q.person_id = i.person_id and q.event_id = i.event_id\r\n  GROUP BY Q.person_id, Q.event_id\r\n) MG -- matching groups\r\ngroup by inclusion_rule_mask\r\n;\r\n\r\n-- calculate gain counts \r\ndelete from @results_database_schema.cohort_inclusion_stats where cohort_definition_id = @target_cohort_id and mode_id = 0;\r\ninsert into @results_database_schema.cohort_inclusion_stats (cohort_definition_id, rule_sequence, person_count, gain_count, person_total, mode_id)\r\nselect @target_cohort_id as cohort_definition_id, ir.rule_sequence, coalesce(T.person_count, 0) as person_count, coalesce(SR.person_count, 0) gain_count, EventTotal.total, 0 as mode_id\r\nfrom #inclusion_rules ir\r\nleft join\r\n(\r\n  select i.inclusion_rule_id, count_big(i.event_id) as person_count\r\n  from #qualified_events Q\r\n  JOIN #inclusion_events i on Q.person_id = I.person_id and Q.event_id = i.event_id\r\n  group by i.inclusion_rule_id\r\n) T on ir.rule_sequence = T.inclusion_rule_id\r\nCROSS JOIN (select count(*) as total_rules from #inclusion_rules) RuleTotal\r\nCROSS JOIN (select count_big(event_id) as total from #qualified_events) EventTotal\r\nLEFT JOIN @results_database_schema.cohort_inclusion_result SR on SR.mode_id = 0 AND SR.cohort_definition_id = @target_cohort_id AND (POWER(cast(2 as bigint),RuleTotal.total_rules) - POWER(cast(2 as bigint),ir.rule_sequence) - 1) = SR.inclusion_rule_mask -- POWER(2,rule count) - POWER(2,rule sequence) - 1 is the mask for 'all except this rule'\r\n;\r\n\r\n-- calculate totals\r\ndelete from @results_database_schema.cohort_summary_stats where cohort_definition_id = @target_cohort_id and mode_id = 0;\r\ninsert into @results_database_schema.cohort_summary_stats (cohort_definition_id, base_count, final_count, mode_id)\r\nselect @target_cohort_id as cohort_definition_id, PC.total as person_count, coalesce(FC.total, 0) as final_count, 0 as mode_id\r\nFROM\r\n(select count_big(event_id) as total from #qualified_events) PC,\r\n(select sum(sr.person_count) as total\r\n  from @results_database_schema.cohort_inclusion_result sr\r\n  CROSS JOIN (select count(*) as total_rules from #inclusion_rules) RuleTotal\r\n  where sr.mode_id = 0 and sr.cohort_definition_id = @target_cohort_id and sr.inclusion_rule_mask = POWER(cast(2 as bigint),RuleTotal.total_rules)-1\r\n) FC\r\n;\r\n\r\n-- END: Inclusion Impact Analysis - event\r\n\r\n-- BEGIN: Inclusion Impact Analysis - person\r\n-- calculte matching group counts\r\ndelete from @results_database_schema.cohort_inclusion_result where cohort_definition_id = @target_cohort_id and mode_id = 1;\r\ninsert into @results_database_schema.cohort_inclusion_result (cohort_definition_id, inclusion_rule_mask, person_count, mode_id)\r\nselect @target_cohort_id as cohort_definition_id, inclusion_rule_mask, count_big(*) as person_count, 1 as mode_id\r\nfrom\r\n(\r\n  select Q.person_id, Q.event_id, CAST(SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) AS bigint) as inclusion_rule_mask\r\n  from #best_events Q\r\n  LEFT JOIN #inclusion_events I on q.person_id = i.person_id and q.event_id = i.event_id\r\n  GROUP BY Q.person_id, Q.event_id\r\n) MG -- matching groups\r\ngroup by inclusion_rule_mask\r\n;\r\n\r\n-- calculate gain counts \r\ndelete from @results_database_schema.cohort_inclusion_stats where cohort_definition_id = @target_cohort_id and mode_id = 1;\r\ninsert into @results_database_schema.cohort_inclusion_stats (cohort_definition_id, rule_sequence, person_count, gain_count, person_total, mode_id)\r\nselect @target_cohort_id as cohort_definition_id, ir.rule_sequence, coalesce(T.person_count, 0) as person_count, coalesce(SR.person_count, 0) gain_count, EventTotal.total, 1 as mode_id\r\nfrom #inclusion_rules ir\r\nleft join\r\n(\r\n  select i.inclusion_rule_id, count_big(i.event_id) as person_count\r\n  from #best_events Q\r\n  JOIN #inclusion_events i on Q.person_id = I.person_id and Q.event_id = i.event_id\r\n  group by i.inclusion_rule_id\r\n) T on ir.rule_sequence = T.inclusion_rule_id\r\nCROSS JOIN (select count(*) as total_rules from #inclusion_rules) RuleTotal\r\nCROSS JOIN (select count_big(event_id) as total from #best_events) EventTotal\r\nLEFT JOIN @results_database_schema.cohort_inclusion_result SR on SR.mode_id = 1 AND SR.cohort_definition_id = @target_cohort_id AND (POWER(cast(2 as bigint),RuleTotal.total_rules) - POWER(cast(2 as bigint),ir.rule_sequence) - 1) = SR.inclusion_rule_mask -- POWER(2,rule count) - POWER(2,rule sequence) - 1 is the mask for 'all except this rule'\r\n;\r\n\r\n-- calculate totals\r\ndelete from @results_database_schema.cohort_summary_stats where cohort_definition_id = @target_cohort_id and mode_id = 1;\r\ninsert into @results_database_schema.cohort_summary_stats (cohort_definition_id, base_count, final_count, mode_id)\r\nselect @target_cohort_id as cohort_definition_id, PC.total as person_count, coalesce(FC.total, 0) as final_count, 1 as mode_id\r\nFROM\r\n(select count_big(event_id) as total from #best_events) PC,\r\n(select sum(sr.person_count) as total\r\n  from @results_database_schema.cohort_inclusion_result sr\r\n  CROSS JOIN (select count(*) as total_rules from #inclusion_rules) RuleTotal\r\n  where sr.mode_id = 1 and sr.cohort_definition_id = @target_cohort_id and sr.inclusion_rule_mask = POWER(cast(2 as bigint),RuleTotal.total_rules)-1\r\n) FC\r\n;\r\n\r\n-- END: Inclusion Impact Analysis - person\r\n\r\nTRUNCATE TABLE #best_events;\r\nDROP TABLE #best_events;\r\n\r\nTRUNCATE TABLE #inclusion_rules;\r\nDROP TABLE #inclusion_rules;\r\n}\r\n\r\nTRUNCATE TABLE #strategy_ends;\r\nDROP TABLE #strategy_ends;\r\n\r\n\r\nTRUNCATE TABLE #cohort_rows;\r\nDROP TABLE #cohort_rows;\r\n\r\nTRUNCATE TABLE #final_cohort;\r\nDROP TABLE #final_cohort;\r\n\r\nTRUNCATE TABLE #inclusion_events;\r\nDROP TABLE #inclusion_events;\r\n\r\nTRUNCATE TABLE #qualified_events;\r\nDROP TABLE #qualified_events;\r\n\r\nTRUNCATE TABLE #included_events;\r\nDROP TABLE #included_events;\r\n\r\nTRUNCATE TABLE #Codesets;\r\nDROP TABLE #Codesets;\r\n",
          "json": "{\r\n\t\"cdmVersionRange\" : \">=5.0.0\",\r\n\t\"PrimaryCriteria\" : {\r\n\t\t\"CriteriaList\" : [\r\n\t\t\t{\r\n\t\t\t\t\"ConditionOccurrence\" : {\r\n\t\t\t\t\t\"CodesetId\" : 0,\r\n\t\t\t\t\t\"ConditionTypeExclude\" : false\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"ObservationWindow\" : {\r\n\t\t\t\"PriorDays\" : 0,\r\n\t\t\t\"PostDays\" : 0\r\n\t\t},\r\n\t\t\"PrimaryCriteriaLimit\" : {\r\n\t\t\t\"Type\" : \"All\"\r\n\t\t}\r\n\t},\r\n\t\"ConceptSets\" : [\r\n\t\t{\r\n\t\t\t\"id\" : 0,\r\n\t\t\t\"name\" : \"GI bleed\",\r\n\t\t\t\"expression\" : {\r\n\t\t\t\t\"items\" : [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"concept\" : {\r\n\t\t\t\t\t\t\t\"CONCEPT_ID\" : 192671,\r\n\t\t\t\t\t\t\t\"CONCEPT_NAME\" : \"Gastrointestinal hemorrhage\",\r\n\t\t\t\t\t\t\t\"STANDARD_CONCEPT\" : \"S\",\r\n\t\t\t\t\t\t\t\"STANDARD_CONCEPT_CAPTION\" : \"Standard\",\r\n\t\t\t\t\t\t\t\"INVALID_REASON\" : \"V\",\r\n\t\t\t\t\t\t\t\"INVALID_REASON_CAPTION\" : \"Valid\",\r\n\t\t\t\t\t\t\t\"CONCEPT_CODE\" : \"74474003\",\r\n\t\t\t\t\t\t\t\"DOMAIN_ID\" : \"Condition\",\r\n\t\t\t\t\t\t\t\"VOCABULARY_ID\" : \"SNOMED\",\r\n\t\t\t\t\t\t\t\"CONCEPT_CLASS_ID\" : \"Clinical Finding\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"isExcluded\" : false,\r\n\t\t\t\t\t\t\"includeDescendants\" : true,\r\n\t\t\t\t\t\t\"includeMapped\" : false\r\n\t\t\t\t\t}\r\n\t\t\t\t]\r\n\t\t\t}\r\n\t\t}\r\n\t],\r\n\t\"QualifiedLimit\" : {\r\n\t\t\"Type\" : \"First\"\r\n\t},\r\n\t\"ExpressionLimit\" : {\r\n\t\t\"Type\" : \"First\"\r\n\t},\r\n\t\"InclusionRules\" : [],\r\n\t\"EndStrategy\" : {\r\n\t\t\"DateOffset\" : {\r\n\t\t\t\"DateField\" : \"StartDate\",\r\n\t\t\t\"Offset\" : 0\r\n\t\t}\r\n\t},\r\n\t\"CensoringCriteria\" : [],\r\n\t\"CollapseSettings\" : {\r\n\t\t\"CollapseType\" : \"ERA\",\r\n\t\t\"EraPad\" : 0\r\n\t},\r\n\t\"CensorWindow\" : {}\r\n}",
          "subsetParent": 3,
          "isSubset": false,
          "subsetDefinitionId": "NA"
        },
        {
          "cohortId": 4,
          "cohortName": "Acetaminophen",
          "sql": "CREATE TABLE #Codesets (\r\n  codeset_id int NOT NULL,\r\n  concept_id bigint NOT NULL\r\n)\r\n;\r\n\r\nINSERT INTO #Codesets (codeset_id, concept_id)\nSELECT 0 as codeset_id, c.concept_id FROM (select distinct I.concept_id FROM\r\n( \r\n  select concept_id from @vocabulary_database_schema.CONCEPT where (concept_id in (1125315))\r\nUNION  select c.concept_id\r\n  from @vocabulary_database_schema.CONCEPT c\r\n  join @vocabulary_database_schema.CONCEPT_ANCESTOR ca on c.concept_id = ca.descendant_concept_id\r\n  WHERE c.invalid_reason is null\r\n  and (ca.ancestor_concept_id in (1125315))\r\n\r\n) I\r\n) C;\r\n\r\nUPDATE STATISTICS #Codesets;\r\n\r\n\r\nSELECT event_id, person_id, start_date, end_date, op_start_date, op_end_date, visit_occurrence_id\r\nINTO #qualified_events\r\nFROM \r\n(\r\n  select pe.event_id, pe.person_id, pe.start_date, pe.end_date, pe.op_start_date, pe.op_end_date, row_number() over (partition by pe.person_id order by pe.start_date ASC) as ordinal, cast(pe.visit_occurrence_id as bigint) as visit_occurrence_id\r\n  FROM (-- Begin Primary Events\r\nselect P.ordinal as event_id, P.person_id, P.start_date, P.end_date, op_start_date, op_end_date, cast(P.visit_occurrence_id as bigint) as visit_occurrence_id\r\nFROM\r\n(\r\n  select E.person_id, E.start_date, E.end_date,\r\n         row_number() OVER (PARTITION BY E.person_id ORDER BY E.sort_date ASC, E.event_id) ordinal,\r\n         OP.observation_period_start_date as op_start_date, OP.observation_period_end_date as op_end_date, cast(E.visit_occurrence_id as bigint) as visit_occurrence_id\r\n  FROM \r\n  (\r\n  -- Begin Drug Exposure Criteria\r\nselect C.person_id, C.drug_exposure_id as event_id, C.start_date, C.end_date,\r\n  C.visit_occurrence_id,C.start_date as sort_date\r\nfrom \r\n(\r\n  select de.person_id,de.drug_exposure_id,de.drug_concept_id,de.visit_occurrence_id,days_supply,quantity,refills,de.drug_exposure_start_date as start_date, COALESCE(de.drug_exposure_end_date, DATEADD(day,de.days_supply,de.drug_exposure_start_date), DATEADD(day,1,de.drug_exposure_start_date)) as end_date \r\n  FROM @cdm_database_schema.DRUG_EXPOSURE de\r\nJOIN #Codesets cs on (de.drug_concept_id = cs.concept_id and cs.codeset_id = 0)\r\n) C\r\n\r\n\r\n-- End Drug Exposure Criteria\r\n\r\n  ) E\r\n\tJOIN @cdm_database_schema.observation_period OP on E.person_id = OP.person_id and E.start_date >=  OP.observation_period_start_date and E.start_date <= op.observation_period_end_date\r\n  WHERE DATEADD(day,0,OP.OBSERVATION_PERIOD_START_DATE) <= E.START_DATE AND DATEADD(day,0,E.START_DATE) <= OP.OBSERVATION_PERIOD_END_DATE\r\n) P\r\nWHERE P.ordinal = 1\r\n-- End Primary Events\r\n) pe\r\n  \r\n) QE\r\n\r\n;\r\n\r\n--- Inclusion Rule Inserts\r\n\r\ncreate table #inclusion_events (inclusion_rule_id bigint,\n\tperson_id bigint,\n\tevent_id bigint\n);\r\n\r\nselect event_id, person_id, start_date, end_date, op_start_date, op_end_date\r\ninto #included_events\r\nFROM (\r\n  SELECT event_id, person_id, start_date, end_date, op_start_date, op_end_date, row_number() over (partition by person_id order by start_date ASC) as ordinal\r\n  from\r\n  (\r\n    select Q.event_id, Q.person_id, Q.start_date, Q.end_date, Q.op_start_date, Q.op_end_date, SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) as inclusion_rule_mask\r\n    from #qualified_events Q\r\n    LEFT JOIN #inclusion_events I on I.person_id = Q.person_id and I.event_id = Q.event_id\r\n    GROUP BY Q.event_id, Q.person_id, Q.start_date, Q.end_date, Q.op_start_date, Q.op_end_date\r\n  ) MG -- matching groups\r\n{0 != 0}?{\r\n  -- the matching group with all bits set ( POWER(2,# of inclusion rules) - 1 = inclusion_rule_mask\r\n  WHERE (MG.inclusion_rule_mask = POWER(cast(2 as bigint),0)-1)\r\n}\r\n) Results\r\nWHERE Results.ordinal = 1\r\n;\r\n\r\n-- custom era strategy\r\n\r\nwith ctePersons(person_id) as (\r\n\tselect distinct person_id from #included_events\r\n)\r\n\r\nselect person_id, drug_exposure_start_date, drug_exposure_end_date\r\nINTO #drugTarget\r\nFROM (\r\n\tselect de.PERSON_ID, DRUG_EXPOSURE_START_DATE, COALESCE(DRUG_EXPOSURE_END_DATE, DATEADD(day,DAYS_SUPPLY,DRUG_EXPOSURE_START_DATE), DATEADD(day,1,DRUG_EXPOSURE_START_DATE)) as DRUG_EXPOSURE_END_DATE \r\n\tFROM @cdm_database_schema.DRUG_EXPOSURE de\r\n\tJOIN ctePersons p on de.person_id = p.person_id\r\n\tJOIN #Codesets cs on cs.codeset_id = 0 AND de.drug_concept_id = cs.concept_id\r\n\r\n\tUNION ALL\r\n\r\n\tselect de.PERSON_ID, DRUG_EXPOSURE_START_DATE, COALESCE(DRUG_EXPOSURE_END_DATE, DATEADD(day,DAYS_SUPPLY,DRUG_EXPOSURE_START_DATE), DATEADD(day,1,DRUG_EXPOSURE_START_DATE)) as DRUG_EXPOSURE_END_DATE \r\n\tFROM @cdm_database_schema.DRUG_EXPOSURE de\r\n\tJOIN ctePersons p on de.person_id = p.person_id\r\n\tJOIN #Codesets cs on cs.codeset_id = 0 AND de.drug_source_concept_id = cs.concept_id\r\n) E\r\n;\r\n\r\nselect et.event_id, et.person_id, ERAS.era_end_date as end_date\r\nINTO #strategy_ends\r\nfrom #included_events et\r\nJOIN \r\n(\r\n\r\n  select person_id, min(start_date) as era_start_date, DATEADD(day,-1 * 0, max(end_date)) as era_end_date\r\n  from (\r\n    select person_id, start_date, end_date, sum(is_start) over (partition by person_id order by start_date, is_start desc rows unbounded preceding) group_idx\r\n    from (\r\n      select person_id, start_date, end_date, \r\n        case when max(end_date) over (partition by person_id order by start_date rows between unbounded preceding and 1 preceding) >= start_date then 0 else 1 end is_start\r\n      from (\r\n        select person_id, drug_exposure_start_date as start_date, DATEADD(day,(0 + 0),DRUG_EXPOSURE_END_DATE) as end_date\r\n        FROM #drugTarget\r\n      ) DT\r\n    ) ST\r\n  ) GR\r\n  group by person_id, group_idx\r\n) ERAS on ERAS.person_id = et.person_id \r\nWHERE et.start_date between ERAS.era_start_date and ERAS.era_end_date;\r\n\r\nTRUNCATE TABLE #drugTarget;\r\nDROP TABLE #drugTarget;\r\n\r\n\r\n-- generate cohort periods into #final_cohort\r\nselect person_id, start_date, end_date\r\nINTO #cohort_rows\r\nfrom ( -- first_ends\r\n\tselect F.person_id, F.start_date, F.end_date\r\n\tFROM (\r\n\t  select I.event_id, I.person_id, I.start_date, CE.end_date, row_number() over (partition by I.person_id, I.event_id order by CE.end_date) as ordinal\r\n\t  from #included_events I\r\n\t  join ( -- cohort_ends\r\n-- cohort exit dates\r\n-- By default, cohort exit at the event's op end date\nselect event_id, person_id, op_end_date as end_date from #included_events\nUNION ALL\n-- End Date Strategy\nSELECT event_id, person_id, end_date from #strategy_ends\n\r\n    ) CE on I.event_id = CE.event_id and I.person_id = CE.person_id and CE.end_date >= I.start_date\r\n\t) F\r\n\tWHERE F.ordinal = 1\r\n) FE;\r\n\r\n\r\nselect person_id, min(start_date) as start_date, DATEADD(day,-1 * 30, max(end_date)) as end_date\r\ninto #final_cohort\r\nfrom (\r\n  select person_id, start_date, end_date, sum(is_start) over (partition by person_id order by start_date, is_start desc rows unbounded preceding) group_idx\r\n  from (\r\n    select person_id, start_date, end_date, \r\n      case when max(end_date) over (partition by person_id order by start_date rows between unbounded preceding and 1 preceding) >= start_date then 0 else 1 end is_start\r\n    from (\r\n      select person_id, start_date, DATEADD(day,30,end_date) as end_date\r\n      from #cohort_rows\r\n    ) CR\r\n  ) ST\r\n) GR\r\ngroup by person_id, group_idx;\r\n\r\nDELETE FROM @target_database_schema.@target_cohort_table where cohort_definition_id = @target_cohort_id;\r\nINSERT INTO @target_database_schema.@target_cohort_table (cohort_definition_id, subject_id, cohort_start_date, cohort_end_date)\r\nselect @target_cohort_id as cohort_definition_id, person_id, start_date, end_date \nFROM #final_cohort CO\r\n;\r\n\r\n{0 != 0}?{\r\n-- BEGIN: Censored Stats\r\n\r\ndelete from @results_database_schema.cohort_censor_stats where cohort_definition_id = @target_cohort_id;\r\n\r\n-- END: Censored Stats\r\n}\r\n{0 != 0 & 0 != 0}?{\r\n\r\nCREATE TABLE #inclusion_rules (rule_sequence int);\r\n\r\n-- Find the event that is the 'best match' per person.  \r\n-- the 'best match' is defined as the event that satisfies the most inclusion rules.\r\n-- ties are solved by choosing the event that matches the earliest inclusion rule, and then earliest.\r\n\r\nselect q.person_id, q.event_id\r\ninto #best_events\r\nfrom #qualified_events Q\r\njoin (\r\n\tSELECT R.person_id, R.event_id, ROW_NUMBER() OVER (PARTITION BY R.person_id ORDER BY R.rule_count DESC,R.min_rule_id ASC, R.start_date ASC) AS rank_value\r\n\tFROM (\r\n\t\tSELECT Q.person_id, Q.event_id, COALESCE(COUNT(DISTINCT I.inclusion_rule_id), 0) AS rule_count, COALESCE(MIN(I.inclusion_rule_id), 0) AS min_rule_id, Q.start_date\r\n\t\tFROM #qualified_events Q\r\n\t\tLEFT JOIN #inclusion_events I ON q.person_id = i.person_id AND q.event_id = i.event_id\r\n\t\tGROUP BY Q.person_id, Q.event_id, Q.start_date\r\n\t) R\r\n) ranked on Q.person_id = ranked.person_id and Q.event_id = ranked.event_id\r\nWHERE ranked.rank_value = 1\r\n;\r\n\r\n-- modes of generation: (the same tables store the results for the different modes, identified by the mode_id column)\r\n-- 0: all events\r\n-- 1: best event\r\n\r\n\r\n-- BEGIN: Inclusion Impact Analysis - event\r\n-- calculte matching group counts\r\ndelete from @results_database_schema.cohort_inclusion_result where cohort_definition_id = @target_cohort_id and mode_id = 0;\r\ninsert into @results_database_schema.cohort_inclusion_result (cohort_definition_id, inclusion_rule_mask, person_count, mode_id)\r\nselect @target_cohort_id as cohort_definition_id, inclusion_rule_mask, count_big(*) as person_count, 0 as mode_id\r\nfrom\r\n(\r\n  select Q.person_id, Q.event_id, CAST(SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) AS bigint) as inclusion_rule_mask\r\n  from #qualified_events Q\r\n  LEFT JOIN #inclusion_events I on q.person_id = i.person_id and q.event_id = i.event_id\r\n  GROUP BY Q.person_id, Q.event_id\r\n) MG -- matching groups\r\ngroup by inclusion_rule_mask\r\n;\r\n\r\n-- calculate gain counts \r\ndelete from @results_database_schema.cohort_inclusion_stats where cohort_definition_id = @target_cohort_id and mode_id = 0;\r\ninsert into @results_database_schema.cohort_inclusion_stats (cohort_definition_id, rule_sequence, person_count, gain_count, person_total, mode_id)\r\nselect @target_cohort_id as cohort_definition_id, ir.rule_sequence, coalesce(T.person_count, 0) as person_count, coalesce(SR.person_count, 0) gain_count, EventTotal.total, 0 as mode_id\r\nfrom #inclusion_rules ir\r\nleft join\r\n(\r\n  select i.inclusion_rule_id, count_big(i.event_id) as person_count\r\n  from #qualified_events Q\r\n  JOIN #inclusion_events i on Q.person_id = I.person_id and Q.event_id = i.event_id\r\n  group by i.inclusion_rule_id\r\n) T on ir.rule_sequence = T.inclusion_rule_id\r\nCROSS JOIN (select count(*) as total_rules from #inclusion_rules) RuleTotal\r\nCROSS JOIN (select count_big(event_id) as total from #qualified_events) EventTotal\r\nLEFT JOIN @results_database_schema.cohort_inclusion_result SR on SR.mode_id = 0 AND SR.cohort_definition_id = @target_cohort_id AND (POWER(cast(2 as bigint),RuleTotal.total_rules) - POWER(cast(2 as bigint),ir.rule_sequence) - 1) = SR.inclusion_rule_mask -- POWER(2,rule count) - POWER(2,rule sequence) - 1 is the mask for 'all except this rule'\r\n;\r\n\r\n-- calculate totals\r\ndelete from @results_database_schema.cohort_summary_stats where cohort_definition_id = @target_cohort_id and mode_id = 0;\r\ninsert into @results_database_schema.cohort_summary_stats (cohort_definition_id, base_count, final_count, mode_id)\r\nselect @target_cohort_id as cohort_definition_id, PC.total as person_count, coalesce(FC.total, 0) as final_count, 0 as mode_id\r\nFROM\r\n(select count_big(event_id) as total from #qualified_events) PC,\r\n(select sum(sr.person_count) as total\r\n  from @results_database_schema.cohort_inclusion_result sr\r\n  CROSS JOIN (select count(*) as total_rules from #inclusion_rules) RuleTotal\r\n  where sr.mode_id = 0 and sr.cohort_definition_id = @target_cohort_id and sr.inclusion_rule_mask = POWER(cast(2 as bigint),RuleTotal.total_rules)-1\r\n) FC\r\n;\r\n\r\n-- END: Inclusion Impact Analysis - event\r\n\r\n-- BEGIN: Inclusion Impact Analysis - person\r\n-- calculte matching group counts\r\ndelete from @results_database_schema.cohort_inclusion_result where cohort_definition_id = @target_cohort_id and mode_id = 1;\r\ninsert into @results_database_schema.cohort_inclusion_result (cohort_definition_id, inclusion_rule_mask, person_count, mode_id)\r\nselect @target_cohort_id as cohort_definition_id, inclusion_rule_mask, count_big(*) as person_count, 1 as mode_id\r\nfrom\r\n(\r\n  select Q.person_id, Q.event_id, CAST(SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) AS bigint) as inclusion_rule_mask\r\n  from #best_events Q\r\n  LEFT JOIN #inclusion_events I on q.person_id = i.person_id and q.event_id = i.event_id\r\n  GROUP BY Q.person_id, Q.event_id\r\n) MG -- matching groups\r\ngroup by inclusion_rule_mask\r\n;\r\n\r\n-- calculate gain counts \r\ndelete from @results_database_schema.cohort_inclusion_stats where cohort_definition_id = @target_cohort_id and mode_id = 1;\r\ninsert into @results_database_schema.cohort_inclusion_stats (cohort_definition_id, rule_sequence, person_count, gain_count, person_total, mode_id)\r\nselect @target_cohort_id as cohort_definition_id, ir.rule_sequence, coalesce(T.person_count, 0) as person_count, coalesce(SR.person_count, 0) gain_count, EventTotal.total, 1 as mode_id\r\nfrom #inclusion_rules ir\r\nleft join\r\n(\r\n  select i.inclusion_rule_id, count_big(i.event_id) as person_count\r\n  from #best_events Q\r\n  JOIN #inclusion_events i on Q.person_id = I.person_id and Q.event_id = i.event_id\r\n  group by i.inclusion_rule_id\r\n) T on ir.rule_sequence = T.inclusion_rule_id\r\nCROSS JOIN (select count(*) as total_rules from #inclusion_rules) RuleTotal\r\nCROSS JOIN (select count_big(event_id) as total from #best_events) EventTotal\r\nLEFT JOIN @results_database_schema.cohort_inclusion_result SR on SR.mode_id = 1 AND SR.cohort_definition_id = @target_cohort_id AND (POWER(cast(2 as bigint),RuleTotal.total_rules) - POWER(cast(2 as bigint),ir.rule_sequence) - 1) = SR.inclusion_rule_mask -- POWER(2,rule count) - POWER(2,rule sequence) - 1 is the mask for 'all except this rule'\r\n;\r\n\r\n-- calculate totals\r\ndelete from @results_database_schema.cohort_summary_stats where cohort_definition_id = @target_cohort_id and mode_id = 1;\r\ninsert into @results_database_schema.cohort_summary_stats (cohort_definition_id, base_count, final_count, mode_id)\r\nselect @target_cohort_id as cohort_definition_id, PC.total as person_count, coalesce(FC.total, 0) as final_count, 1 as mode_id\r\nFROM\r\n(select count_big(event_id) as total from #best_events) PC,\r\n(select sum(sr.person_count) as total\r\n  from @results_database_schema.cohort_inclusion_result sr\r\n  CROSS JOIN (select count(*) as total_rules from #inclusion_rules) RuleTotal\r\n  where sr.mode_id = 1 and sr.cohort_definition_id = @target_cohort_id and sr.inclusion_rule_mask = POWER(cast(2 as bigint),RuleTotal.total_rules)-1\r\n) FC\r\n;\r\n\r\n-- END: Inclusion Impact Analysis - person\r\n\r\nTRUNCATE TABLE #best_events;\r\nDROP TABLE #best_events;\r\n\r\nTRUNCATE TABLE #inclusion_rules;\r\nDROP TABLE #inclusion_rules;\r\n}\r\n\r\nTRUNCATE TABLE #strategy_ends;\nDROP TABLE #strategy_ends;\n\r\n\r\nTRUNCATE TABLE #cohort_rows;\r\nDROP TABLE #cohort_rows;\r\n\r\nTRUNCATE TABLE #final_cohort;\r\nDROP TABLE #final_cohort;\r\n\r\nTRUNCATE TABLE #inclusion_events;\r\nDROP TABLE #inclusion_events;\r\n\r\nTRUNCATE TABLE #qualified_events;\r\nDROP TABLE #qualified_events;\r\n\r\nTRUNCATE TABLE #included_events;\r\nDROP TABLE #included_events;\r\n\r\nTRUNCATE TABLE #Codesets;\r\nDROP TABLE #Codesets;\r\n",
          "json": "{\r\n  \"ConceptSets\": [\r\n    {\r\n      \"id\": 0,\r\n      \"name\": \"[MVK] Acetaminophen\",\r\n      \"expression\": {\r\n        \"items\": [\r\n          {\r\n            \"concept\": {\r\n              \"CONCEPT_CLASS_ID\": \"Ingredient\",\r\n              \"CONCEPT_CODE\": \"161\",\r\n              \"CONCEPT_ID\": 1125315,\r\n              \"CONCEPT_NAME\": \"acetaminophen\",\r\n              \"DOMAIN_ID\": \"Drug\",\r\n              \"INVALID_REASON\": \"V\",\r\n              \"INVALID_REASON_CAPTION\": \"Valid\",\r\n              \"STANDARD_CONCEPT\": \"S\",\r\n              \"STANDARD_CONCEPT_CAPTION\": \"Standard\",\r\n              \"VOCABULARY_ID\": \"RxNorm\"\r\n            },\r\n            \"includeDescendants\": true\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  ],\r\n  \"PrimaryCriteria\": {\r\n    \"CriteriaList\": [\r\n      {\r\n        \"DrugExposure\": {\r\n          \"CodesetId\": 0\r\n        }\r\n      }\r\n    ],\r\n    \"ObservationWindow\": {\r\n      \"PriorDays\": 0,\r\n      \"PostDays\": 0\r\n    },\r\n    \"PrimaryCriteriaLimit\": {\r\n      \"Type\": \"First\"\r\n    }\r\n  },\r\n  \"QualifiedLimit\": {\r\n    \"Type\": \"First\"\r\n  },\r\n  \"ExpressionLimit\": {\r\n    \"Type\": \"First\"\r\n  },\r\n  \"InclusionRules\": [],\r\n  \"EndStrategy\": {\r\n    \"CustomEra\": {\r\n      \"DrugCodesetId\": 0,\r\n      \"GapDays\": 0,\r\n      \"Offset\": 0\r\n    }\r\n  },\r\n  \"CensoringCriteria\": [],\r\n  \"CollapseSettings\": {\r\n    \"CollapseType\": \"ERA\",\r\n    \"EraPad\": 30\r\n  },\r\n  \"CensorWindow\": {},\r\n  \"cdmVersionRange\": \">=5.0.0\"\r\n}",
          "subsetParent": 4,
          "isSubset": false,
          "subsetDefinitionId": "NA"
        },
        {
          "cohortId": 5,
          "cohortName": "Amoxicillin",
          "sql": "CREATE TABLE #Codesets (\r\n  codeset_id int NOT NULL,\r\n  concept_id bigint NOT NULL\r\n)\r\n;\r\n\r\nINSERT INTO #Codesets (codeset_id, concept_id)\nSELECT 0 as codeset_id, c.concept_id FROM (select distinct I.concept_id FROM\r\n( \r\n  select concept_id from @vocabulary_database_schema.CONCEPT where (concept_id in (1713332))\r\nUNION  select c.concept_id\r\n  from @vocabulary_database_schema.CONCEPT c\r\n  join @vocabulary_database_schema.CONCEPT_ANCESTOR ca on c.concept_id = ca.descendant_concept_id\r\n  WHERE c.invalid_reason is null\r\n  and (ca.ancestor_concept_id in (1713332))\r\n\r\n) I\r\n) C;\r\n\r\nUPDATE STATISTICS #Codesets;\r\n\r\n\r\nSELECT event_id, person_id, start_date, end_date, op_start_date, op_end_date, visit_occurrence_id\r\nINTO #qualified_events\r\nFROM \r\n(\r\n  select pe.event_id, pe.person_id, pe.start_date, pe.end_date, pe.op_start_date, pe.op_end_date, row_number() over (partition by pe.person_id order by pe.start_date ASC) as ordinal, cast(pe.visit_occurrence_id as bigint) as visit_occurrence_id\r\n  FROM (-- Begin Primary Events\r\nselect P.ordinal as event_id, P.person_id, P.start_date, P.end_date, op_start_date, op_end_date, cast(P.visit_occurrence_id as bigint) as visit_occurrence_id\r\nFROM\r\n(\r\n  select E.person_id, E.start_date, E.end_date,\r\n         row_number() OVER (PARTITION BY E.person_id ORDER BY E.sort_date ASC, E.event_id) ordinal,\r\n         OP.observation_period_start_date as op_start_date, OP.observation_period_end_date as op_end_date, cast(E.visit_occurrence_id as bigint) as visit_occurrence_id\r\n  FROM \r\n  (\r\n  -- Begin Drug Exposure Criteria\r\nselect C.person_id, C.drug_exposure_id as event_id, C.start_date, C.end_date,\r\n  C.visit_occurrence_id,C.start_date as sort_date\r\nfrom \r\n(\r\n  select de.person_id,de.drug_exposure_id,de.drug_concept_id,de.visit_occurrence_id,days_supply,quantity,refills,de.drug_exposure_start_date as start_date, COALESCE(de.drug_exposure_end_date, DATEADD(day,de.days_supply,de.drug_exposure_start_date), DATEADD(day,1,de.drug_exposure_start_date)) as end_date \r\n  FROM @cdm_database_schema.DRUG_EXPOSURE de\r\nJOIN #Codesets cs on (de.drug_concept_id = cs.concept_id and cs.codeset_id = 0)\r\n) C\r\n\r\n\r\n-- End Drug Exposure Criteria\r\n\r\n  ) E\r\n\tJOIN @cdm_database_schema.observation_period OP on E.person_id = OP.person_id and E.start_date >=  OP.observation_period_start_date and E.start_date <= op.observation_period_end_date\r\n  WHERE DATEADD(day,0,OP.OBSERVATION_PERIOD_START_DATE) <= E.START_DATE AND DATEADD(day,0,E.START_DATE) <= OP.OBSERVATION_PERIOD_END_DATE\r\n) P\r\nWHERE P.ordinal = 1\r\n-- End Primary Events\r\n) pe\r\n  \r\n) QE\r\n\r\n;\r\n\r\n--- Inclusion Rule Inserts\r\n\r\ncreate table #inclusion_events (inclusion_rule_id bigint,\n\tperson_id bigint,\n\tevent_id bigint\n);\r\n\r\nselect event_id, person_id, start_date, end_date, op_start_date, op_end_date\r\ninto #included_events\r\nFROM (\r\n  SELECT event_id, person_id, start_date, end_date, op_start_date, op_end_date, row_number() over (partition by person_id order by start_date ASC) as ordinal\r\n  from\r\n  (\r\n    select Q.event_id, Q.person_id, Q.start_date, Q.end_date, Q.op_start_date, Q.op_end_date, SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) as inclusion_rule_mask\r\n    from #qualified_events Q\r\n    LEFT JOIN #inclusion_events I on I.person_id = Q.person_id and I.event_id = Q.event_id\r\n    GROUP BY Q.event_id, Q.person_id, Q.start_date, Q.end_date, Q.op_start_date, Q.op_end_date\r\n  ) MG -- matching groups\r\n{0 != 0}?{\r\n  -- the matching group with all bits set ( POWER(2,# of inclusion rules) - 1 = inclusion_rule_mask\r\n  WHERE (MG.inclusion_rule_mask = POWER(cast(2 as bigint),0)-1)\r\n}\r\n) Results\r\nWHERE Results.ordinal = 1\r\n;\r\n\r\n-- custom era strategy\r\n\r\nwith ctePersons(person_id) as (\r\n\tselect distinct person_id from #included_events\r\n)\r\n\r\nselect person_id, drug_exposure_start_date, drug_exposure_end_date\r\nINTO #drugTarget\r\nFROM (\r\n\tselect de.PERSON_ID, DRUG_EXPOSURE_START_DATE, COALESCE(DRUG_EXPOSURE_END_DATE, DATEADD(day,DAYS_SUPPLY,DRUG_EXPOSURE_START_DATE), DATEADD(day,1,DRUG_EXPOSURE_START_DATE)) as DRUG_EXPOSURE_END_DATE \r\n\tFROM @cdm_database_schema.DRUG_EXPOSURE de\r\n\tJOIN ctePersons p on de.person_id = p.person_id\r\n\tJOIN #Codesets cs on cs.codeset_id = 0 AND de.drug_concept_id = cs.concept_id\r\n\r\n\tUNION ALL\r\n\r\n\tselect de.PERSON_ID, DRUG_EXPOSURE_START_DATE, COALESCE(DRUG_EXPOSURE_END_DATE, DATEADD(day,DAYS_SUPPLY,DRUG_EXPOSURE_START_DATE), DATEADD(day,1,DRUG_EXPOSURE_START_DATE)) as DRUG_EXPOSURE_END_DATE \r\n\tFROM @cdm_database_schema.DRUG_EXPOSURE de\r\n\tJOIN ctePersons p on de.person_id = p.person_id\r\n\tJOIN #Codesets cs on cs.codeset_id = 0 AND de.drug_source_concept_id = cs.concept_id\r\n) E\r\n;\r\n\r\nselect et.event_id, et.person_id, ERAS.era_end_date as end_date\r\nINTO #strategy_ends\r\nfrom #included_events et\r\nJOIN \r\n(\r\n\r\n  select person_id, min(start_date) as era_start_date, DATEADD(day,-1 * 0, max(end_date)) as era_end_date\r\n  from (\r\n    select person_id, start_date, end_date, sum(is_start) over (partition by person_id order by start_date, is_start desc rows unbounded preceding) group_idx\r\n    from (\r\n      select person_id, start_date, end_date, \r\n        case when max(end_date) over (partition by person_id order by start_date rows between unbounded preceding and 1 preceding) >= start_date then 0 else 1 end is_start\r\n      from (\r\n        select person_id, drug_exposure_start_date as start_date, DATEADD(day,(0 + 0),DRUG_EXPOSURE_END_DATE) as end_date\r\n        FROM #drugTarget\r\n      ) DT\r\n    ) ST\r\n  ) GR\r\n  group by person_id, group_idx\r\n) ERAS on ERAS.person_id = et.person_id \r\nWHERE et.start_date between ERAS.era_start_date and ERAS.era_end_date;\r\n\r\nTRUNCATE TABLE #drugTarget;\r\nDROP TABLE #drugTarget;\r\n\r\n\r\n-- generate cohort periods into #final_cohort\r\nselect person_id, start_date, end_date\r\nINTO #cohort_rows\r\nfrom ( -- first_ends\r\n\tselect F.person_id, F.start_date, F.end_date\r\n\tFROM (\r\n\t  select I.event_id, I.person_id, I.start_date, CE.end_date, row_number() over (partition by I.person_id, I.event_id order by CE.end_date) as ordinal\r\n\t  from #included_events I\r\n\t  join ( -- cohort_ends\r\n-- cohort exit dates\r\n-- By default, cohort exit at the event's op end date\nselect event_id, person_id, op_end_date as end_date from #included_events\nUNION ALL\n-- End Date Strategy\nSELECT event_id, person_id, end_date from #strategy_ends\n\r\n    ) CE on I.event_id = CE.event_id and I.person_id = CE.person_id and CE.end_date >= I.start_date\r\n\t) F\r\n\tWHERE F.ordinal = 1\r\n) FE;\r\n\r\n\r\nselect person_id, min(start_date) as start_date, DATEADD(day,-1 * 30, max(end_date)) as end_date\r\ninto #final_cohort\r\nfrom (\r\n  select person_id, start_date, end_date, sum(is_start) over (partition by person_id order by start_date, is_start desc rows unbounded preceding) group_idx\r\n  from (\r\n    select person_id, start_date, end_date, \r\n      case when max(end_date) over (partition by person_id order by start_date rows between unbounded preceding and 1 preceding) >= start_date then 0 else 1 end is_start\r\n    from (\r\n      select person_id, start_date, DATEADD(day,30,end_date) as end_date\r\n      from #cohort_rows\r\n    ) CR\r\n  ) ST\r\n) GR\r\ngroup by person_id, group_idx;\r\n\r\nDELETE FROM @target_database_schema.@target_cohort_table where cohort_definition_id = @target_cohort_id;\r\nINSERT INTO @target_database_schema.@target_cohort_table (cohort_definition_id, subject_id, cohort_start_date, cohort_end_date)\r\nselect @target_cohort_id as cohort_definition_id, person_id, start_date, end_date \nFROM #final_cohort CO\r\n;\r\n\r\n{0 != 0}?{\r\n-- BEGIN: Censored Stats\r\n\r\ndelete from @results_database_schema.cohort_censor_stats where cohort_definition_id = @target_cohort_id;\r\n\r\n-- END: Censored Stats\r\n}\r\n{0 != 0 & 0 != 0}?{\r\n\r\nCREATE TABLE #inclusion_rules (rule_sequence int);\r\n\r\n-- Find the event that is the 'best match' per person.  \r\n-- the 'best match' is defined as the event that satisfies the most inclusion rules.\r\n-- ties are solved by choosing the event that matches the earliest inclusion rule, and then earliest.\r\n\r\nselect q.person_id, q.event_id\r\ninto #best_events\r\nfrom #qualified_events Q\r\njoin (\r\n\tSELECT R.person_id, R.event_id, ROW_NUMBER() OVER (PARTITION BY R.person_id ORDER BY R.rule_count DESC,R.min_rule_id ASC, R.start_date ASC) AS rank_value\r\n\tFROM (\r\n\t\tSELECT Q.person_id, Q.event_id, COALESCE(COUNT(DISTINCT I.inclusion_rule_id), 0) AS rule_count, COALESCE(MIN(I.inclusion_rule_id), 0) AS min_rule_id, Q.start_date\r\n\t\tFROM #qualified_events Q\r\n\t\tLEFT JOIN #inclusion_events I ON q.person_id = i.person_id AND q.event_id = i.event_id\r\n\t\tGROUP BY Q.person_id, Q.event_id, Q.start_date\r\n\t) R\r\n) ranked on Q.person_id = ranked.person_id and Q.event_id = ranked.event_id\r\nWHERE ranked.rank_value = 1\r\n;\r\n\r\n-- modes of generation: (the same tables store the results for the different modes, identified by the mode_id column)\r\n-- 0: all events\r\n-- 1: best event\r\n\r\n\r\n-- BEGIN: Inclusion Impact Analysis - event\r\n-- calculte matching group counts\r\ndelete from @results_database_schema.cohort_inclusion_result where cohort_definition_id = @target_cohort_id and mode_id = 0;\r\ninsert into @results_database_schema.cohort_inclusion_result (cohort_definition_id, inclusion_rule_mask, person_count, mode_id)\r\nselect @target_cohort_id as cohort_definition_id, inclusion_rule_mask, count_big(*) as person_count, 0 as mode_id\r\nfrom\r\n(\r\n  select Q.person_id, Q.event_id, CAST(SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) AS bigint) as inclusion_rule_mask\r\n  from #qualified_events Q\r\n  LEFT JOIN #inclusion_events I on q.person_id = i.person_id and q.event_id = i.event_id\r\n  GROUP BY Q.person_id, Q.event_id\r\n) MG -- matching groups\r\ngroup by inclusion_rule_mask\r\n;\r\n\r\n-- calculate gain counts \r\ndelete from @results_database_schema.cohort_inclusion_stats where cohort_definition_id = @target_cohort_id and mode_id = 0;\r\ninsert into @results_database_schema.cohort_inclusion_stats (cohort_definition_id, rule_sequence, person_count, gain_count, person_total, mode_id)\r\nselect @target_cohort_id as cohort_definition_id, ir.rule_sequence, coalesce(T.person_count, 0) as person_count, coalesce(SR.person_count, 0) gain_count, EventTotal.total, 0 as mode_id\r\nfrom #inclusion_rules ir\r\nleft join\r\n(\r\n  select i.inclusion_rule_id, count_big(i.event_id) as person_count\r\n  from #qualified_events Q\r\n  JOIN #inclusion_events i on Q.person_id = I.person_id and Q.event_id = i.event_id\r\n  group by i.inclusion_rule_id\r\n) T on ir.rule_sequence = T.inclusion_rule_id\r\nCROSS JOIN (select count(*) as total_rules from #inclusion_rules) RuleTotal\r\nCROSS JOIN (select count_big(event_id) as total from #qualified_events) EventTotal\r\nLEFT JOIN @results_database_schema.cohort_inclusion_result SR on SR.mode_id = 0 AND SR.cohort_definition_id = @target_cohort_id AND (POWER(cast(2 as bigint),RuleTotal.total_rules) - POWER(cast(2 as bigint),ir.rule_sequence) - 1) = SR.inclusion_rule_mask -- POWER(2,rule count) - POWER(2,rule sequence) - 1 is the mask for 'all except this rule'\r\n;\r\n\r\n-- calculate totals\r\ndelete from @results_database_schema.cohort_summary_stats where cohort_definition_id = @target_cohort_id and mode_id = 0;\r\ninsert into @results_database_schema.cohort_summary_stats (cohort_definition_id, base_count, final_count, mode_id)\r\nselect @target_cohort_id as cohort_definition_id, PC.total as person_count, coalesce(FC.total, 0) as final_count, 0 as mode_id\r\nFROM\r\n(select count_big(event_id) as total from #qualified_events) PC,\r\n(select sum(sr.person_count) as total\r\n  from @results_database_schema.cohort_inclusion_result sr\r\n  CROSS JOIN (select count(*) as total_rules from #inclusion_rules) RuleTotal\r\n  where sr.mode_id = 0 and sr.cohort_definition_id = @target_cohort_id and sr.inclusion_rule_mask = POWER(cast(2 as bigint),RuleTotal.total_rules)-1\r\n) FC\r\n;\r\n\r\n-- END: Inclusion Impact Analysis - event\r\n\r\n-- BEGIN: Inclusion Impact Analysis - person\r\n-- calculte matching group counts\r\ndelete from @results_database_schema.cohort_inclusion_result where cohort_definition_id = @target_cohort_id and mode_id = 1;\r\ninsert into @results_database_schema.cohort_inclusion_result (cohort_definition_id, inclusion_rule_mask, person_count, mode_id)\r\nselect @target_cohort_id as cohort_definition_id, inclusion_rule_mask, count_big(*) as person_count, 1 as mode_id\r\nfrom\r\n(\r\n  select Q.person_id, Q.event_id, CAST(SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) AS bigint) as inclusion_rule_mask\r\n  from #best_events Q\r\n  LEFT JOIN #inclusion_events I on q.person_id = i.person_id and q.event_id = i.event_id\r\n  GROUP BY Q.person_id, Q.event_id\r\n) MG -- matching groups\r\ngroup by inclusion_rule_mask\r\n;\r\n\r\n-- calculate gain counts \r\ndelete from @results_database_schema.cohort_inclusion_stats where cohort_definition_id = @target_cohort_id and mode_id = 1;\r\ninsert into @results_database_schema.cohort_inclusion_stats (cohort_definition_id, rule_sequence, person_count, gain_count, person_total, mode_id)\r\nselect @target_cohort_id as cohort_definition_id, ir.rule_sequence, coalesce(T.person_count, 0) as person_count, coalesce(SR.person_count, 0) gain_count, EventTotal.total, 1 as mode_id\r\nfrom #inclusion_rules ir\r\nleft join\r\n(\r\n  select i.inclusion_rule_id, count_big(i.event_id) as person_count\r\n  from #best_events Q\r\n  JOIN #inclusion_events i on Q.person_id = I.person_id and Q.event_id = i.event_id\r\n  group by i.inclusion_rule_id\r\n) T on ir.rule_sequence = T.inclusion_rule_id\r\nCROSS JOIN (select count(*) as total_rules from #inclusion_rules) RuleTotal\r\nCROSS JOIN (select count_big(event_id) as total from #best_events) EventTotal\r\nLEFT JOIN @results_database_schema.cohort_inclusion_result SR on SR.mode_id = 1 AND SR.cohort_definition_id = @target_cohort_id AND (POWER(cast(2 as bigint),RuleTotal.total_rules) - POWER(cast(2 as bigint),ir.rule_sequence) - 1) = SR.inclusion_rule_mask -- POWER(2,rule count) - POWER(2,rule sequence) - 1 is the mask for 'all except this rule'\r\n;\r\n\r\n-- calculate totals\r\ndelete from @results_database_schema.cohort_summary_stats where cohort_definition_id = @target_cohort_id and mode_id = 1;\r\ninsert into @results_database_schema.cohort_summary_stats (cohort_definition_id, base_count, final_count, mode_id)\r\nselect @target_cohort_id as cohort_definition_id, PC.total as person_count, coalesce(FC.total, 0) as final_count, 1 as mode_id\r\nFROM\r\n(select count_big(event_id) as total from #best_events) PC,\r\n(select sum(sr.person_count) as total\r\n  from @results_database_schema.cohort_inclusion_result sr\r\n  CROSS JOIN (select count(*) as total_rules from #inclusion_rules) RuleTotal\r\n  where sr.mode_id = 1 and sr.cohort_definition_id = @target_cohort_id and sr.inclusion_rule_mask = POWER(cast(2 as bigint),RuleTotal.total_rules)-1\r\n) FC\r\n;\r\n\r\n-- END: Inclusion Impact Analysis - person\r\n\r\nTRUNCATE TABLE #best_events;\r\nDROP TABLE #best_events;\r\n\r\nTRUNCATE TABLE #inclusion_rules;\r\nDROP TABLE #inclusion_rules;\r\n}\r\n\r\nTRUNCATE TABLE #strategy_ends;\nDROP TABLE #strategy_ends;\n\r\n\r\nTRUNCATE TABLE #cohort_rows;\r\nDROP TABLE #cohort_rows;\r\n\r\nTRUNCATE TABLE #final_cohort;\r\nDROP TABLE #final_cohort;\r\n\r\nTRUNCATE TABLE #inclusion_events;\r\nDROP TABLE #inclusion_events;\r\n\r\nTRUNCATE TABLE #qualified_events;\r\nDROP TABLE #qualified_events;\r\n\r\nTRUNCATE TABLE #included_events;\r\nDROP TABLE #included_events;\r\n\r\nTRUNCATE TABLE #Codesets;\r\nDROP TABLE #Codesets;\r\n",
          "json": "{\r\n  \"ConceptSets\": [\r\n    {\r\n      \"id\": 0,\r\n      \"name\": \"[MVK] Amoxicillin\",\r\n      \"expression\": {\r\n        \"items\": [\r\n          {\r\n            \"concept\": {\r\n              \"CONCEPT_CLASS_ID\": \"Ingredient\",\r\n              \"CONCEPT_CODE\": \"723\",\r\n              \"CONCEPT_ID\": 1713332,\r\n              \"CONCEPT_NAME\": \"amoxicillin\",\r\n              \"DOMAIN_ID\": \"Drug\",\r\n              \"INVALID_REASON\": \"V\",\r\n              \"INVALID_REASON_CAPTION\": \"Valid\",\r\n              \"STANDARD_CONCEPT\": \"S\",\r\n              \"STANDARD_CONCEPT_CAPTION\": \"Standard\",\r\n              \"VOCABULARY_ID\": \"RxNorm\"\r\n            },\r\n            \"includeDescendants\": true\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  ],\r\n  \"PrimaryCriteria\": {\r\n    \"CriteriaList\": [\r\n      {\r\n        \"DrugExposure\": {\r\n          \"CodesetId\": 0\r\n        }\r\n      }\r\n    ],\r\n    \"ObservationWindow\": {\r\n      \"PriorDays\": 0,\r\n      \"PostDays\": 0\r\n    },\r\n    \"PrimaryCriteriaLimit\": {\r\n      \"Type\": \"First\"\r\n    }\r\n  },\r\n  \"QualifiedLimit\": {\r\n    \"Type\": \"First\"\r\n  },\r\n  \"ExpressionLimit\": {\r\n    \"Type\": \"First\"\r\n  },\r\n  \"InclusionRules\": [],\r\n  \"EndStrategy\": {\r\n    \"CustomEra\": {\r\n      \"DrugCodesetId\": 0,\r\n      \"GapDays\": 0,\r\n      \"Offset\": 0\r\n    }\r\n  },\r\n  \"CensoringCriteria\": [],\r\n  \"CollapseSettings\": {\r\n    \"CollapseType\": \"ERA\",\r\n    \"EraPad\": 30\r\n  },\r\n  \"CensorWindow\": {},\r\n  \"cdmVersionRange\": \">=5.0.0\"\r\n}",
          "subsetParent": 5,
          "isSubset": false,
          "subsetDefinitionId": "NA"
        },
        {
          "cohortId": 6,
          "cohortName": "Aspirin",
          "sql": "CREATE TABLE #Codesets (\r\n  codeset_id int NOT NULL,\r\n  concept_id bigint NOT NULL\r\n)\r\n;\r\n\r\nINSERT INTO #Codesets (codeset_id, concept_id)\nSELECT 0 as codeset_id, c.concept_id FROM (select distinct I.concept_id FROM\r\n( \r\n  select concept_id from @vocabulary_database_schema.CONCEPT where (concept_id in (1112807))\r\nUNION  select c.concept_id\r\n  from @vocabulary_database_schema.CONCEPT c\r\n  join @vocabulary_database_schema.CONCEPT_ANCESTOR ca on c.concept_id = ca.descendant_concept_id\r\n  WHERE c.invalid_reason is null\r\n  and (ca.ancestor_concept_id in (1112807))\r\n\r\n) I\r\n) C;\r\n\r\nUPDATE STATISTICS #Codesets;\r\n\r\n\r\nSELECT event_id, person_id, start_date, end_date, op_start_date, op_end_date, visit_occurrence_id\r\nINTO #qualified_events\r\nFROM \r\n(\r\n  select pe.event_id, pe.person_id, pe.start_date, pe.end_date, pe.op_start_date, pe.op_end_date, row_number() over (partition by pe.person_id order by pe.start_date ASC) as ordinal, cast(pe.visit_occurrence_id as bigint) as visit_occurrence_id\r\n  FROM (-- Begin Primary Events\r\nselect P.ordinal as event_id, P.person_id, P.start_date, P.end_date, op_start_date, op_end_date, cast(P.visit_occurrence_id as bigint) as visit_occurrence_id\r\nFROM\r\n(\r\n  select E.person_id, E.start_date, E.end_date,\r\n         row_number() OVER (PARTITION BY E.person_id ORDER BY E.sort_date ASC, E.event_id) ordinal,\r\n         OP.observation_period_start_date as op_start_date, OP.observation_period_end_date as op_end_date, cast(E.visit_occurrence_id as bigint) as visit_occurrence_id\r\n  FROM \r\n  (\r\n  -- Begin Drug Exposure Criteria\r\nselect C.person_id, C.drug_exposure_id as event_id, C.start_date, C.end_date,\r\n  C.visit_occurrence_id,C.start_date as sort_date\r\nfrom \r\n(\r\n  select de.person_id,de.drug_exposure_id,de.drug_concept_id,de.visit_occurrence_id,days_supply,quantity,refills,de.drug_exposure_start_date as start_date, COALESCE(de.drug_exposure_end_date, DATEADD(day,de.days_supply,de.drug_exposure_start_date), DATEADD(day,1,de.drug_exposure_start_date)) as end_date \r\n  FROM @cdm_database_schema.DRUG_EXPOSURE de\r\nJOIN #Codesets cs on (de.drug_concept_id = cs.concept_id and cs.codeset_id = 0)\r\n) C\r\n\r\n\r\n-- End Drug Exposure Criteria\r\n\r\n  ) E\r\n\tJOIN @cdm_database_schema.observation_period OP on E.person_id = OP.person_id and E.start_date >=  OP.observation_period_start_date and E.start_date <= op.observation_period_end_date\r\n  WHERE DATEADD(day,0,OP.OBSERVATION_PERIOD_START_DATE) <= E.START_DATE AND DATEADD(day,0,E.START_DATE) <= OP.OBSERVATION_PERIOD_END_DATE\r\n) P\r\nWHERE P.ordinal = 1\r\n-- End Primary Events\r\n) pe\r\n  \r\n) QE\r\n\r\n;\r\n\r\n--- Inclusion Rule Inserts\r\n\r\ncreate table #inclusion_events (inclusion_rule_id bigint,\n\tperson_id bigint,\n\tevent_id bigint\n);\r\n\r\nselect event_id, person_id, start_date, end_date, op_start_date, op_end_date\r\ninto #included_events\r\nFROM (\r\n  SELECT event_id, person_id, start_date, end_date, op_start_date, op_end_date, row_number() over (partition by person_id order by start_date ASC) as ordinal\r\n  from\r\n  (\r\n    select Q.event_id, Q.person_id, Q.start_date, Q.end_date, Q.op_start_date, Q.op_end_date, SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) as inclusion_rule_mask\r\n    from #qualified_events Q\r\n    LEFT JOIN #inclusion_events I on I.person_id = Q.person_id and I.event_id = Q.event_id\r\n    GROUP BY Q.event_id, Q.person_id, Q.start_date, Q.end_date, Q.op_start_date, Q.op_end_date\r\n  ) MG -- matching groups\r\n{0 != 0}?{\r\n  -- the matching group with all bits set ( POWER(2,# of inclusion rules) - 1 = inclusion_rule_mask\r\n  WHERE (MG.inclusion_rule_mask = POWER(cast(2 as bigint),0)-1)\r\n}\r\n) Results\r\nWHERE Results.ordinal = 1\r\n;\r\n\r\n-- custom era strategy\r\n\r\nwith ctePersons(person_id) as (\r\n\tselect distinct person_id from #included_events\r\n)\r\n\r\nselect person_id, drug_exposure_start_date, drug_exposure_end_date\r\nINTO #drugTarget\r\nFROM (\r\n\tselect de.PERSON_ID, DRUG_EXPOSURE_START_DATE, COALESCE(DRUG_EXPOSURE_END_DATE, DATEADD(day,DAYS_SUPPLY,DRUG_EXPOSURE_START_DATE), DATEADD(day,1,DRUG_EXPOSURE_START_DATE)) as DRUG_EXPOSURE_END_DATE \r\n\tFROM @cdm_database_schema.DRUG_EXPOSURE de\r\n\tJOIN ctePersons p on de.person_id = p.person_id\r\n\tJOIN #Codesets cs on cs.codeset_id = 0 AND de.drug_concept_id = cs.concept_id\r\n\r\n\tUNION ALL\r\n\r\n\tselect de.PERSON_ID, DRUG_EXPOSURE_START_DATE, COALESCE(DRUG_EXPOSURE_END_DATE, DATEADD(day,DAYS_SUPPLY,DRUG_EXPOSURE_START_DATE), DATEADD(day,1,DRUG_EXPOSURE_START_DATE)) as DRUG_EXPOSURE_END_DATE \r\n\tFROM @cdm_database_schema.DRUG_EXPOSURE de\r\n\tJOIN ctePersons p on de.person_id = p.person_id\r\n\tJOIN #Codesets cs on cs.codeset_id = 0 AND de.drug_source_concept_id = cs.concept_id\r\n) E\r\n;\r\n\r\nselect et.event_id, et.person_id, ERAS.era_end_date as end_date\r\nINTO #strategy_ends\r\nfrom #included_events et\r\nJOIN \r\n(\r\n\r\n  select person_id, min(start_date) as era_start_date, DATEADD(day,-1 * 0, max(end_date)) as era_end_date\r\n  from (\r\n    select person_id, start_date, end_date, sum(is_start) over (partition by person_id order by start_date, is_start desc rows unbounded preceding) group_idx\r\n    from (\r\n      select person_id, start_date, end_date, \r\n        case when max(end_date) over (partition by person_id order by start_date rows between unbounded preceding and 1 preceding) >= start_date then 0 else 1 end is_start\r\n      from (\r\n        select person_id, drug_exposure_start_date as start_date, DATEADD(day,(0 + 0),DRUG_EXPOSURE_END_DATE) as end_date\r\n        FROM #drugTarget\r\n      ) DT\r\n    ) ST\r\n  ) GR\r\n  group by person_id, group_idx\r\n) ERAS on ERAS.person_id = et.person_id \r\nWHERE et.start_date between ERAS.era_start_date and ERAS.era_end_date;\r\n\r\nTRUNCATE TABLE #drugTarget;\r\nDROP TABLE #drugTarget;\r\n\r\n\r\n-- generate cohort periods into #final_cohort\r\nselect person_id, start_date, end_date\r\nINTO #cohort_rows\r\nfrom ( -- first_ends\r\n\tselect F.person_id, F.start_date, F.end_date\r\n\tFROM (\r\n\t  select I.event_id, I.person_id, I.start_date, CE.end_date, row_number() over (partition by I.person_id, I.event_id order by CE.end_date) as ordinal\r\n\t  from #included_events I\r\n\t  join ( -- cohort_ends\r\n-- cohort exit dates\r\n-- By default, cohort exit at the event's op end date\nselect event_id, person_id, op_end_date as end_date from #included_events\nUNION ALL\n-- End Date Strategy\nSELECT event_id, person_id, end_date from #strategy_ends\n\r\n    ) CE on I.event_id = CE.event_id and I.person_id = CE.person_id and CE.end_date >= I.start_date\r\n\t) F\r\n\tWHERE F.ordinal = 1\r\n) FE;\r\n\r\n\r\nselect person_id, min(start_date) as start_date, DATEADD(day,-1 * 30, max(end_date)) as end_date\r\ninto #final_cohort\r\nfrom (\r\n  select person_id, start_date, end_date, sum(is_start) over (partition by person_id order by start_date, is_start desc rows unbounded preceding) group_idx\r\n  from (\r\n    select person_id, start_date, end_date, \r\n      case when max(end_date) over (partition by person_id order by start_date rows between unbounded preceding and 1 preceding) >= start_date then 0 else 1 end is_start\r\n    from (\r\n      select person_id, start_date, DATEADD(day,30,end_date) as end_date\r\n      from #cohort_rows\r\n    ) CR\r\n  ) ST\r\n) GR\r\ngroup by person_id, group_idx;\r\n\r\nDELETE FROM @target_database_schema.@target_cohort_table where cohort_definition_id = @target_cohort_id;\r\nINSERT INTO @target_database_schema.@target_cohort_table (cohort_definition_id, subject_id, cohort_start_date, cohort_end_date)\r\nselect @target_cohort_id as cohort_definition_id, person_id, start_date, end_date \nFROM #final_cohort CO\r\n;\r\n\r\n{0 != 0}?{\r\n-- BEGIN: Censored Stats\r\n\r\ndelete from @results_database_schema.cohort_censor_stats where cohort_definition_id = @target_cohort_id;\r\n\r\n-- END: Censored Stats\r\n}\r\n{0 != 0 & 0 != 0}?{\r\n\r\nCREATE TABLE #inclusion_rules (rule_sequence int);\r\n\r\n-- Find the event that is the 'best match' per person.  \r\n-- the 'best match' is defined as the event that satisfies the most inclusion rules.\r\n-- ties are solved by choosing the event that matches the earliest inclusion rule, and then earliest.\r\n\r\nselect q.person_id, q.event_id\r\ninto #best_events\r\nfrom #qualified_events Q\r\njoin (\r\n\tSELECT R.person_id, R.event_id, ROW_NUMBER() OVER (PARTITION BY R.person_id ORDER BY R.rule_count DESC,R.min_rule_id ASC, R.start_date ASC) AS rank_value\r\n\tFROM (\r\n\t\tSELECT Q.person_id, Q.event_id, COALESCE(COUNT(DISTINCT I.inclusion_rule_id), 0) AS rule_count, COALESCE(MIN(I.inclusion_rule_id), 0) AS min_rule_id, Q.start_date\r\n\t\tFROM #qualified_events Q\r\n\t\tLEFT JOIN #inclusion_events I ON q.person_id = i.person_id AND q.event_id = i.event_id\r\n\t\tGROUP BY Q.person_id, Q.event_id, Q.start_date\r\n\t) R\r\n) ranked on Q.person_id = ranked.person_id and Q.event_id = ranked.event_id\r\nWHERE ranked.rank_value = 1\r\n;\r\n\r\n-- modes of generation: (the same tables store the results for the different modes, identified by the mode_id column)\r\n-- 0: all events\r\n-- 1: best event\r\n\r\n\r\n-- BEGIN: Inclusion Impact Analysis - event\r\n-- calculte matching group counts\r\ndelete from @results_database_schema.cohort_inclusion_result where cohort_definition_id = @target_cohort_id and mode_id = 0;\r\ninsert into @results_database_schema.cohort_inclusion_result (cohort_definition_id, inclusion_rule_mask, person_count, mode_id)\r\nselect @target_cohort_id as cohort_definition_id, inclusion_rule_mask, count_big(*) as person_count, 0 as mode_id\r\nfrom\r\n(\r\n  select Q.person_id, Q.event_id, CAST(SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) AS bigint) as inclusion_rule_mask\r\n  from #qualified_events Q\r\n  LEFT JOIN #inclusion_events I on q.person_id = i.person_id and q.event_id = i.event_id\r\n  GROUP BY Q.person_id, Q.event_id\r\n) MG -- matching groups\r\ngroup by inclusion_rule_mask\r\n;\r\n\r\n-- calculate gain counts \r\ndelete from @results_database_schema.cohort_inclusion_stats where cohort_definition_id = @target_cohort_id and mode_id = 0;\r\ninsert into @results_database_schema.cohort_inclusion_stats (cohort_definition_id, rule_sequence, person_count, gain_count, person_total, mode_id)\r\nselect @target_cohort_id as cohort_definition_id, ir.rule_sequence, coalesce(T.person_count, 0) as person_count, coalesce(SR.person_count, 0) gain_count, EventTotal.total, 0 as mode_id\r\nfrom #inclusion_rules ir\r\nleft join\r\n(\r\n  select i.inclusion_rule_id, count_big(i.event_id) as person_count\r\n  from #qualified_events Q\r\n  JOIN #inclusion_events i on Q.person_id = I.person_id and Q.event_id = i.event_id\r\n  group by i.inclusion_rule_id\r\n) T on ir.rule_sequence = T.inclusion_rule_id\r\nCROSS JOIN (select count(*) as total_rules from #inclusion_rules) RuleTotal\r\nCROSS JOIN (select count_big(event_id) as total from #qualified_events) EventTotal\r\nLEFT JOIN @results_database_schema.cohort_inclusion_result SR on SR.mode_id = 0 AND SR.cohort_definition_id = @target_cohort_id AND (POWER(cast(2 as bigint),RuleTotal.total_rules) - POWER(cast(2 as bigint),ir.rule_sequence) - 1) = SR.inclusion_rule_mask -- POWER(2,rule count) - POWER(2,rule sequence) - 1 is the mask for 'all except this rule'\r\n;\r\n\r\n-- calculate totals\r\ndelete from @results_database_schema.cohort_summary_stats where cohort_definition_id = @target_cohort_id and mode_id = 0;\r\ninsert into @results_database_schema.cohort_summary_stats (cohort_definition_id, base_count, final_count, mode_id)\r\nselect @target_cohort_id as cohort_definition_id, PC.total as person_count, coalesce(FC.total, 0) as final_count, 0 as mode_id\r\nFROM\r\n(select count_big(event_id) as total from #qualified_events) PC,\r\n(select sum(sr.person_count) as total\r\n  from @results_database_schema.cohort_inclusion_result sr\r\n  CROSS JOIN (select count(*) as total_rules from #inclusion_rules) RuleTotal\r\n  where sr.mode_id = 0 and sr.cohort_definition_id = @target_cohort_id and sr.inclusion_rule_mask = POWER(cast(2 as bigint),RuleTotal.total_rules)-1\r\n) FC\r\n;\r\n\r\n-- END: Inclusion Impact Analysis - event\r\n\r\n-- BEGIN: Inclusion Impact Analysis - person\r\n-- calculte matching group counts\r\ndelete from @results_database_schema.cohort_inclusion_result where cohort_definition_id = @target_cohort_id and mode_id = 1;\r\ninsert into @results_database_schema.cohort_inclusion_result (cohort_definition_id, inclusion_rule_mask, person_count, mode_id)\r\nselect @target_cohort_id as cohort_definition_id, inclusion_rule_mask, count_big(*) as person_count, 1 as mode_id\r\nfrom\r\n(\r\n  select Q.person_id, Q.event_id, CAST(SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) AS bigint) as inclusion_rule_mask\r\n  from #best_events Q\r\n  LEFT JOIN #inclusion_events I on q.person_id = i.person_id and q.event_id = i.event_id\r\n  GROUP BY Q.person_id, Q.event_id\r\n) MG -- matching groups\r\ngroup by inclusion_rule_mask\r\n;\r\n\r\n-- calculate gain counts \r\ndelete from @results_database_schema.cohort_inclusion_stats where cohort_definition_id = @target_cohort_id and mode_id = 1;\r\ninsert into @results_database_schema.cohort_inclusion_stats (cohort_definition_id, rule_sequence, person_count, gain_count, person_total, mode_id)\r\nselect @target_cohort_id as cohort_definition_id, ir.rule_sequence, coalesce(T.person_count, 0) as person_count, coalesce(SR.person_count, 0) gain_count, EventTotal.total, 1 as mode_id\r\nfrom #inclusion_rules ir\r\nleft join\r\n(\r\n  select i.inclusion_rule_id, count_big(i.event_id) as person_count\r\n  from #best_events Q\r\n  JOIN #inclusion_events i on Q.person_id = I.person_id and Q.event_id = i.event_id\r\n  group by i.inclusion_rule_id\r\n) T on ir.rule_sequence = T.inclusion_rule_id\r\nCROSS JOIN (select count(*) as total_rules from #inclusion_rules) RuleTotal\r\nCROSS JOIN (select count_big(event_id) as total from #best_events) EventTotal\r\nLEFT JOIN @results_database_schema.cohort_inclusion_result SR on SR.mode_id = 1 AND SR.cohort_definition_id = @target_cohort_id AND (POWER(cast(2 as bigint),RuleTotal.total_rules) - POWER(cast(2 as bigint),ir.rule_sequence) - 1) = SR.inclusion_rule_mask -- POWER(2,rule count) - POWER(2,rule sequence) - 1 is the mask for 'all except this rule'\r\n;\r\n\r\n-- calculate totals\r\ndelete from @results_database_schema.cohort_summary_stats where cohort_definition_id = @target_cohort_id and mode_id = 1;\r\ninsert into @results_database_schema.cohort_summary_stats (cohort_definition_id, base_count, final_count, mode_id)\r\nselect @target_cohort_id as cohort_definition_id, PC.total as person_count, coalesce(FC.total, 0) as final_count, 1 as mode_id\r\nFROM\r\n(select count_big(event_id) as total from #best_events) PC,\r\n(select sum(sr.person_count) as total\r\n  from @results_database_schema.cohort_inclusion_result sr\r\n  CROSS JOIN (select count(*) as total_rules from #inclusion_rules) RuleTotal\r\n  where sr.mode_id = 1 and sr.cohort_definition_id = @target_cohort_id and sr.inclusion_rule_mask = POWER(cast(2 as bigint),RuleTotal.total_rules)-1\r\n) FC\r\n;\r\n\r\n-- END: Inclusion Impact Analysis - person\r\n\r\nTRUNCATE TABLE #best_events;\r\nDROP TABLE #best_events;\r\n\r\nTRUNCATE TABLE #inclusion_rules;\r\nDROP TABLE #inclusion_rules;\r\n}\r\n\r\nTRUNCATE TABLE #strategy_ends;\nDROP TABLE #strategy_ends;\n\r\n\r\nTRUNCATE TABLE #cohort_rows;\r\nDROP TABLE #cohort_rows;\r\n\r\nTRUNCATE TABLE #final_cohort;\r\nDROP TABLE #final_cohort;\r\n\r\nTRUNCATE TABLE #inclusion_events;\r\nDROP TABLE #inclusion_events;\r\n\r\nTRUNCATE TABLE #qualified_events;\r\nDROP TABLE #qualified_events;\r\n\r\nTRUNCATE TABLE #included_events;\r\nDROP TABLE #included_events;\r\n\r\nTRUNCATE TABLE #Codesets;\r\nDROP TABLE #Codesets;\r\n",
          "json": "{\r\n  \"ConceptSets\": [\r\n    {\r\n      \"id\": 0,\r\n      \"name\": \"[MVK] Aspirin\",\r\n      \"expression\": {\r\n        \"items\": [\r\n          {\r\n            \"concept\": {\r\n              \"CONCEPT_CLASS_ID\": \"Ingredient\",\r\n              \"CONCEPT_CODE\": \"1191\",\r\n              \"CONCEPT_ID\": 1112807,\r\n              \"CONCEPT_NAME\": \"aspirin\",\r\n              \"DOMAIN_ID\": \"Drug\",\r\n              \"INVALID_REASON\": \"V\",\r\n              \"INVALID_REASON_CAPTION\": \"Valid\",\r\n              \"STANDARD_CONCEPT\": \"S\",\r\n              \"STANDARD_CONCEPT_CAPTION\": \"Standard\",\r\n              \"VOCABULARY_ID\": \"RxNorm\"\r\n            },\r\n            \"includeDescendants\": true\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  ],\r\n  \"PrimaryCriteria\": {\r\n    \"CriteriaList\": [\r\n      {\r\n        \"DrugExposure\": {\r\n          \"CodesetId\": 0\r\n        }\r\n      }\r\n    ],\r\n    \"ObservationWindow\": {\r\n      \"PriorDays\": 0,\r\n      \"PostDays\": 0\r\n    },\r\n    \"PrimaryCriteriaLimit\": {\r\n      \"Type\": \"First\"\r\n    }\r\n  },\r\n  \"QualifiedLimit\": {\r\n    \"Type\": \"First\"\r\n  },\r\n  \"ExpressionLimit\": {\r\n    \"Type\": \"First\"\r\n  },\r\n  \"InclusionRules\": [],\r\n  \"EndStrategy\": {\r\n    \"CustomEra\": {\r\n      \"DrugCodesetId\": 0,\r\n      \"GapDays\": 0,\r\n      \"Offset\": 0\r\n    }\r\n  },\r\n  \"CensoringCriteria\": [],\r\n  \"CollapseSettings\": {\r\n    \"CollapseType\": \"ERA\",\r\n    \"EraPad\": 30\r\n  },\r\n  \"CensorWindow\": {},\r\n  \"cdmVersionRange\": \">=5.0.0\"\r\n}",
          "subsetParent": 6,
          "isSubset": false,
          "subsetDefinitionId": "NA"
        },
        {
          "cohortId": 7,
          "cohortName": "Clavulanate",
          "sql": "CREATE TABLE #Codesets (\r\n  codeset_id int NOT NULL,\r\n  concept_id bigint NOT NULL\r\n)\r\n;\r\n\r\nINSERT INTO #Codesets (codeset_id, concept_id)\nSELECT 0 as codeset_id, c.concept_id FROM (select distinct I.concept_id FROM\r\n( \r\n  select concept_id from @vocabulary_database_schema.CONCEPT where (concept_id in (1759842))\r\nUNION  select c.concept_id\r\n  from @vocabulary_database_schema.CONCEPT c\r\n  join @vocabulary_database_schema.CONCEPT_ANCESTOR ca on c.concept_id = ca.descendant_concept_id\r\n  WHERE c.invalid_reason is null\r\n  and (ca.ancestor_concept_id in (1759842))\r\n\r\n) I\r\n) C;\r\n\r\nUPDATE STATISTICS #Codesets;\r\n\r\n\r\nSELECT event_id, person_id, start_date, end_date, op_start_date, op_end_date, visit_occurrence_id\r\nINTO #qualified_events\r\nFROM \r\n(\r\n  select pe.event_id, pe.person_id, pe.start_date, pe.end_date, pe.op_start_date, pe.op_end_date, row_number() over (partition by pe.person_id order by pe.start_date ASC) as ordinal, cast(pe.visit_occurrence_id as bigint) as visit_occurrence_id\r\n  FROM (-- Begin Primary Events\r\nselect P.ordinal as event_id, P.person_id, P.start_date, P.end_date, op_start_date, op_end_date, cast(P.visit_occurrence_id as bigint) as visit_occurrence_id\r\nFROM\r\n(\r\n  select E.person_id, E.start_date, E.end_date,\r\n         row_number() OVER (PARTITION BY E.person_id ORDER BY E.sort_date ASC, E.event_id) ordinal,\r\n         OP.observation_period_start_date as op_start_date, OP.observation_period_end_date as op_end_date, cast(E.visit_occurrence_id as bigint) as visit_occurrence_id\r\n  FROM \r\n  (\r\n  -- Begin Drug Exposure Criteria\r\nselect C.person_id, C.drug_exposure_id as event_id, C.start_date, C.end_date,\r\n  C.visit_occurrence_id,C.start_date as sort_date\r\nfrom \r\n(\r\n  select de.person_id,de.drug_exposure_id,de.drug_concept_id,de.visit_occurrence_id,days_supply,quantity,refills,de.drug_exposure_start_date as start_date, COALESCE(de.drug_exposure_end_date, DATEADD(day,de.days_supply,de.drug_exposure_start_date), DATEADD(day,1,de.drug_exposure_start_date)) as end_date \r\n  FROM @cdm_database_schema.DRUG_EXPOSURE de\r\nJOIN #Codesets cs on (de.drug_concept_id = cs.concept_id and cs.codeset_id = 0)\r\n) C\r\n\r\n\r\n-- End Drug Exposure Criteria\r\n\r\n  ) E\r\n\tJOIN @cdm_database_schema.observation_period OP on E.person_id = OP.person_id and E.start_date >=  OP.observation_period_start_date and E.start_date <= op.observation_period_end_date\r\n  WHERE DATEADD(day,0,OP.OBSERVATION_PERIOD_START_DATE) <= E.START_DATE AND DATEADD(day,0,E.START_DATE) <= OP.OBSERVATION_PERIOD_END_DATE\r\n) P\r\nWHERE P.ordinal = 1\r\n-- End Primary Events\r\n) pe\r\n  \r\n) QE\r\n\r\n;\r\n\r\n--- Inclusion Rule Inserts\r\n\r\ncreate table #inclusion_events (inclusion_rule_id bigint,\n\tperson_id bigint,\n\tevent_id bigint\n);\r\n\r\nselect event_id, person_id, start_date, end_date, op_start_date, op_end_date\r\ninto #included_events\r\nFROM (\r\n  SELECT event_id, person_id, start_date, end_date, op_start_date, op_end_date, row_number() over (partition by person_id order by start_date ASC) as ordinal\r\n  from\r\n  (\r\n    select Q.event_id, Q.person_id, Q.start_date, Q.end_date, Q.op_start_date, Q.op_end_date, SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) as inclusion_rule_mask\r\n    from #qualified_events Q\r\n    LEFT JOIN #inclusion_events I on I.person_id = Q.person_id and I.event_id = Q.event_id\r\n    GROUP BY Q.event_id, Q.person_id, Q.start_date, Q.end_date, Q.op_start_date, Q.op_end_date\r\n  ) MG -- matching groups\r\n{0 != 0}?{\r\n  -- the matching group with all bits set ( POWER(2,# of inclusion rules) - 1 = inclusion_rule_mask\r\n  WHERE (MG.inclusion_rule_mask = POWER(cast(2 as bigint),0)-1)\r\n}\r\n) Results\r\nWHERE Results.ordinal = 1\r\n;\r\n\r\n-- custom era strategy\r\n\r\nwith ctePersons(person_id) as (\r\n\tselect distinct person_id from #included_events\r\n)\r\n\r\nselect person_id, drug_exposure_start_date, drug_exposure_end_date\r\nINTO #drugTarget\r\nFROM (\r\n\tselect de.PERSON_ID, DRUG_EXPOSURE_START_DATE, COALESCE(DRUG_EXPOSURE_END_DATE, DATEADD(day,DAYS_SUPPLY,DRUG_EXPOSURE_START_DATE), DATEADD(day,1,DRUG_EXPOSURE_START_DATE)) as DRUG_EXPOSURE_END_DATE \r\n\tFROM @cdm_database_schema.DRUG_EXPOSURE de\r\n\tJOIN ctePersons p on de.person_id = p.person_id\r\n\tJOIN #Codesets cs on cs.codeset_id = 0 AND de.drug_concept_id = cs.concept_id\r\n\r\n\tUNION ALL\r\n\r\n\tselect de.PERSON_ID, DRUG_EXPOSURE_START_DATE, COALESCE(DRUG_EXPOSURE_END_DATE, DATEADD(day,DAYS_SUPPLY,DRUG_EXPOSURE_START_DATE), DATEADD(day,1,DRUG_EXPOSURE_START_DATE)) as DRUG_EXPOSURE_END_DATE \r\n\tFROM @cdm_database_schema.DRUG_EXPOSURE de\r\n\tJOIN ctePersons p on de.person_id = p.person_id\r\n\tJOIN #Codesets cs on cs.codeset_id = 0 AND de.drug_source_concept_id = cs.concept_id\r\n) E\r\n;\r\n\r\nselect et.event_id, et.person_id, ERAS.era_end_date as end_date\r\nINTO #strategy_ends\r\nfrom #included_events et\r\nJOIN \r\n(\r\n\r\n  select person_id, min(start_date) as era_start_date, DATEADD(day,-1 * 0, max(end_date)) as era_end_date\r\n  from (\r\n    select person_id, start_date, end_date, sum(is_start) over (partition by person_id order by start_date, is_start desc rows unbounded preceding) group_idx\r\n    from (\r\n      select person_id, start_date, end_date, \r\n        case when max(end_date) over (partition by person_id order by start_date rows between unbounded preceding and 1 preceding) >= start_date then 0 else 1 end is_start\r\n      from (\r\n        select person_id, drug_exposure_start_date as start_date, DATEADD(day,(0 + 0),DRUG_EXPOSURE_END_DATE) as end_date\r\n        FROM #drugTarget\r\n      ) DT\r\n    ) ST\r\n  ) GR\r\n  group by person_id, group_idx\r\n) ERAS on ERAS.person_id = et.person_id \r\nWHERE et.start_date between ERAS.era_start_date and ERAS.era_end_date;\r\n\r\nTRUNCATE TABLE #drugTarget;\r\nDROP TABLE #drugTarget;\r\n\r\n\r\n-- generate cohort periods into #final_cohort\r\nselect person_id, start_date, end_date\r\nINTO #cohort_rows\r\nfrom ( -- first_ends\r\n\tselect F.person_id, F.start_date, F.end_date\r\n\tFROM (\r\n\t  select I.event_id, I.person_id, I.start_date, CE.end_date, row_number() over (partition by I.person_id, I.event_id order by CE.end_date) as ordinal\r\n\t  from #included_events I\r\n\t  join ( -- cohort_ends\r\n-- cohort exit dates\r\n-- By default, cohort exit at the event's op end date\nselect event_id, person_id, op_end_date as end_date from #included_events\nUNION ALL\n-- End Date Strategy\nSELECT event_id, person_id, end_date from #strategy_ends\n\r\n    ) CE on I.event_id = CE.event_id and I.person_id = CE.person_id and CE.end_date >= I.start_date\r\n\t) F\r\n\tWHERE F.ordinal = 1\r\n) FE;\r\n\r\n\r\nselect person_id, min(start_date) as start_date, DATEADD(day,-1 * 30, max(end_date)) as end_date\r\ninto #final_cohort\r\nfrom (\r\n  select person_id, start_date, end_date, sum(is_start) over (partition by person_id order by start_date, is_start desc rows unbounded preceding) group_idx\r\n  from (\r\n    select person_id, start_date, end_date, \r\n      case when max(end_date) over (partition by person_id order by start_date rows between unbounded preceding and 1 preceding) >= start_date then 0 else 1 end is_start\r\n    from (\r\n      select person_id, start_date, DATEADD(day,30,end_date) as end_date\r\n      from #cohort_rows\r\n    ) CR\r\n  ) ST\r\n) GR\r\ngroup by person_id, group_idx;\r\n\r\nDELETE FROM @target_database_schema.@target_cohort_table where cohort_definition_id = @target_cohort_id;\r\nINSERT INTO @target_database_schema.@target_cohort_table (cohort_definition_id, subject_id, cohort_start_date, cohort_end_date)\r\nselect @target_cohort_id as cohort_definition_id, person_id, start_date, end_date \nFROM #final_cohort CO\r\n;\r\n\r\n{0 != 0}?{\r\n-- BEGIN: Censored Stats\r\n\r\ndelete from @results_database_schema.cohort_censor_stats where cohort_definition_id = @target_cohort_id;\r\n\r\n-- END: Censored Stats\r\n}\r\n{0 != 0 & 0 != 0}?{\r\n\r\nCREATE TABLE #inclusion_rules (rule_sequence int);\r\n\r\n-- Find the event that is the 'best match' per person.  \r\n-- the 'best match' is defined as the event that satisfies the most inclusion rules.\r\n-- ties are solved by choosing the event that matches the earliest inclusion rule, and then earliest.\r\n\r\nselect q.person_id, q.event_id\r\ninto #best_events\r\nfrom #qualified_events Q\r\njoin (\r\n\tSELECT R.person_id, R.event_id, ROW_NUMBER() OVER (PARTITION BY R.person_id ORDER BY R.rule_count DESC,R.min_rule_id ASC, R.start_date ASC) AS rank_value\r\n\tFROM (\r\n\t\tSELECT Q.person_id, Q.event_id, COALESCE(COUNT(DISTINCT I.inclusion_rule_id), 0) AS rule_count, COALESCE(MIN(I.inclusion_rule_id), 0) AS min_rule_id, Q.start_date\r\n\t\tFROM #qualified_events Q\r\n\t\tLEFT JOIN #inclusion_events I ON q.person_id = i.person_id AND q.event_id = i.event_id\r\n\t\tGROUP BY Q.person_id, Q.event_id, Q.start_date\r\n\t) R\r\n) ranked on Q.person_id = ranked.person_id and Q.event_id = ranked.event_id\r\nWHERE ranked.rank_value = 1\r\n;\r\n\r\n-- modes of generation: (the same tables store the results for the different modes, identified by the mode_id column)\r\n-- 0: all events\r\n-- 1: best event\r\n\r\n\r\n-- BEGIN: Inclusion Impact Analysis - event\r\n-- calculte matching group counts\r\ndelete from @results_database_schema.cohort_inclusion_result where cohort_definition_id = @target_cohort_id and mode_id = 0;\r\ninsert into @results_database_schema.cohort_inclusion_result (cohort_definition_id, inclusion_rule_mask, person_count, mode_id)\r\nselect @target_cohort_id as cohort_definition_id, inclusion_rule_mask, count_big(*) as person_count, 0 as mode_id\r\nfrom\r\n(\r\n  select Q.person_id, Q.event_id, CAST(SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) AS bigint) as inclusion_rule_mask\r\n  from #qualified_events Q\r\n  LEFT JOIN #inclusion_events I on q.person_id = i.person_id and q.event_id = i.event_id\r\n  GROUP BY Q.person_id, Q.event_id\r\n) MG -- matching groups\r\ngroup by inclusion_rule_mask\r\n;\r\n\r\n-- calculate gain counts \r\ndelete from @results_database_schema.cohort_inclusion_stats where cohort_definition_id = @target_cohort_id and mode_id = 0;\r\ninsert into @results_database_schema.cohort_inclusion_stats (cohort_definition_id, rule_sequence, person_count, gain_count, person_total, mode_id)\r\nselect @target_cohort_id as cohort_definition_id, ir.rule_sequence, coalesce(T.person_count, 0) as person_count, coalesce(SR.person_count, 0) gain_count, EventTotal.total, 0 as mode_id\r\nfrom #inclusion_rules ir\r\nleft join\r\n(\r\n  select i.inclusion_rule_id, count_big(i.event_id) as person_count\r\n  from #qualified_events Q\r\n  JOIN #inclusion_events i on Q.person_id = I.person_id and Q.event_id = i.event_id\r\n  group by i.inclusion_rule_id\r\n) T on ir.rule_sequence = T.inclusion_rule_id\r\nCROSS JOIN (select count(*) as total_rules from #inclusion_rules) RuleTotal\r\nCROSS JOIN (select count_big(event_id) as total from #qualified_events) EventTotal\r\nLEFT JOIN @results_database_schema.cohort_inclusion_result SR on SR.mode_id = 0 AND SR.cohort_definition_id = @target_cohort_id AND (POWER(cast(2 as bigint),RuleTotal.total_rules) - POWER(cast(2 as bigint),ir.rule_sequence) - 1) = SR.inclusion_rule_mask -- POWER(2,rule count) - POWER(2,rule sequence) - 1 is the mask for 'all except this rule'\r\n;\r\n\r\n-- calculate totals\r\ndelete from @results_database_schema.cohort_summary_stats where cohort_definition_id = @target_cohort_id and mode_id = 0;\r\ninsert into @results_database_schema.cohort_summary_stats (cohort_definition_id, base_count, final_count, mode_id)\r\nselect @target_cohort_id as cohort_definition_id, PC.total as person_count, coalesce(FC.total, 0) as final_count, 0 as mode_id\r\nFROM\r\n(select count_big(event_id) as total from #qualified_events) PC,\r\n(select sum(sr.person_count) as total\r\n  from @results_database_schema.cohort_inclusion_result sr\r\n  CROSS JOIN (select count(*) as total_rules from #inclusion_rules) RuleTotal\r\n  where sr.mode_id = 0 and sr.cohort_definition_id = @target_cohort_id and sr.inclusion_rule_mask = POWER(cast(2 as bigint),RuleTotal.total_rules)-1\r\n) FC\r\n;\r\n\r\n-- END: Inclusion Impact Analysis - event\r\n\r\n-- BEGIN: Inclusion Impact Analysis - person\r\n-- calculte matching group counts\r\ndelete from @results_database_schema.cohort_inclusion_result where cohort_definition_id = @target_cohort_id and mode_id = 1;\r\ninsert into @results_database_schema.cohort_inclusion_result (cohort_definition_id, inclusion_rule_mask, person_count, mode_id)\r\nselect @target_cohort_id as cohort_definition_id, inclusion_rule_mask, count_big(*) as person_count, 1 as mode_id\r\nfrom\r\n(\r\n  select Q.person_id, Q.event_id, CAST(SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) AS bigint) as inclusion_rule_mask\r\n  from #best_events Q\r\n  LEFT JOIN #inclusion_events I on q.person_id = i.person_id and q.event_id = i.event_id\r\n  GROUP BY Q.person_id, Q.event_id\r\n) MG -- matching groups\r\ngroup by inclusion_rule_mask\r\n;\r\n\r\n-- calculate gain counts \r\ndelete from @results_database_schema.cohort_inclusion_stats where cohort_definition_id = @target_cohort_id and mode_id = 1;\r\ninsert into @results_database_schema.cohort_inclusion_stats (cohort_definition_id, rule_sequence, person_count, gain_count, person_total, mode_id)\r\nselect @target_cohort_id as cohort_definition_id, ir.rule_sequence, coalesce(T.person_count, 0) as person_count, coalesce(SR.person_count, 0) gain_count, EventTotal.total, 1 as mode_id\r\nfrom #inclusion_rules ir\r\nleft join\r\n(\r\n  select i.inclusion_rule_id, count_big(i.event_id) as person_count\r\n  from #best_events Q\r\n  JOIN #inclusion_events i on Q.person_id = I.person_id and Q.event_id = i.event_id\r\n  group by i.inclusion_rule_id\r\n) T on ir.rule_sequence = T.inclusion_rule_id\r\nCROSS JOIN (select count(*) as total_rules from #inclusion_rules) RuleTotal\r\nCROSS JOIN (select count_big(event_id) as total from #best_events) EventTotal\r\nLEFT JOIN @results_database_schema.cohort_inclusion_result SR on SR.mode_id = 1 AND SR.cohort_definition_id = @target_cohort_id AND (POWER(cast(2 as bigint),RuleTotal.total_rules) - POWER(cast(2 as bigint),ir.rule_sequence) - 1) = SR.inclusion_rule_mask -- POWER(2,rule count) - POWER(2,rule sequence) - 1 is the mask for 'all except this rule'\r\n;\r\n\r\n-- calculate totals\r\ndelete from @results_database_schema.cohort_summary_stats where cohort_definition_id = @target_cohort_id and mode_id = 1;\r\ninsert into @results_database_schema.cohort_summary_stats (cohort_definition_id, base_count, final_count, mode_id)\r\nselect @target_cohort_id as cohort_definition_id, PC.total as person_count, coalesce(FC.total, 0) as final_count, 1 as mode_id\r\nFROM\r\n(select count_big(event_id) as total from #best_events) PC,\r\n(select sum(sr.person_count) as total\r\n  from @results_database_schema.cohort_inclusion_result sr\r\n  CROSS JOIN (select count(*) as total_rules from #inclusion_rules) RuleTotal\r\n  where sr.mode_id = 1 and sr.cohort_definition_id = @target_cohort_id and sr.inclusion_rule_mask = POWER(cast(2 as bigint),RuleTotal.total_rules)-1\r\n) FC\r\n;\r\n\r\n-- END: Inclusion Impact Analysis - person\r\n\r\nTRUNCATE TABLE #best_events;\r\nDROP TABLE #best_events;\r\n\r\nTRUNCATE TABLE #inclusion_rules;\r\nDROP TABLE #inclusion_rules;\r\n}\r\n\r\nTRUNCATE TABLE #strategy_ends;\nDROP TABLE #strategy_ends;\n\r\n\r\nTRUNCATE TABLE #cohort_rows;\r\nDROP TABLE #cohort_rows;\r\n\r\nTRUNCATE TABLE #final_cohort;\r\nDROP TABLE #final_cohort;\r\n\r\nTRUNCATE TABLE #inclusion_events;\r\nDROP TABLE #inclusion_events;\r\n\r\nTRUNCATE TABLE #qualified_events;\r\nDROP TABLE #qualified_events;\r\n\r\nTRUNCATE TABLE #included_events;\r\nDROP TABLE #included_events;\r\n\r\nTRUNCATE TABLE #Codesets;\r\nDROP TABLE #Codesets;\r\n",
          "json": "{\r\n  \"ConceptSets\": [\r\n    {\r\n      \"id\": 0,\r\n      \"name\": \"[MVK] Clavulanate\",\r\n      \"expression\": {\r\n        \"items\": [\r\n          {\r\n            \"concept\": {\r\n              \"CONCEPT_CLASS_ID\": \"Ingredient\",\r\n              \"CONCEPT_CODE\": \"48203\",\r\n              \"CONCEPT_ID\": 1759842,\r\n              \"CONCEPT_NAME\": \"clavulanate\",\r\n              \"DOMAIN_ID\": \"Drug\",\r\n              \"INVALID_REASON\": \"V\",\r\n              \"INVALID_REASON_CAPTION\": \"Valid\",\r\n              \"STANDARD_CONCEPT\": \"S\",\r\n              \"STANDARD_CONCEPT_CAPTION\": \"Standard\",\r\n              \"VOCABULARY_ID\": \"RxNorm\"\r\n            },\r\n            \"includeDescendants\": true\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  ],\r\n  \"PrimaryCriteria\": {\r\n    \"CriteriaList\": [\r\n      {\r\n        \"DrugExposure\": {\r\n          \"CodesetId\": 0\r\n        }\r\n      }\r\n    ],\r\n    \"ObservationWindow\": {\r\n      \"PriorDays\": 0,\r\n      \"PostDays\": 0\r\n    },\r\n    \"PrimaryCriteriaLimit\": {\r\n      \"Type\": \"First\"\r\n    }\r\n  },\r\n  \"QualifiedLimit\": {\r\n    \"Type\": \"First\"\r\n  },\r\n  \"ExpressionLimit\": {\r\n    \"Type\": \"First\"\r\n  },\r\n  \"InclusionRules\": [],\r\n  \"EndStrategy\": {\r\n    \"CustomEra\": {\r\n      \"DrugCodesetId\": 0,\r\n      \"GapDays\": 0,\r\n      \"Offset\": 0\r\n    }\r\n  },\r\n  \"CensoringCriteria\": [],\r\n  \"CollapseSettings\": {\r\n    \"CollapseType\": \"ERA\",\r\n    \"EraPad\": 30\r\n  },\r\n  \"CensorWindow\": {},\r\n  \"cdmVersionRange\": \">=5.0.0\"\r\n}",
          "subsetParent": 7,
          "isSubset": false,
          "subsetDefinitionId": "NA"
        },
        {
          "cohortId": 8,
          "cohortName": "Death",
          "sql": "CREATE TABLE #Codesets (\r\n  codeset_id int NOT NULL,\r\n  concept_id bigint NOT NULL\r\n)\r\n;\r\n\r\nINSERT INTO #Codesets (codeset_id, concept_id)\nSELECT 0 as codeset_id, c.concept_id FROM (select distinct I.concept_id FROM\r\n( \r\n  select concept_id from @vocabulary_database_schema.CONCEPT where (concept_id in (4306655))\r\nUNION  select c.concept_id\r\n  from @vocabulary_database_schema.CONCEPT c\r\n  join @vocabulary_database_schema.CONCEPT_ANCESTOR ca on c.concept_id = ca.descendant_concept_id\r\n  WHERE c.invalid_reason is null\r\n  and (ca.ancestor_concept_id in (4306655))\r\n\r\n) I\r\n) C;\r\n\r\nUPDATE STATISTICS #Codesets;\r\n\r\n\r\nSELECT event_id, person_id, start_date, end_date, op_start_date, op_end_date, visit_occurrence_id\r\nINTO #qualified_events\r\nFROM \r\n(\r\n  select pe.event_id, pe.person_id, pe.start_date, pe.end_date, pe.op_start_date, pe.op_end_date, row_number() over (partition by pe.person_id order by pe.start_date ASC) as ordinal, cast(pe.visit_occurrence_id as bigint) as visit_occurrence_id\r\n  FROM (-- Begin Primary Events\r\nselect P.ordinal as event_id, P.person_id, P.start_date, P.end_date, op_start_date, op_end_date, cast(P.visit_occurrence_id as bigint) as visit_occurrence_id\r\nFROM\r\n(\r\n  select E.person_id, E.start_date, E.end_date,\r\n         row_number() OVER (PARTITION BY E.person_id ORDER BY E.sort_date ASC, E.event_id) ordinal,\r\n         OP.observation_period_start_date as op_start_date, OP.observation_period_end_date as op_end_date, cast(E.visit_occurrence_id as bigint) as visit_occurrence_id\r\n  FROM \r\n  (\r\n  -- Begin Drug Exposure Criteria\r\nselect C.person_id, C.drug_exposure_id as event_id, C.start_date, C.end_date,\r\n  C.visit_occurrence_id,C.start_date as sort_date\r\nfrom \r\n(\r\n  select de.person_id,de.drug_exposure_id,de.drug_concept_id,de.visit_occurrence_id,days_supply,quantity,refills,de.drug_exposure_start_date as start_date, COALESCE(de.drug_exposure_end_date, DATEADD(day,de.days_supply,de.drug_exposure_start_date), DATEADD(day,1,de.drug_exposure_start_date)) as end_date \r\n  FROM @cdm_database_schema.DRUG_EXPOSURE de\r\nJOIN #Codesets cs on (de.drug_concept_id = cs.concept_id and cs.codeset_id = 0)\r\n) C\r\n\r\n\r\n-- End Drug Exposure Criteria\r\n\r\n  ) E\r\n\tJOIN @cdm_database_schema.observation_period OP on E.person_id = OP.person_id and E.start_date >=  OP.observation_period_start_date and E.start_date <= op.observation_period_end_date\r\n  WHERE DATEADD(day,0,OP.OBSERVATION_PERIOD_START_DATE) <= E.START_DATE AND DATEADD(day,0,E.START_DATE) <= OP.OBSERVATION_PERIOD_END_DATE\r\n) P\r\nWHERE P.ordinal = 1\r\n-- End Primary Events\r\n) pe\r\n  \r\n) QE\r\n\r\n;\r\n\r\n--- Inclusion Rule Inserts\r\n\r\ncreate table #inclusion_events (inclusion_rule_id bigint,\n\tperson_id bigint,\n\tevent_id bigint\n);\r\n\r\nselect event_id, person_id, start_date, end_date, op_start_date, op_end_date\r\ninto #included_events\r\nFROM (\r\n  SELECT event_id, person_id, start_date, end_date, op_start_date, op_end_date, row_number() over (partition by person_id order by start_date ASC) as ordinal\r\n  from\r\n  (\r\n    select Q.event_id, Q.person_id, Q.start_date, Q.end_date, Q.op_start_date, Q.op_end_date, SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) as inclusion_rule_mask\r\n    from #qualified_events Q\r\n    LEFT JOIN #inclusion_events I on I.person_id = Q.person_id and I.event_id = Q.event_id\r\n    GROUP BY Q.event_id, Q.person_id, Q.start_date, Q.end_date, Q.op_start_date, Q.op_end_date\r\n  ) MG -- matching groups\r\n{0 != 0}?{\r\n  -- the matching group with all bits set ( POWER(2,# of inclusion rules) - 1 = inclusion_rule_mask\r\n  WHERE (MG.inclusion_rule_mask = POWER(cast(2 as bigint),0)-1)\r\n}\r\n) Results\r\nWHERE Results.ordinal = 1\r\n;\r\n\r\n-- custom era strategy\r\n\r\nwith ctePersons(person_id) as (\r\n\tselect distinct person_id from #included_events\r\n)\r\n\r\nselect person_id, drug_exposure_start_date, drug_exposure_end_date\r\nINTO #drugTarget\r\nFROM (\r\n\tselect de.PERSON_ID, DRUG_EXPOSURE_START_DATE, COALESCE(DRUG_EXPOSURE_END_DATE, DATEADD(day,DAYS_SUPPLY,DRUG_EXPOSURE_START_DATE), DATEADD(day,1,DRUG_EXPOSURE_START_DATE)) as DRUG_EXPOSURE_END_DATE \r\n\tFROM @cdm_database_schema.DRUG_EXPOSURE de\r\n\tJOIN ctePersons p on de.person_id = p.person_id\r\n\tJOIN #Codesets cs on cs.codeset_id = 0 AND de.drug_concept_id = cs.concept_id\r\n\r\n\tUNION ALL\r\n\r\n\tselect de.PERSON_ID, DRUG_EXPOSURE_START_DATE, COALESCE(DRUG_EXPOSURE_END_DATE, DATEADD(day,DAYS_SUPPLY,DRUG_EXPOSURE_START_DATE), DATEADD(day,1,DRUG_EXPOSURE_START_DATE)) as DRUG_EXPOSURE_END_DATE \r\n\tFROM @cdm_database_schema.DRUG_EXPOSURE de\r\n\tJOIN ctePersons p on de.person_id = p.person_id\r\n\tJOIN #Codesets cs on cs.codeset_id = 0 AND de.drug_source_concept_id = cs.concept_id\r\n) E\r\n;\r\n\r\nselect et.event_id, et.person_id, ERAS.era_end_date as end_date\r\nINTO #strategy_ends\r\nfrom #included_events et\r\nJOIN \r\n(\r\n\r\n  select person_id, min(start_date) as era_start_date, DATEADD(day,-1 * 0, max(end_date)) as era_end_date\r\n  from (\r\n    select person_id, start_date, end_date, sum(is_start) over (partition by person_id order by start_date, is_start desc rows unbounded preceding) group_idx\r\n    from (\r\n      select person_id, start_date, end_date, \r\n        case when max(end_date) over (partition by person_id order by start_date rows between unbounded preceding and 1 preceding) >= start_date then 0 else 1 end is_start\r\n      from (\r\n        select person_id, drug_exposure_start_date as start_date, DATEADD(day,(0 + 0),DRUG_EXPOSURE_END_DATE) as end_date\r\n        FROM #drugTarget\r\n      ) DT\r\n    ) ST\r\n  ) GR\r\n  group by person_id, group_idx\r\n) ERAS on ERAS.person_id = et.person_id \r\nWHERE et.start_date between ERAS.era_start_date and ERAS.era_end_date;\r\n\r\nTRUNCATE TABLE #drugTarget;\r\nDROP TABLE #drugTarget;\r\n\r\n\r\n-- generate cohort periods into #final_cohort\r\nselect person_id, start_date, end_date\r\nINTO #cohort_rows\r\nfrom ( -- first_ends\r\n\tselect F.person_id, F.start_date, F.end_date\r\n\tFROM (\r\n\t  select I.event_id, I.person_id, I.start_date, CE.end_date, row_number() over (partition by I.person_id, I.event_id order by CE.end_date) as ordinal\r\n\t  from #included_events I\r\n\t  join ( -- cohort_ends\r\n-- cohort exit dates\r\n-- By default, cohort exit at the event's op end date\nselect event_id, person_id, op_end_date as end_date from #included_events\nUNION ALL\n-- End Date Strategy\nSELECT event_id, person_id, end_date from #strategy_ends\n\r\n    ) CE on I.event_id = CE.event_id and I.person_id = CE.person_id and CE.end_date >= I.start_date\r\n\t) F\r\n\tWHERE F.ordinal = 1\r\n) FE;\r\n\r\n\r\nselect person_id, min(start_date) as start_date, DATEADD(day,-1 * 30, max(end_date)) as end_date\r\ninto #final_cohort\r\nfrom (\r\n  select person_id, start_date, end_date, sum(is_start) over (partition by person_id order by start_date, is_start desc rows unbounded preceding) group_idx\r\n  from (\r\n    select person_id, start_date, end_date, \r\n      case when max(end_date) over (partition by person_id order by start_date rows between unbounded preceding and 1 preceding) >= start_date then 0 else 1 end is_start\r\n    from (\r\n      select person_id, start_date, DATEADD(day,30,end_date) as end_date\r\n      from #cohort_rows\r\n    ) CR\r\n  ) ST\r\n) GR\r\ngroup by person_id, group_idx;\r\n\r\nDELETE FROM @target_database_schema.@target_cohort_table where cohort_definition_id = @target_cohort_id;\r\nINSERT INTO @target_database_schema.@target_cohort_table (cohort_definition_id, subject_id, cohort_start_date, cohort_end_date)\r\nselect @target_cohort_id as cohort_definition_id, person_id, start_date, end_date \nFROM #final_cohort CO\r\n;\r\n\r\n{0 != 0}?{\r\n-- BEGIN: Censored Stats\r\n\r\ndelete from @results_database_schema.cohort_censor_stats where cohort_definition_id = @target_cohort_id;\r\n\r\n-- END: Censored Stats\r\n}\r\n{0 != 0 & 0 != 0}?{\r\n\r\nCREATE TABLE #inclusion_rules (rule_sequence int);\r\n\r\n-- Find the event that is the 'best match' per person.  \r\n-- the 'best match' is defined as the event that satisfies the most inclusion rules.\r\n-- ties are solved by choosing the event that matches the earliest inclusion rule, and then earliest.\r\n\r\nselect q.person_id, q.event_id\r\ninto #best_events\r\nfrom #qualified_events Q\r\njoin (\r\n\tSELECT R.person_id, R.event_id, ROW_NUMBER() OVER (PARTITION BY R.person_id ORDER BY R.rule_count DESC,R.min_rule_id ASC, R.start_date ASC) AS rank_value\r\n\tFROM (\r\n\t\tSELECT Q.person_id, Q.event_id, COALESCE(COUNT(DISTINCT I.inclusion_rule_id), 0) AS rule_count, COALESCE(MIN(I.inclusion_rule_id), 0) AS min_rule_id, Q.start_date\r\n\t\tFROM #qualified_events Q\r\n\t\tLEFT JOIN #inclusion_events I ON q.person_id = i.person_id AND q.event_id = i.event_id\r\n\t\tGROUP BY Q.person_id, Q.event_id, Q.start_date\r\n\t) R\r\n) ranked on Q.person_id = ranked.person_id and Q.event_id = ranked.event_id\r\nWHERE ranked.rank_value = 1\r\n;\r\n\r\n-- modes of generation: (the same tables store the results for the different modes, identified by the mode_id column)\r\n-- 0: all events\r\n-- 1: best event\r\n\r\n\r\n-- BEGIN: Inclusion Impact Analysis - event\r\n-- calculte matching group counts\r\ndelete from @results_database_schema.cohort_inclusion_result where cohort_definition_id = @target_cohort_id and mode_id = 0;\r\ninsert into @results_database_schema.cohort_inclusion_result (cohort_definition_id, inclusion_rule_mask, person_count, mode_id)\r\nselect @target_cohort_id as cohort_definition_id, inclusion_rule_mask, count_big(*) as person_count, 0 as mode_id\r\nfrom\r\n(\r\n  select Q.person_id, Q.event_id, CAST(SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) AS bigint) as inclusion_rule_mask\r\n  from #qualified_events Q\r\n  LEFT JOIN #inclusion_events I on q.person_id = i.person_id and q.event_id = i.event_id\r\n  GROUP BY Q.person_id, Q.event_id\r\n) MG -- matching groups\r\ngroup by inclusion_rule_mask\r\n;\r\n\r\n-- calculate gain counts \r\ndelete from @results_database_schema.cohort_inclusion_stats where cohort_definition_id = @target_cohort_id and mode_id = 0;\r\ninsert into @results_database_schema.cohort_inclusion_stats (cohort_definition_id, rule_sequence, person_count, gain_count, person_total, mode_id)\r\nselect @target_cohort_id as cohort_definition_id, ir.rule_sequence, coalesce(T.person_count, 0) as person_count, coalesce(SR.person_count, 0) gain_count, EventTotal.total, 0 as mode_id\r\nfrom #inclusion_rules ir\r\nleft join\r\n(\r\n  select i.inclusion_rule_id, count_big(i.event_id) as person_count\r\n  from #qualified_events Q\r\n  JOIN #inclusion_events i on Q.person_id = I.person_id and Q.event_id = i.event_id\r\n  group by i.inclusion_rule_id\r\n) T on ir.rule_sequence = T.inclusion_rule_id\r\nCROSS JOIN (select count(*) as total_rules from #inclusion_rules) RuleTotal\r\nCROSS JOIN (select count_big(event_id) as total from #qualified_events) EventTotal\r\nLEFT JOIN @results_database_schema.cohort_inclusion_result SR on SR.mode_id = 0 AND SR.cohort_definition_id = @target_cohort_id AND (POWER(cast(2 as bigint),RuleTotal.total_rules) - POWER(cast(2 as bigint),ir.rule_sequence) - 1) = SR.inclusion_rule_mask -- POWER(2,rule count) - POWER(2,rule sequence) - 1 is the mask for 'all except this rule'\r\n;\r\n\r\n-- calculate totals\r\ndelete from @results_database_schema.cohort_summary_stats where cohort_definition_id = @target_cohort_id and mode_id = 0;\r\ninsert into @results_database_schema.cohort_summary_stats (cohort_definition_id, base_count, final_count, mode_id)\r\nselect @target_cohort_id as cohort_definition_id, PC.total as person_count, coalesce(FC.total, 0) as final_count, 0 as mode_id\r\nFROM\r\n(select count_big(event_id) as total from #qualified_events) PC,\r\n(select sum(sr.person_count) as total\r\n  from @results_database_schema.cohort_inclusion_result sr\r\n  CROSS JOIN (select count(*) as total_rules from #inclusion_rules) RuleTotal\r\n  where sr.mode_id = 0 and sr.cohort_definition_id = @target_cohort_id and sr.inclusion_rule_mask = POWER(cast(2 as bigint),RuleTotal.total_rules)-1\r\n) FC\r\n;\r\n\r\n-- END: Inclusion Impact Analysis - event\r\n\r\n-- BEGIN: Inclusion Impact Analysis - person\r\n-- calculte matching group counts\r\ndelete from @results_database_schema.cohort_inclusion_result where cohort_definition_id = @target_cohort_id and mode_id = 1;\r\ninsert into @results_database_schema.cohort_inclusion_result (cohort_definition_id, inclusion_rule_mask, person_count, mode_id)\r\nselect @target_cohort_id as cohort_definition_id, inclusion_rule_mask, count_big(*) as person_count, 1 as mode_id\r\nfrom\r\n(\r\n  select Q.person_id, Q.event_id, CAST(SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) AS bigint) as inclusion_rule_mask\r\n  from #best_events Q\r\n  LEFT JOIN #inclusion_events I on q.person_id = i.person_id and q.event_id = i.event_id\r\n  GROUP BY Q.person_id, Q.event_id\r\n) MG -- matching groups\r\ngroup by inclusion_rule_mask\r\n;\r\n\r\n-- calculate gain counts \r\ndelete from @results_database_schema.cohort_inclusion_stats where cohort_definition_id = @target_cohort_id and mode_id = 1;\r\ninsert into @results_database_schema.cohort_inclusion_stats (cohort_definition_id, rule_sequence, person_count, gain_count, person_total, mode_id)\r\nselect @target_cohort_id as cohort_definition_id, ir.rule_sequence, coalesce(T.person_count, 0) as person_count, coalesce(SR.person_count, 0) gain_count, EventTotal.total, 1 as mode_id\r\nfrom #inclusion_rules ir\r\nleft join\r\n(\r\n  select i.inclusion_rule_id, count_big(i.event_id) as person_count\r\n  from #best_events Q\r\n  JOIN #inclusion_events i on Q.person_id = I.person_id and Q.event_id = i.event_id\r\n  group by i.inclusion_rule_id\r\n) T on ir.rule_sequence = T.inclusion_rule_id\r\nCROSS JOIN (select count(*) as total_rules from #inclusion_rules) RuleTotal\r\nCROSS JOIN (select count_big(event_id) as total from #best_events) EventTotal\r\nLEFT JOIN @results_database_schema.cohort_inclusion_result SR on SR.mode_id = 1 AND SR.cohort_definition_id = @target_cohort_id AND (POWER(cast(2 as bigint),RuleTotal.total_rules) - POWER(cast(2 as bigint),ir.rule_sequence) - 1) = SR.inclusion_rule_mask -- POWER(2,rule count) - POWER(2,rule sequence) - 1 is the mask for 'all except this rule'\r\n;\r\n\r\n-- calculate totals\r\ndelete from @results_database_schema.cohort_summary_stats where cohort_definition_id = @target_cohort_id and mode_id = 1;\r\ninsert into @results_database_schema.cohort_summary_stats (cohort_definition_id, base_count, final_count, mode_id)\r\nselect @target_cohort_id as cohort_definition_id, PC.total as person_count, coalesce(FC.total, 0) as final_count, 1 as mode_id\r\nFROM\r\n(select count_big(event_id) as total from #best_events) PC,\r\n(select sum(sr.person_count) as total\r\n  from @results_database_schema.cohort_inclusion_result sr\r\n  CROSS JOIN (select count(*) as total_rules from #inclusion_rules) RuleTotal\r\n  where sr.mode_id = 1 and sr.cohort_definition_id = @target_cohort_id and sr.inclusion_rule_mask = POWER(cast(2 as bigint),RuleTotal.total_rules)-1\r\n) FC\r\n;\r\n\r\n-- END: Inclusion Impact Analysis - person\r\n\r\nTRUNCATE TABLE #best_events;\r\nDROP TABLE #best_events;\r\n\r\nTRUNCATE TABLE #inclusion_rules;\r\nDROP TABLE #inclusion_rules;\r\n}\r\n\r\nTRUNCATE TABLE #strategy_ends;\nDROP TABLE #strategy_ends;\n\r\n\r\nTRUNCATE TABLE #cohort_rows;\r\nDROP TABLE #cohort_rows;\r\n\r\nTRUNCATE TABLE #final_cohort;\r\nDROP TABLE #final_cohort;\r\n\r\nTRUNCATE TABLE #inclusion_events;\r\nDROP TABLE #inclusion_events;\r\n\r\nTRUNCATE TABLE #qualified_events;\r\nDROP TABLE #qualified_events;\r\n\r\nTRUNCATE TABLE #included_events;\r\nDROP TABLE #included_events;\r\n\r\nTRUNCATE TABLE #Codesets;\r\nDROP TABLE #Codesets;\r\n",
          "json": "{\r\n  \"ConceptSets\": [\r\n    {\r\n      \"id\": 0,\r\n      \"name\": \"[MVK] Death\",\r\n      \"expression\": {\r\n        \"items\": [\r\n          {\r\n            \"concept\": {\r\n              \"CONCEPT_CLASS_ID\": \"Event\",\r\n              \"CONCEPT_CODE\": \"419620001\",\r\n              \"CONCEPT_ID\": 4306655,\r\n              \"CONCEPT_NAME\": \"Death\",\r\n              \"DOMAIN_ID\": \"Observation\",\r\n              \"INVALID_REASON\": \"V\",\r\n              \"INVALID_REASON_CAPTION\": \"Valid\",\r\n              \"STANDARD_CONCEPT\": \"S\",\r\n              \"STANDARD_CONCEPT_CAPTION\": \"Standard\",\r\n              \"VOCABULARY_ID\": \"SNOMED\",\r\n              \"VALID_START_DATE\": \"1900-01-31\",\r\n              \"VALID_END_DATE\": \"2099-12-31\"\r\n            },\r\n            \"includeDescendants\": true\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  ],\r\n  \"PrimaryCriteria\": {\r\n    \"CriteriaList\": [\r\n      {\r\n        \"DrugExposure\": {\r\n          \"CodesetId\": 0\r\n        }\r\n      }\r\n    ],\r\n    \"ObservationWindow\": {\r\n      \"PriorDays\": 0,\r\n      \"PostDays\": 0\r\n    },\r\n    \"PrimaryCriteriaLimit\": {\r\n      \"Type\": \"First\"\r\n    }\r\n  },\r\n  \"QualifiedLimit\": {\r\n    \"Type\": \"First\"\r\n  },\r\n  \"ExpressionLimit\": {\r\n    \"Type\": \"First\"\r\n  },\r\n  \"InclusionRules\": [],\r\n  \"EndStrategy\": {\r\n    \"CustomEra\": {\r\n      \"DrugCodesetId\": 0,\r\n      \"GapDays\": 0,\r\n      \"Offset\": 0\r\n    }\r\n  },\r\n  \"CensoringCriteria\": [],\r\n  \"CollapseSettings\": {\r\n    \"CollapseType\": \"ERA\",\r\n    \"EraPad\": 30\r\n  },\r\n  \"CensorWindow\": {},\r\n  \"cdmVersionRange\": \">=5.0.0\"\r\n}",
          "subsetParent": 8,
          "isSubset": false,
          "subsetDefinitionId": "NA"
        },
        {
          "cohortId": 9,
          "cohortName": "Doxylamine",
          "sql": "CREATE TABLE #Codesets (\r\n  codeset_id int NOT NULL,\r\n  concept_id bigint NOT NULL\r\n)\r\n;\r\n\r\nINSERT INTO #Codesets (codeset_id, concept_id)\nSELECT 0 as codeset_id, c.concept_id FROM (select distinct I.concept_id FROM\r\n( \r\n  select concept_id from @vocabulary_database_schema.CONCEPT where (concept_id in (738818))\r\nUNION  select c.concept_id\r\n  from @vocabulary_database_schema.CONCEPT c\r\n  join @vocabulary_database_schema.CONCEPT_ANCESTOR ca on c.concept_id = ca.descendant_concept_id\r\n  WHERE c.invalid_reason is null\r\n  and (ca.ancestor_concept_id in (738818))\r\n\r\n) I\r\n) C;\r\n\r\nUPDATE STATISTICS #Codesets;\r\n\r\n\r\nSELECT event_id, person_id, start_date, end_date, op_start_date, op_end_date, visit_occurrence_id\r\nINTO #qualified_events\r\nFROM \r\n(\r\n  select pe.event_id, pe.person_id, pe.start_date, pe.end_date, pe.op_start_date, pe.op_end_date, row_number() over (partition by pe.person_id order by pe.start_date ASC) as ordinal, cast(pe.visit_occurrence_id as bigint) as visit_occurrence_id\r\n  FROM (-- Begin Primary Events\r\nselect P.ordinal as event_id, P.person_id, P.start_date, P.end_date, op_start_date, op_end_date, cast(P.visit_occurrence_id as bigint) as visit_occurrence_id\r\nFROM\r\n(\r\n  select E.person_id, E.start_date, E.end_date,\r\n         row_number() OVER (PARTITION BY E.person_id ORDER BY E.sort_date ASC, E.event_id) ordinal,\r\n         OP.observation_period_start_date as op_start_date, OP.observation_period_end_date as op_end_date, cast(E.visit_occurrence_id as bigint) as visit_occurrence_id\r\n  FROM \r\n  (\r\n  -- Begin Drug Exposure Criteria\r\nselect C.person_id, C.drug_exposure_id as event_id, C.start_date, C.end_date,\r\n  C.visit_occurrence_id,C.start_date as sort_date\r\nfrom \r\n(\r\n  select de.person_id,de.drug_exposure_id,de.drug_concept_id,de.visit_occurrence_id,days_supply,quantity,refills,de.drug_exposure_start_date as start_date, COALESCE(de.drug_exposure_end_date, DATEADD(day,de.days_supply,de.drug_exposure_start_date), DATEADD(day,1,de.drug_exposure_start_date)) as end_date \r\n  FROM @cdm_database_schema.DRUG_EXPOSURE de\r\nJOIN #Codesets cs on (de.drug_concept_id = cs.concept_id and cs.codeset_id = 0)\r\n) C\r\n\r\n\r\n-- End Drug Exposure Criteria\r\n\r\n  ) E\r\n\tJOIN @cdm_database_schema.observation_period OP on E.person_id = OP.person_id and E.start_date >=  OP.observation_period_start_date and E.start_date <= op.observation_period_end_date\r\n  WHERE DATEADD(day,0,OP.OBSERVATION_PERIOD_START_DATE) <= E.START_DATE AND DATEADD(day,0,E.START_DATE) <= OP.OBSERVATION_PERIOD_END_DATE\r\n) P\r\nWHERE P.ordinal = 1\r\n-- End Primary Events\r\n) pe\r\n  \r\n) QE\r\n\r\n;\r\n\r\n--- Inclusion Rule Inserts\r\n\r\ncreate table #inclusion_events (inclusion_rule_id bigint,\n\tperson_id bigint,\n\tevent_id bigint\n);\r\n\r\nselect event_id, person_id, start_date, end_date, op_start_date, op_end_date\r\ninto #included_events\r\nFROM (\r\n  SELECT event_id, person_id, start_date, end_date, op_start_date, op_end_date, row_number() over (partition by person_id order by start_date ASC) as ordinal\r\n  from\r\n  (\r\n    select Q.event_id, Q.person_id, Q.start_date, Q.end_date, Q.op_start_date, Q.op_end_date, SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) as inclusion_rule_mask\r\n    from #qualified_events Q\r\n    LEFT JOIN #inclusion_events I on I.person_id = Q.person_id and I.event_id = Q.event_id\r\n    GROUP BY Q.event_id, Q.person_id, Q.start_date, Q.end_date, Q.op_start_date, Q.op_end_date\r\n  ) MG -- matching groups\r\n{0 != 0}?{\r\n  -- the matching group with all bits set ( POWER(2,# of inclusion rules) - 1 = inclusion_rule_mask\r\n  WHERE (MG.inclusion_rule_mask = POWER(cast(2 as bigint),0)-1)\r\n}\r\n) Results\r\nWHERE Results.ordinal = 1\r\n;\r\n\r\n-- custom era strategy\r\n\r\nwith ctePersons(person_id) as (\r\n\tselect distinct person_id from #included_events\r\n)\r\n\r\nselect person_id, drug_exposure_start_date, drug_exposure_end_date\r\nINTO #drugTarget\r\nFROM (\r\n\tselect de.PERSON_ID, DRUG_EXPOSURE_START_DATE, COALESCE(DRUG_EXPOSURE_END_DATE, DATEADD(day,DAYS_SUPPLY,DRUG_EXPOSURE_START_DATE), DATEADD(day,1,DRUG_EXPOSURE_START_DATE)) as DRUG_EXPOSURE_END_DATE \r\n\tFROM @cdm_database_schema.DRUG_EXPOSURE de\r\n\tJOIN ctePersons p on de.person_id = p.person_id\r\n\tJOIN #Codesets cs on cs.codeset_id = 0 AND de.drug_concept_id = cs.concept_id\r\n\r\n\tUNION ALL\r\n\r\n\tselect de.PERSON_ID, DRUG_EXPOSURE_START_DATE, COALESCE(DRUG_EXPOSURE_END_DATE, DATEADD(day,DAYS_SUPPLY,DRUG_EXPOSURE_START_DATE), DATEADD(day,1,DRUG_EXPOSURE_START_DATE)) as DRUG_EXPOSURE_END_DATE \r\n\tFROM @cdm_database_schema.DRUG_EXPOSURE de\r\n\tJOIN ctePersons p on de.person_id = p.person_id\r\n\tJOIN #Codesets cs on cs.codeset_id = 0 AND de.drug_source_concept_id = cs.concept_id\r\n) E\r\n;\r\n\r\nselect et.event_id, et.person_id, ERAS.era_end_date as end_date\r\nINTO #strategy_ends\r\nfrom #included_events et\r\nJOIN \r\n(\r\n\r\n  select person_id, min(start_date) as era_start_date, DATEADD(day,-1 * 0, max(end_date)) as era_end_date\r\n  from (\r\n    select person_id, start_date, end_date, sum(is_start) over (partition by person_id order by start_date, is_start desc rows unbounded preceding) group_idx\r\n    from (\r\n      select person_id, start_date, end_date, \r\n        case when max(end_date) over (partition by person_id order by start_date rows between unbounded preceding and 1 preceding) >= start_date then 0 else 1 end is_start\r\n      from (\r\n        select person_id, drug_exposure_start_date as start_date, DATEADD(day,(0 + 0),DRUG_EXPOSURE_END_DATE) as end_date\r\n        FROM #drugTarget\r\n      ) DT\r\n    ) ST\r\n  ) GR\r\n  group by person_id, group_idx\r\n) ERAS on ERAS.person_id = et.person_id \r\nWHERE et.start_date between ERAS.era_start_date and ERAS.era_end_date;\r\n\r\nTRUNCATE TABLE #drugTarget;\r\nDROP TABLE #drugTarget;\r\n\r\n\r\n-- generate cohort periods into #final_cohort\r\nselect person_id, start_date, end_date\r\nINTO #cohort_rows\r\nfrom ( -- first_ends\r\n\tselect F.person_id, F.start_date, F.end_date\r\n\tFROM (\r\n\t  select I.event_id, I.person_id, I.start_date, CE.end_date, row_number() over (partition by I.person_id, I.event_id order by CE.end_date) as ordinal\r\n\t  from #included_events I\r\n\t  join ( -- cohort_ends\r\n-- cohort exit dates\r\n-- By default, cohort exit at the event's op end date\nselect event_id, person_id, op_end_date as end_date from #included_events\nUNION ALL\n-- End Date Strategy\nSELECT event_id, person_id, end_date from #strategy_ends\n\r\n    ) CE on I.event_id = CE.event_id and I.person_id = CE.person_id and CE.end_date >= I.start_date\r\n\t) F\r\n\tWHERE F.ordinal = 1\r\n) FE;\r\n\r\n\r\nselect person_id, min(start_date) as start_date, DATEADD(day,-1 * 30, max(end_date)) as end_date\r\ninto #final_cohort\r\nfrom (\r\n  select person_id, start_date, end_date, sum(is_start) over (partition by person_id order by start_date, is_start desc rows unbounded preceding) group_idx\r\n  from (\r\n    select person_id, start_date, end_date, \r\n      case when max(end_date) over (partition by person_id order by start_date rows between unbounded preceding and 1 preceding) >= start_date then 0 else 1 end is_start\r\n    from (\r\n      select person_id, start_date, DATEADD(day,30,end_date) as end_date\r\n      from #cohort_rows\r\n    ) CR\r\n  ) ST\r\n) GR\r\ngroup by person_id, group_idx;\r\n\r\nDELETE FROM @target_database_schema.@target_cohort_table where cohort_definition_id = @target_cohort_id;\r\nINSERT INTO @target_database_schema.@target_cohort_table (cohort_definition_id, subject_id, cohort_start_date, cohort_end_date)\r\nselect @target_cohort_id as cohort_definition_id, person_id, start_date, end_date \nFROM #final_cohort CO\r\n;\r\n\r\n{0 != 0}?{\r\n-- BEGIN: Censored Stats\r\n\r\ndelete from @results_database_schema.cohort_censor_stats where cohort_definition_id = @target_cohort_id;\r\n\r\n-- END: Censored Stats\r\n}\r\n{0 != 0 & 0 != 0}?{\r\n\r\nCREATE TABLE #inclusion_rules (rule_sequence int);\r\n\r\n-- Find the event that is the 'best match' per person.  \r\n-- the 'best match' is defined as the event that satisfies the most inclusion rules.\r\n-- ties are solved by choosing the event that matches the earliest inclusion rule, and then earliest.\r\n\r\nselect q.person_id, q.event_id\r\ninto #best_events\r\nfrom #qualified_events Q\r\njoin (\r\n\tSELECT R.person_id, R.event_id, ROW_NUMBER() OVER (PARTITION BY R.person_id ORDER BY R.rule_count DESC,R.min_rule_id ASC, R.start_date ASC) AS rank_value\r\n\tFROM (\r\n\t\tSELECT Q.person_id, Q.event_id, COALESCE(COUNT(DISTINCT I.inclusion_rule_id), 0) AS rule_count, COALESCE(MIN(I.inclusion_rule_id), 0) AS min_rule_id, Q.start_date\r\n\t\tFROM #qualified_events Q\r\n\t\tLEFT JOIN #inclusion_events I ON q.person_id = i.person_id AND q.event_id = i.event_id\r\n\t\tGROUP BY Q.person_id, Q.event_id, Q.start_date\r\n\t) R\r\n) ranked on Q.person_id = ranked.person_id and Q.event_id = ranked.event_id\r\nWHERE ranked.rank_value = 1\r\n;\r\n\r\n-- modes of generation: (the same tables store the results for the different modes, identified by the mode_id column)\r\n-- 0: all events\r\n-- 1: best event\r\n\r\n\r\n-- BEGIN: Inclusion Impact Analysis - event\r\n-- calculte matching group counts\r\ndelete from @results_database_schema.cohort_inclusion_result where cohort_definition_id = @target_cohort_id and mode_id = 0;\r\ninsert into @results_database_schema.cohort_inclusion_result (cohort_definition_id, inclusion_rule_mask, person_count, mode_id)\r\nselect @target_cohort_id as cohort_definition_id, inclusion_rule_mask, count_big(*) as person_count, 0 as mode_id\r\nfrom\r\n(\r\n  select Q.person_id, Q.event_id, CAST(SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) AS bigint) as inclusion_rule_mask\r\n  from #qualified_events Q\r\n  LEFT JOIN #inclusion_events I on q.person_id = i.person_id and q.event_id = i.event_id\r\n  GROUP BY Q.person_id, Q.event_id\r\n) MG -- matching groups\r\ngroup by inclusion_rule_mask\r\n;\r\n\r\n-- calculate gain counts \r\ndelete from @results_database_schema.cohort_inclusion_stats where cohort_definition_id = @target_cohort_id and mode_id = 0;\r\ninsert into @results_database_schema.cohort_inclusion_stats (cohort_definition_id, rule_sequence, person_count, gain_count, person_total, mode_id)\r\nselect @target_cohort_id as cohort_definition_id, ir.rule_sequence, coalesce(T.person_count, 0) as person_count, coalesce(SR.person_count, 0) gain_count, EventTotal.total, 0 as mode_id\r\nfrom #inclusion_rules ir\r\nleft join\r\n(\r\n  select i.inclusion_rule_id, count_big(i.event_id) as person_count\r\n  from #qualified_events Q\r\n  JOIN #inclusion_events i on Q.person_id = I.person_id and Q.event_id = i.event_id\r\n  group by i.inclusion_rule_id\r\n) T on ir.rule_sequence = T.inclusion_rule_id\r\nCROSS JOIN (select count(*) as total_rules from #inclusion_rules) RuleTotal\r\nCROSS JOIN (select count_big(event_id) as total from #qualified_events) EventTotal\r\nLEFT JOIN @results_database_schema.cohort_inclusion_result SR on SR.mode_id = 0 AND SR.cohort_definition_id = @target_cohort_id AND (POWER(cast(2 as bigint),RuleTotal.total_rules) - POWER(cast(2 as bigint),ir.rule_sequence) - 1) = SR.inclusion_rule_mask -- POWER(2,rule count) - POWER(2,rule sequence) - 1 is the mask for 'all except this rule'\r\n;\r\n\r\n-- calculate totals\r\ndelete from @results_database_schema.cohort_summary_stats where cohort_definition_id = @target_cohort_id and mode_id = 0;\r\ninsert into @results_database_schema.cohort_summary_stats (cohort_definition_id, base_count, final_count, mode_id)\r\nselect @target_cohort_id as cohort_definition_id, PC.total as person_count, coalesce(FC.total, 0) as final_count, 0 as mode_id\r\nFROM\r\n(select count_big(event_id) as total from #qualified_events) PC,\r\n(select sum(sr.person_count) as total\r\n  from @results_database_schema.cohort_inclusion_result sr\r\n  CROSS JOIN (select count(*) as total_rules from #inclusion_rules) RuleTotal\r\n  where sr.mode_id = 0 and sr.cohort_definition_id = @target_cohort_id and sr.inclusion_rule_mask = POWER(cast(2 as bigint),RuleTotal.total_rules)-1\r\n) FC\r\n;\r\n\r\n-- END: Inclusion Impact Analysis - event\r\n\r\n-- BEGIN: Inclusion Impact Analysis - person\r\n-- calculte matching group counts\r\ndelete from @results_database_schema.cohort_inclusion_result where cohort_definition_id = @target_cohort_id and mode_id = 1;\r\ninsert into @results_database_schema.cohort_inclusion_result (cohort_definition_id, inclusion_rule_mask, person_count, mode_id)\r\nselect @target_cohort_id as cohort_definition_id, inclusion_rule_mask, count_big(*) as person_count, 1 as mode_id\r\nfrom\r\n(\r\n  select Q.person_id, Q.event_id, CAST(SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) AS bigint) as inclusion_rule_mask\r\n  from #best_events Q\r\n  LEFT JOIN #inclusion_events I on q.person_id = i.person_id and q.event_id = i.event_id\r\n  GROUP BY Q.person_id, Q.event_id\r\n) MG -- matching groups\r\ngroup by inclusion_rule_mask\r\n;\r\n\r\n-- calculate gain counts \r\ndelete from @results_database_schema.cohort_inclusion_stats where cohort_definition_id = @target_cohort_id and mode_id = 1;\r\ninsert into @results_database_schema.cohort_inclusion_stats (cohort_definition_id, rule_sequence, person_count, gain_count, person_total, mode_id)\r\nselect @target_cohort_id as cohort_definition_id, ir.rule_sequence, coalesce(T.person_count, 0) as person_count, coalesce(SR.person_count, 0) gain_count, EventTotal.total, 1 as mode_id\r\nfrom #inclusion_rules ir\r\nleft join\r\n(\r\n  select i.inclusion_rule_id, count_big(i.event_id) as person_count\r\n  from #best_events Q\r\n  JOIN #inclusion_events i on Q.person_id = I.person_id and Q.event_id = i.event_id\r\n  group by i.inclusion_rule_id\r\n) T on ir.rule_sequence = T.inclusion_rule_id\r\nCROSS JOIN (select count(*) as total_rules from #inclusion_rules) RuleTotal\r\nCROSS JOIN (select count_big(event_id) as total from #best_events) EventTotal\r\nLEFT JOIN @results_database_schema.cohort_inclusion_result SR on SR.mode_id = 1 AND SR.cohort_definition_id = @target_cohort_id AND (POWER(cast(2 as bigint),RuleTotal.total_rules) - POWER(cast(2 as bigint),ir.rule_sequence) - 1) = SR.inclusion_rule_mask -- POWER(2,rule count) - POWER(2,rule sequence) - 1 is the mask for 'all except this rule'\r\n;\r\n\r\n-- calculate totals\r\ndelete from @results_database_schema.cohort_summary_stats where cohort_definition_id = @target_cohort_id and mode_id = 1;\r\ninsert into @results_database_schema.cohort_summary_stats (cohort_definition_id, base_count, final_count, mode_id)\r\nselect @target_cohort_id as cohort_definition_id, PC.total as person_count, coalesce(FC.total, 0) as final_count, 1 as mode_id\r\nFROM\r\n(select count_big(event_id) as total from #best_events) PC,\r\n(select sum(sr.person_count) as total\r\n  from @results_database_schema.cohort_inclusion_result sr\r\n  CROSS JOIN (select count(*) as total_rules from #inclusion_rules) RuleTotal\r\n  where sr.mode_id = 1 and sr.cohort_definition_id = @target_cohort_id and sr.inclusion_rule_mask = POWER(cast(2 as bigint),RuleTotal.total_rules)-1\r\n) FC\r\n;\r\n\r\n-- END: Inclusion Impact Analysis - person\r\n\r\nTRUNCATE TABLE #best_events;\r\nDROP TABLE #best_events;\r\n\r\nTRUNCATE TABLE #inclusion_rules;\r\nDROP TABLE #inclusion_rules;\r\n}\r\n\r\nTRUNCATE TABLE #strategy_ends;\nDROP TABLE #strategy_ends;\n\r\n\r\nTRUNCATE TABLE #cohort_rows;\r\nDROP TABLE #cohort_rows;\r\n\r\nTRUNCATE TABLE #final_cohort;\r\nDROP TABLE #final_cohort;\r\n\r\nTRUNCATE TABLE #inclusion_events;\r\nDROP TABLE #inclusion_events;\r\n\r\nTRUNCATE TABLE #qualified_events;\r\nDROP TABLE #qualified_events;\r\n\r\nTRUNCATE TABLE #included_events;\r\nDROP TABLE #included_events;\r\n\r\nTRUNCATE TABLE #Codesets;\r\nDROP TABLE #Codesets;\r\n",
          "json": "{\r\n  \"ConceptSets\": [\r\n    {\r\n      \"id\": 0,\r\n      \"name\": \"[MVK] Doxylamine\",\r\n      \"expression\": {\r\n        \"items\": [\r\n          {\r\n            \"concept\": {\r\n              \"CONCEPT_CLASS_ID\": \"Ingredient\",\r\n              \"CONCEPT_CODE\": \"3642\",\r\n              \"CONCEPT_ID\": 738818,\r\n              \"CONCEPT_NAME\": \"doxylamine\",\r\n              \"DOMAIN_ID\": \"Drug\",\r\n              \"INVALID_REASON\": \"V\",\r\n              \"INVALID_REASON_CAPTION\": \"Valid\",\r\n              \"STANDARD_CONCEPT\": \"S\",\r\n              \"STANDARD_CONCEPT_CAPTION\": \"Standard\",\r\n              \"VOCABULARY_ID\": \"RxNorm\"\r\n            },\r\n            \"includeDescendants\": true\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  ],\r\n  \"PrimaryCriteria\": {\r\n    \"CriteriaList\": [\r\n      {\r\n        \"DrugExposure\": {\r\n          \"CodesetId\": 0\r\n        }\r\n      }\r\n    ],\r\n    \"ObservationWindow\": {\r\n      \"PriorDays\": 0,\r\n      \"PostDays\": 0\r\n    },\r\n    \"PrimaryCriteriaLimit\": {\r\n      \"Type\": \"First\"\r\n    }\r\n  },\r\n  \"QualifiedLimit\": {\r\n    \"Type\": \"First\"\r\n  },\r\n  \"ExpressionLimit\": {\r\n    \"Type\": \"First\"\r\n  },\r\n  \"InclusionRules\": [],\r\n  \"EndStrategy\": {\r\n    \"CustomEra\": {\r\n      \"DrugCodesetId\": 0,\r\n      \"GapDays\": 0,\r\n      \"Offset\": 0\r\n    }\r\n  },\r\n  \"CensoringCriteria\": [],\r\n  \"CollapseSettings\": {\r\n    \"CollapseType\": \"ERA\",\r\n    \"EraPad\": 30\r\n  },\r\n  \"CensorWindow\": {},\r\n  \"cdmVersionRange\": \">=5.0.0\"\r\n}",
          "subsetParent": 9,
          "isSubset": false,
          "subsetDefinitionId": "NA"
        },
        {
          "cohortId": 10,
          "cohortName": "PenicillinV",
          "sql": "CREATE TABLE #Codesets (\r\n  codeset_id int NOT NULL,\r\n  concept_id bigint NOT NULL\r\n)\r\n;\r\n\r\nINSERT INTO #Codesets (codeset_id, concept_id)\nSELECT 0 as codeset_id, c.concept_id FROM (select distinct I.concept_id FROM\r\n( \r\n  select concept_id from @vocabulary_database_schema.CONCEPT where (concept_id in (1729720))\r\nUNION  select c.concept_id\r\n  from @vocabulary_database_schema.CONCEPT c\r\n  join @vocabulary_database_schema.CONCEPT_ANCESTOR ca on c.concept_id = ca.descendant_concept_id\r\n  WHERE c.invalid_reason is null\r\n  and (ca.ancestor_concept_id in (1729720))\r\n\r\n) I\r\n) C;\r\n\r\nUPDATE STATISTICS #Codesets;\r\n\r\n\r\nSELECT event_id, person_id, start_date, end_date, op_start_date, op_end_date, visit_occurrence_id\r\nINTO #qualified_events\r\nFROM \r\n(\r\n  select pe.event_id, pe.person_id, pe.start_date, pe.end_date, pe.op_start_date, pe.op_end_date, row_number() over (partition by pe.person_id order by pe.start_date ASC) as ordinal, cast(pe.visit_occurrence_id as bigint) as visit_occurrence_id\r\n  FROM (-- Begin Primary Events\r\nselect P.ordinal as event_id, P.person_id, P.start_date, P.end_date, op_start_date, op_end_date, cast(P.visit_occurrence_id as bigint) as visit_occurrence_id\r\nFROM\r\n(\r\n  select E.person_id, E.start_date, E.end_date,\r\n         row_number() OVER (PARTITION BY E.person_id ORDER BY E.sort_date ASC, E.event_id) ordinal,\r\n         OP.observation_period_start_date as op_start_date, OP.observation_period_end_date as op_end_date, cast(E.visit_occurrence_id as bigint) as visit_occurrence_id\r\n  FROM \r\n  (\r\n  -- Begin Drug Exposure Criteria\r\nselect C.person_id, C.drug_exposure_id as event_id, C.start_date, C.end_date,\r\n  C.visit_occurrence_id,C.start_date as sort_date\r\nfrom \r\n(\r\n  select de.person_id,de.drug_exposure_id,de.drug_concept_id,de.visit_occurrence_id,days_supply,quantity,refills,de.drug_exposure_start_date as start_date, COALESCE(de.drug_exposure_end_date, DATEADD(day,de.days_supply,de.drug_exposure_start_date), DATEADD(day,1,de.drug_exposure_start_date)) as end_date \r\n  FROM @cdm_database_schema.DRUG_EXPOSURE de\r\nJOIN #Codesets cs on (de.drug_concept_id = cs.concept_id and cs.codeset_id = 0)\r\n) C\r\n\r\n\r\n-- End Drug Exposure Criteria\r\n\r\n  ) E\r\n\tJOIN @cdm_database_schema.observation_period OP on E.person_id = OP.person_id and E.start_date >=  OP.observation_period_start_date and E.start_date <= op.observation_period_end_date\r\n  WHERE DATEADD(day,0,OP.OBSERVATION_PERIOD_START_DATE) <= E.START_DATE AND DATEADD(day,0,E.START_DATE) <= OP.OBSERVATION_PERIOD_END_DATE\r\n) P\r\nWHERE P.ordinal = 1\r\n-- End Primary Events\r\n) pe\r\n  \r\n) QE\r\n\r\n;\r\n\r\n--- Inclusion Rule Inserts\r\n\r\ncreate table #inclusion_events (inclusion_rule_id bigint,\n\tperson_id bigint,\n\tevent_id bigint\n);\r\n\r\nselect event_id, person_id, start_date, end_date, op_start_date, op_end_date\r\ninto #included_events\r\nFROM (\r\n  SELECT event_id, person_id, start_date, end_date, op_start_date, op_end_date, row_number() over (partition by person_id order by start_date ASC) as ordinal\r\n  from\r\n  (\r\n    select Q.event_id, Q.person_id, Q.start_date, Q.end_date, Q.op_start_date, Q.op_end_date, SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) as inclusion_rule_mask\r\n    from #qualified_events Q\r\n    LEFT JOIN #inclusion_events I on I.person_id = Q.person_id and I.event_id = Q.event_id\r\n    GROUP BY Q.event_id, Q.person_id, Q.start_date, Q.end_date, Q.op_start_date, Q.op_end_date\r\n  ) MG -- matching groups\r\n{0 != 0}?{\r\n  -- the matching group with all bits set ( POWER(2,# of inclusion rules) - 1 = inclusion_rule_mask\r\n  WHERE (MG.inclusion_rule_mask = POWER(cast(2 as bigint),0)-1)\r\n}\r\n) Results\r\nWHERE Results.ordinal = 1\r\n;\r\n\r\n-- custom era strategy\r\n\r\nwith ctePersons(person_id) as (\r\n\tselect distinct person_id from #included_events\r\n)\r\n\r\nselect person_id, drug_exposure_start_date, drug_exposure_end_date\r\nINTO #drugTarget\r\nFROM (\r\n\tselect de.PERSON_ID, DRUG_EXPOSURE_START_DATE, COALESCE(DRUG_EXPOSURE_END_DATE, DATEADD(day,DAYS_SUPPLY,DRUG_EXPOSURE_START_DATE), DATEADD(day,1,DRUG_EXPOSURE_START_DATE)) as DRUG_EXPOSURE_END_DATE \r\n\tFROM @cdm_database_schema.DRUG_EXPOSURE de\r\n\tJOIN ctePersons p on de.person_id = p.person_id\r\n\tJOIN #Codesets cs on cs.codeset_id = 0 AND de.drug_concept_id = cs.concept_id\r\n\r\n\tUNION ALL\r\n\r\n\tselect de.PERSON_ID, DRUG_EXPOSURE_START_DATE, COALESCE(DRUG_EXPOSURE_END_DATE, DATEADD(day,DAYS_SUPPLY,DRUG_EXPOSURE_START_DATE), DATEADD(day,1,DRUG_EXPOSURE_START_DATE)) as DRUG_EXPOSURE_END_DATE \r\n\tFROM @cdm_database_schema.DRUG_EXPOSURE de\r\n\tJOIN ctePersons p on de.person_id = p.person_id\r\n\tJOIN #Codesets cs on cs.codeset_id = 0 AND de.drug_source_concept_id = cs.concept_id\r\n) E\r\n;\r\n\r\nselect et.event_id, et.person_id, ERAS.era_end_date as end_date\r\nINTO #strategy_ends\r\nfrom #included_events et\r\nJOIN \r\n(\r\n\r\n  select person_id, min(start_date) as era_start_date, DATEADD(day,-1 * 0, max(end_date)) as era_end_date\r\n  from (\r\n    select person_id, start_date, end_date, sum(is_start) over (partition by person_id order by start_date, is_start desc rows unbounded preceding) group_idx\r\n    from (\r\n      select person_id, start_date, end_date, \r\n        case when max(end_date) over (partition by person_id order by start_date rows between unbounded preceding and 1 preceding) >= start_date then 0 else 1 end is_start\r\n      from (\r\n        select person_id, drug_exposure_start_date as start_date, DATEADD(day,(0 + 0),DRUG_EXPOSURE_END_DATE) as end_date\r\n        FROM #drugTarget\r\n      ) DT\r\n    ) ST\r\n  ) GR\r\n  group by person_id, group_idx\r\n) ERAS on ERAS.person_id = et.person_id \r\nWHERE et.start_date between ERAS.era_start_date and ERAS.era_end_date;\r\n\r\nTRUNCATE TABLE #drugTarget;\r\nDROP TABLE #drugTarget;\r\n\r\n\r\n-- generate cohort periods into #final_cohort\r\nselect person_id, start_date, end_date\r\nINTO #cohort_rows\r\nfrom ( -- first_ends\r\n\tselect F.person_id, F.start_date, F.end_date\r\n\tFROM (\r\n\t  select I.event_id, I.person_id, I.start_date, CE.end_date, row_number() over (partition by I.person_id, I.event_id order by CE.end_date) as ordinal\r\n\t  from #included_events I\r\n\t  join ( -- cohort_ends\r\n-- cohort exit dates\r\n-- By default, cohort exit at the event's op end date\nselect event_id, person_id, op_end_date as end_date from #included_events\nUNION ALL\n-- End Date Strategy\nSELECT event_id, person_id, end_date from #strategy_ends\n\r\n    ) CE on I.event_id = CE.event_id and I.person_id = CE.person_id and CE.end_date >= I.start_date\r\n\t) F\r\n\tWHERE F.ordinal = 1\r\n) FE;\r\n\r\n\r\nselect person_id, min(start_date) as start_date, DATEADD(day,-1 * 30, max(end_date)) as end_date\r\ninto #final_cohort\r\nfrom (\r\n  select person_id, start_date, end_date, sum(is_start) over (partition by person_id order by start_date, is_start desc rows unbounded preceding) group_idx\r\n  from (\r\n    select person_id, start_date, end_date, \r\n      case when max(end_date) over (partition by person_id order by start_date rows between unbounded preceding and 1 preceding) >= start_date then 0 else 1 end is_start\r\n    from (\r\n      select person_id, start_date, DATEADD(day,30,end_date) as end_date\r\n      from #cohort_rows\r\n    ) CR\r\n  ) ST\r\n) GR\r\ngroup by person_id, group_idx;\r\n\r\nDELETE FROM @target_database_schema.@target_cohort_table where cohort_definition_id = @target_cohort_id;\r\nINSERT INTO @target_database_schema.@target_cohort_table (cohort_definition_id, subject_id, cohort_start_date, cohort_end_date)\r\nselect @target_cohort_id as cohort_definition_id, person_id, start_date, end_date \nFROM #final_cohort CO\r\n;\r\n\r\n{0 != 0}?{\r\n-- BEGIN: Censored Stats\r\n\r\ndelete from @results_database_schema.cohort_censor_stats where cohort_definition_id = @target_cohort_id;\r\n\r\n-- END: Censored Stats\r\n}\r\n{0 != 0 & 0 != 0}?{\r\n\r\nCREATE TABLE #inclusion_rules (rule_sequence int);\r\n\r\n-- Find the event that is the 'best match' per person.  \r\n-- the 'best match' is defined as the event that satisfies the most inclusion rules.\r\n-- ties are solved by choosing the event that matches the earliest inclusion rule, and then earliest.\r\n\r\nselect q.person_id, q.event_id\r\ninto #best_events\r\nfrom #qualified_events Q\r\njoin (\r\n\tSELECT R.person_id, R.event_id, ROW_NUMBER() OVER (PARTITION BY R.person_id ORDER BY R.rule_count DESC,R.min_rule_id ASC, R.start_date ASC) AS rank_value\r\n\tFROM (\r\n\t\tSELECT Q.person_id, Q.event_id, COALESCE(COUNT(DISTINCT I.inclusion_rule_id), 0) AS rule_count, COALESCE(MIN(I.inclusion_rule_id), 0) AS min_rule_id, Q.start_date\r\n\t\tFROM #qualified_events Q\r\n\t\tLEFT JOIN #inclusion_events I ON q.person_id = i.person_id AND q.event_id = i.event_id\r\n\t\tGROUP BY Q.person_id, Q.event_id, Q.start_date\r\n\t) R\r\n) ranked on Q.person_id = ranked.person_id and Q.event_id = ranked.event_id\r\nWHERE ranked.rank_value = 1\r\n;\r\n\r\n-- modes of generation: (the same tables store the results for the different modes, identified by the mode_id column)\r\n-- 0: all events\r\n-- 1: best event\r\n\r\n\r\n-- BEGIN: Inclusion Impact Analysis - event\r\n-- calculte matching group counts\r\ndelete from @results_database_schema.cohort_inclusion_result where cohort_definition_id = @target_cohort_id and mode_id = 0;\r\ninsert into @results_database_schema.cohort_inclusion_result (cohort_definition_id, inclusion_rule_mask, person_count, mode_id)\r\nselect @target_cohort_id as cohort_definition_id, inclusion_rule_mask, count_big(*) as person_count, 0 as mode_id\r\nfrom\r\n(\r\n  select Q.person_id, Q.event_id, CAST(SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) AS bigint) as inclusion_rule_mask\r\n  from #qualified_events Q\r\n  LEFT JOIN #inclusion_events I on q.person_id = i.person_id and q.event_id = i.event_id\r\n  GROUP BY Q.person_id, Q.event_id\r\n) MG -- matching groups\r\ngroup by inclusion_rule_mask\r\n;\r\n\r\n-- calculate gain counts \r\ndelete from @results_database_schema.cohort_inclusion_stats where cohort_definition_id = @target_cohort_id and mode_id = 0;\r\ninsert into @results_database_schema.cohort_inclusion_stats (cohort_definition_id, rule_sequence, person_count, gain_count, person_total, mode_id)\r\nselect @target_cohort_id as cohort_definition_id, ir.rule_sequence, coalesce(T.person_count, 0) as person_count, coalesce(SR.person_count, 0) gain_count, EventTotal.total, 0 as mode_id\r\nfrom #inclusion_rules ir\r\nleft join\r\n(\r\n  select i.inclusion_rule_id, count_big(i.event_id) as person_count\r\n  from #qualified_events Q\r\n  JOIN #inclusion_events i on Q.person_id = I.person_id and Q.event_id = i.event_id\r\n  group by i.inclusion_rule_id\r\n) T on ir.rule_sequence = T.inclusion_rule_id\r\nCROSS JOIN (select count(*) as total_rules from #inclusion_rules) RuleTotal\r\nCROSS JOIN (select count_big(event_id) as total from #qualified_events) EventTotal\r\nLEFT JOIN @results_database_schema.cohort_inclusion_result SR on SR.mode_id = 0 AND SR.cohort_definition_id = @target_cohort_id AND (POWER(cast(2 as bigint),RuleTotal.total_rules) - POWER(cast(2 as bigint),ir.rule_sequence) - 1) = SR.inclusion_rule_mask -- POWER(2,rule count) - POWER(2,rule sequence) - 1 is the mask for 'all except this rule'\r\n;\r\n\r\n-- calculate totals\r\ndelete from @results_database_schema.cohort_summary_stats where cohort_definition_id = @target_cohort_id and mode_id = 0;\r\ninsert into @results_database_schema.cohort_summary_stats (cohort_definition_id, base_count, final_count, mode_id)\r\nselect @target_cohort_id as cohort_definition_id, PC.total as person_count, coalesce(FC.total, 0) as final_count, 0 as mode_id\r\nFROM\r\n(select count_big(event_id) as total from #qualified_events) PC,\r\n(select sum(sr.person_count) as total\r\n  from @results_database_schema.cohort_inclusion_result sr\r\n  CROSS JOIN (select count(*) as total_rules from #inclusion_rules) RuleTotal\r\n  where sr.mode_id = 0 and sr.cohort_definition_id = @target_cohort_id and sr.inclusion_rule_mask = POWER(cast(2 as bigint),RuleTotal.total_rules)-1\r\n) FC\r\n;\r\n\r\n-- END: Inclusion Impact Analysis - event\r\n\r\n-- BEGIN: Inclusion Impact Analysis - person\r\n-- calculte matching group counts\r\ndelete from @results_database_schema.cohort_inclusion_result where cohort_definition_id = @target_cohort_id and mode_id = 1;\r\ninsert into @results_database_schema.cohort_inclusion_result (cohort_definition_id, inclusion_rule_mask, person_count, mode_id)\r\nselect @target_cohort_id as cohort_definition_id, inclusion_rule_mask, count_big(*) as person_count, 1 as mode_id\r\nfrom\r\n(\r\n  select Q.person_id, Q.event_id, CAST(SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) AS bigint) as inclusion_rule_mask\r\n  from #best_events Q\r\n  LEFT JOIN #inclusion_events I on q.person_id = i.person_id and q.event_id = i.event_id\r\n  GROUP BY Q.person_id, Q.event_id\r\n) MG -- matching groups\r\ngroup by inclusion_rule_mask\r\n;\r\n\r\n-- calculate gain counts \r\ndelete from @results_database_schema.cohort_inclusion_stats where cohort_definition_id = @target_cohort_id and mode_id = 1;\r\ninsert into @results_database_schema.cohort_inclusion_stats (cohort_definition_id, rule_sequence, person_count, gain_count, person_total, mode_id)\r\nselect @target_cohort_id as cohort_definition_id, ir.rule_sequence, coalesce(T.person_count, 0) as person_count, coalesce(SR.person_count, 0) gain_count, EventTotal.total, 1 as mode_id\r\nfrom #inclusion_rules ir\r\nleft join\r\n(\r\n  select i.inclusion_rule_id, count_big(i.event_id) as person_count\r\n  from #best_events Q\r\n  JOIN #inclusion_events i on Q.person_id = I.person_id and Q.event_id = i.event_id\r\n  group by i.inclusion_rule_id\r\n) T on ir.rule_sequence = T.inclusion_rule_id\r\nCROSS JOIN (select count(*) as total_rules from #inclusion_rules) RuleTotal\r\nCROSS JOIN (select count_big(event_id) as total from #best_events) EventTotal\r\nLEFT JOIN @results_database_schema.cohort_inclusion_result SR on SR.mode_id = 1 AND SR.cohort_definition_id = @target_cohort_id AND (POWER(cast(2 as bigint),RuleTotal.total_rules) - POWER(cast(2 as bigint),ir.rule_sequence) - 1) = SR.inclusion_rule_mask -- POWER(2,rule count) - POWER(2,rule sequence) - 1 is the mask for 'all except this rule'\r\n;\r\n\r\n-- calculate totals\r\ndelete from @results_database_schema.cohort_summary_stats where cohort_definition_id = @target_cohort_id and mode_id = 1;\r\ninsert into @results_database_schema.cohort_summary_stats (cohort_definition_id, base_count, final_count, mode_id)\r\nselect @target_cohort_id as cohort_definition_id, PC.total as person_count, coalesce(FC.total, 0) as final_count, 1 as mode_id\r\nFROM\r\n(select count_big(event_id) as total from #best_events) PC,\r\n(select sum(sr.person_count) as total\r\n  from @results_database_schema.cohort_inclusion_result sr\r\n  CROSS JOIN (select count(*) as total_rules from #inclusion_rules) RuleTotal\r\n  where sr.mode_id = 1 and sr.cohort_definition_id = @target_cohort_id and sr.inclusion_rule_mask = POWER(cast(2 as bigint),RuleTotal.total_rules)-1\r\n) FC\r\n;\r\n\r\n-- END: Inclusion Impact Analysis - person\r\n\r\nTRUNCATE TABLE #best_events;\r\nDROP TABLE #best_events;\r\n\r\nTRUNCATE TABLE #inclusion_rules;\r\nDROP TABLE #inclusion_rules;\r\n}\r\n\r\nTRUNCATE TABLE #strategy_ends;\nDROP TABLE #strategy_ends;\n\r\n\r\nTRUNCATE TABLE #cohort_rows;\r\nDROP TABLE #cohort_rows;\r\n\r\nTRUNCATE TABLE #final_cohort;\r\nDROP TABLE #final_cohort;\r\n\r\nTRUNCATE TABLE #inclusion_events;\r\nDROP TABLE #inclusion_events;\r\n\r\nTRUNCATE TABLE #qualified_events;\r\nDROP TABLE #qualified_events;\r\n\r\nTRUNCATE TABLE #included_events;\r\nDROP TABLE #included_events;\r\n\r\nTRUNCATE TABLE #Codesets;\r\nDROP TABLE #Codesets;\r\n",
          "json": "{\r\n  \"ConceptSets\": [\r\n    {\r\n      \"id\": 0,\r\n      \"name\": \"[MVK] Penicillin V\",\r\n      \"expression\": {\r\n        \"items\": [\r\n          {\r\n            \"concept\": {\r\n              \"CONCEPT_CLASS_ID\": \"Ingredient\",\r\n              \"CONCEPT_CODE\": \"7984\",\r\n              \"CONCEPT_ID\": 1729720,\r\n              \"CONCEPT_NAME\": \"penicillin V\",\r\n              \"DOMAIN_ID\": \"Drug\",\r\n              \"INVALID_REASON\": \"V\",\r\n              \"INVALID_REASON_CAPTION\": \"Valid\",\r\n              \"STANDARD_CONCEPT\": \"S\",\r\n              \"STANDARD_CONCEPT_CAPTION\": \"Standard\",\r\n              \"VOCABULARY_ID\": \"RxNorm\"\r\n            },\r\n            \"includeDescendants\": true\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  ],\r\n  \"PrimaryCriteria\": {\r\n    \"CriteriaList\": [\r\n      {\r\n        \"DrugExposure\": {\r\n          \"CodesetId\": 0\r\n        }\r\n      }\r\n    ],\r\n    \"ObservationWindow\": {\r\n      \"PriorDays\": 0,\r\n      \"PostDays\": 0\r\n    },\r\n    \"PrimaryCriteriaLimit\": {\r\n      \"Type\": \"First\"\r\n    }\r\n  },\r\n  \"QualifiedLimit\": {\r\n    \"Type\": \"First\"\r\n  },\r\n  \"ExpressionLimit\": {\r\n    \"Type\": \"First\"\r\n  },\r\n  \"InclusionRules\": [],\r\n  \"EndStrategy\": {\r\n    \"CustomEra\": {\r\n      \"DrugCodesetId\": 0,\r\n      \"GapDays\": 0,\r\n      \"Offset\": 0\r\n    }\r\n  },\r\n  \"CensoringCriteria\": [],\r\n  \"CollapseSettings\": {\r\n    \"CollapseType\": \"ERA\",\r\n    \"EraPad\": 30\r\n  },\r\n  \"CensorWindow\": {},\r\n  \"cdmVersionRange\": \">=5.0.0\"\r\n}",
          "subsetParent": 10,
          "isSubset": false,
          "subsetDefinitionId": "NA"
        },
        {
          "cohortId": 11,
          "cohortName": "ViralSinusitis",
          "sql": "CREATE TABLE #Codesets (\r\n  codeset_id int NOT NULL,\r\n  concept_id bigint NOT NULL\r\n)\r\n;\r\n\r\nINSERT INTO #Codesets (codeset_id, concept_id)\nSELECT 0 as codeset_id, c.concept_id FROM (select distinct I.concept_id FROM\r\n( \r\n  select concept_id from @vocabulary_database_schema.CONCEPT where (concept_id in (40481087))\r\n\r\n) I\r\n) C UNION ALL \nSELECT 1 as codeset_id, c.concept_id FROM (select distinct I.concept_id FROM\r\n( \r\n  select concept_id from @vocabulary_database_schema.CONCEPT where (concept_id in (1125315,1713332,1112807,1759842,1729720,738818,738818,1119510,1177480,1118084,1115008,4306655))\r\n\r\n) I\r\n) C;\r\n\r\nUPDATE STATISTICS #Codesets;\r\n\r\n\r\nSELECT event_id, person_id, start_date, end_date, op_start_date, op_end_date, visit_occurrence_id\r\nINTO #qualified_events\r\nFROM \r\n(\r\n  select pe.event_id, pe.person_id, pe.start_date, pe.end_date, pe.op_start_date, pe.op_end_date, row_number() over (partition by pe.person_id order by pe.start_date ASC) as ordinal, cast(pe.visit_occurrence_id as bigint) as visit_occurrence_id\r\n  FROM (-- Begin Primary Events\r\nselect P.ordinal as event_id, P.person_id, P.start_date, P.end_date, op_start_date, op_end_date, cast(P.visit_occurrence_id as bigint) as visit_occurrence_id\r\nFROM\r\n(\r\n  select E.person_id, E.start_date, E.end_date,\r\n         row_number() OVER (PARTITION BY E.person_id ORDER BY E.sort_date ASC, E.event_id) ordinal,\r\n         OP.observation_period_start_date as op_start_date, OP.observation_period_end_date as op_end_date, cast(E.visit_occurrence_id as bigint) as visit_occurrence_id\r\n  FROM \r\n  (\r\n  -- Begin Drug Era Criteria\r\nselect C.person_id, C.drug_era_id as event_id, C.start_date, C.end_date,\r\n    CAST(NULL as bigint) as visit_occurrence_id,C.start_date as sort_date\r\nfrom \r\n(\r\n  select de.person_id,de.drug_era_id,de.drug_concept_id,de.drug_exposure_count,de.gap_days,de.drug_era_start_date as start_date, de.drug_era_end_date as end_date \r\n  FROM @cdm_database_schema.DRUG_ERA de\r\nwhere de.drug_concept_id in (SELECT concept_id from  #Codesets where codeset_id = 1)\r\n) C\r\n\r\n\r\n-- End Drug Era Criteria\r\n\r\n  ) E\r\n\tJOIN @cdm_database_schema.observation_period OP on E.person_id = OP.person_id and E.start_date >=  OP.observation_period_start_date and E.start_date <= op.observation_period_end_date\r\n  WHERE DATEADD(day,365,OP.OBSERVATION_PERIOD_START_DATE) <= E.START_DATE AND DATEADD(day,1095,E.START_DATE) <= OP.OBSERVATION_PERIOD_END_DATE\r\n) P\r\nWHERE P.ordinal = 1\r\n-- End Primary Events\r\n) pe\r\n  \r\n) QE\r\n\r\n;\r\n\r\n--- Inclusion Rule Inserts\r\n\r\nselect 0 as inclusion_rule_id, person_id, event_id\r\nINTO #Inclusion_0\r\nFROM \r\n(\r\n  select pe.person_id, pe.event_id\r\n  FROM #qualified_events pe\r\n  \nJOIN (\n-- Begin Criteria Group\r\nselect 0 as index_id, person_id, event_id\r\nFROM\r\n(\r\n  select E.person_id, E.event_id \r\n  FROM #qualified_events E\r\n  INNER JOIN\r\n  (\r\n    -- Begin Correlated Criteria\r\nselect 0 as index_id, cc.person_id, cc.event_id\r\nfrom (SELECT p.person_id, p.event_id \r\nFROM #qualified_events P\r\nJOIN (\r\n  -- Begin Condition Occurrence Criteria\r\nSELECT C.person_id, C.condition_occurrence_id as event_id, C.start_date, C.end_date,\r\n  C.visit_occurrence_id, C.start_date as sort_date\r\nFROM \r\n(\r\n  SELECT co.person_id,co.condition_occurrence_id,co.condition_concept_id,co.visit_occurrence_id,co.condition_start_date as start_date, COALESCE(co.condition_end_date, DATEADD(day,1,co.condition_start_date)) as end_date \r\n  FROM @cdm_database_schema.CONDITION_OCCURRENCE co\r\n  JOIN #Codesets cs on (co.condition_concept_id = cs.concept_id and cs.codeset_id = 0)\r\n) C\r\n\r\n\r\n-- End Condition Occurrence Criteria\r\n\r\n) A on A.person_id = P.person_id  ) cc \r\nGROUP BY cc.person_id, cc.event_id\r\nHAVING COUNT(cc.event_id) >= 1\r\n-- End Correlated Criteria\r\n\r\n  ) CQ on E.person_id = CQ.person_id and E.event_id = CQ.event_id\r\n  GROUP BY E.person_id, E.event_id\r\n  HAVING COUNT(index_id) = 1\r\n) G\r\n-- End Criteria Group\r\n) AC on AC.person_id = pe.person_id AND AC.event_id = pe.event_id\r\n) Results\r\n;\r\n\nselect 1 as inclusion_rule_id, person_id, event_id\r\nINTO #Inclusion_1\r\nFROM \r\n(\r\n  select pe.person_id, pe.event_id\r\n  FROM #qualified_events pe\r\n  \nJOIN (\n-- Begin Criteria Group\r\nselect 0 as index_id, person_id, event_id\r\nFROM\r\n(\r\n  select E.person_id, E.event_id \r\n  FROM #qualified_events E\r\n  INNER JOIN\r\n  (\r\n    -- Begin Demographic Criteria\r\nSELECT 0 as index_id, e.person_id, e.event_id\r\nFROM #qualified_events E\r\nJOIN @cdm_database_schema.PERSON P ON P.PERSON_ID = E.PERSON_ID\r\nWHERE E.start_date > DATEFROMPARTS(1949, 12, 31)\r\nGROUP BY e.person_id, e.event_id\r\n-- End Demographic Criteria\r\n\r\n  ) CQ on E.person_id = CQ.person_id and E.event_id = CQ.event_id\r\n  GROUP BY E.person_id, E.event_id\r\n  HAVING COUNT(index_id) = 1\r\n) G\r\n-- End Criteria Group\r\n) AC on AC.person_id = pe.person_id AND AC.event_id = pe.event_id\r\n) Results\r\n;\r\n\nSELECT inclusion_rule_id, person_id, event_id\nINTO #inclusion_events\nFROM (select inclusion_rule_id, person_id, event_id from #Inclusion_0\nUNION ALL\nselect inclusion_rule_id, person_id, event_id from #Inclusion_1) I;\nTRUNCATE TABLE #Inclusion_0;\nDROP TABLE #Inclusion_0;\n\nTRUNCATE TABLE #Inclusion_1;\nDROP TABLE #Inclusion_1;\n\r\n\r\nselect event_id, person_id, start_date, end_date, op_start_date, op_end_date\r\ninto #included_events\r\nFROM (\r\n  SELECT event_id, person_id, start_date, end_date, op_start_date, op_end_date, row_number() over (partition by person_id order by start_date ASC) as ordinal\r\n  from\r\n  (\r\n    select Q.event_id, Q.person_id, Q.start_date, Q.end_date, Q.op_start_date, Q.op_end_date, SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) as inclusion_rule_mask\r\n    from #qualified_events Q\r\n    LEFT JOIN #inclusion_events I on I.person_id = Q.person_id and I.event_id = Q.event_id\r\n    GROUP BY Q.event_id, Q.person_id, Q.start_date, Q.end_date, Q.op_start_date, Q.op_end_date\r\n  ) MG -- matching groups\r\n{2 != 0}?{\r\n  -- the matching group with all bits set ( POWER(2,# of inclusion rules) - 1 = inclusion_rule_mask\r\n  WHERE (MG.inclusion_rule_mask = POWER(cast(2 as bigint),2)-1)\r\n}\r\n) Results\r\nWHERE Results.ordinal = 1\r\n;\r\n\r\n\r\n\r\n-- generate cohort periods into #final_cohort\r\nselect person_id, start_date, end_date\r\nINTO #cohort_rows\r\nfrom ( -- first_ends\r\n\tselect F.person_id, F.start_date, F.end_date\r\n\tFROM (\r\n\t  select I.event_id, I.person_id, I.start_date, CE.end_date, row_number() over (partition by I.person_id, I.event_id order by CE.end_date) as ordinal\r\n\t  from #included_events I\r\n\t  join ( -- cohort_ends\r\n-- cohort exit dates\r\n-- By default, cohort exit at the event's op end date\nselect event_id, person_id, op_end_date as end_date from #included_events\r\n    ) CE on I.event_id = CE.event_id and I.person_id = CE.person_id and CE.end_date >= I.start_date\r\n\t) F\r\n\tWHERE F.ordinal = 1\r\n) FE;\r\n\r\n\r\nselect person_id, min(start_date) as start_date, DATEADD(day,-1 * 0, max(end_date)) as end_date\r\ninto #final_cohort\r\nfrom (\r\n  select person_id, start_date, end_date, sum(is_start) over (partition by person_id order by start_date, is_start desc rows unbounded preceding) group_idx\r\n  from (\r\n    select person_id, start_date, end_date, \r\n      case when max(end_date) over (partition by person_id order by start_date rows between unbounded preceding and 1 preceding) >= start_date then 0 else 1 end is_start\r\n    from (\r\n      select person_id, start_date, DATEADD(day,0,end_date) as end_date\r\n      from #cohort_rows\r\n    ) CR\r\n  ) ST\r\n) GR\r\ngroup by person_id, group_idx;\r\n\r\nDELETE FROM @target_database_schema.@target_cohort_table where cohort_definition_id = @target_cohort_id;\r\nINSERT INTO @target_database_schema.@target_cohort_table (cohort_definition_id, subject_id, cohort_start_date, cohort_end_date)\r\nselect @target_cohort_id as cohort_definition_id, person_id, start_date, end_date \nFROM #final_cohort CO\r\n;\r\n\r\n{0 != 0}?{\r\n-- BEGIN: Censored Stats\r\n\r\ndelete from @results_database_schema.cohort_censor_stats where cohort_definition_id = @target_cohort_id;\r\n\r\n-- END: Censored Stats\r\n}\r\n{0 != 0 & 2 != 0}?{\r\n\r\n-- Create a temp table of inclusion rule rows for joining in the inclusion rule impact analysis\r\n\r\nselect cast(rule_sequence as int) as rule_sequence\r\ninto #inclusion_rules\r\nfrom (\r\n  SELECT CAST(0 as int) as rule_sequence UNION ALL SELECT CAST(1 as int) as rule_sequence\r\n) IR;\r\n\r\n\r\n-- Find the event that is the 'best match' per person.  \r\n-- the 'best match' is defined as the event that satisfies the most inclusion rules.\r\n-- ties are solved by choosing the event that matches the earliest inclusion rule, and then earliest.\r\n\r\nselect q.person_id, q.event_id\r\ninto #best_events\r\nfrom #qualified_events Q\r\njoin (\r\n\tSELECT R.person_id, R.event_id, ROW_NUMBER() OVER (PARTITION BY R.person_id ORDER BY R.rule_count DESC,R.min_rule_id ASC, R.start_date ASC) AS rank_value\r\n\tFROM (\r\n\t\tSELECT Q.person_id, Q.event_id, COALESCE(COUNT(DISTINCT I.inclusion_rule_id), 0) AS rule_count, COALESCE(MIN(I.inclusion_rule_id), 0) AS min_rule_id, Q.start_date\r\n\t\tFROM #qualified_events Q\r\n\t\tLEFT JOIN #inclusion_events I ON q.person_id = i.person_id AND q.event_id = i.event_id\r\n\t\tGROUP BY Q.person_id, Q.event_id, Q.start_date\r\n\t) R\r\n) ranked on Q.person_id = ranked.person_id and Q.event_id = ranked.event_id\r\nWHERE ranked.rank_value = 1\r\n;\r\n\r\n-- modes of generation: (the same tables store the results for the different modes, identified by the mode_id column)\r\n-- 0: all events\r\n-- 1: best event\r\n\r\n\r\n-- BEGIN: Inclusion Impact Analysis - event\r\n-- calculte matching group counts\r\ndelete from @results_database_schema.cohort_inclusion_result where cohort_definition_id = @target_cohort_id and mode_id = 0;\r\ninsert into @results_database_schema.cohort_inclusion_result (cohort_definition_id, inclusion_rule_mask, person_count, mode_id)\r\nselect @target_cohort_id as cohort_definition_id, inclusion_rule_mask, count_big(*) as person_count, 0 as mode_id\r\nfrom\r\n(\r\n  select Q.person_id, Q.event_id, CAST(SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) AS bigint) as inclusion_rule_mask\r\n  from #qualified_events Q\r\n  LEFT JOIN #inclusion_events I on q.person_id = i.person_id and q.event_id = i.event_id\r\n  GROUP BY Q.person_id, Q.event_id\r\n) MG -- matching groups\r\ngroup by inclusion_rule_mask\r\n;\r\n\r\n-- calculate gain counts \r\ndelete from @results_database_schema.cohort_inclusion_stats where cohort_definition_id = @target_cohort_id and mode_id = 0;\r\ninsert into @results_database_schema.cohort_inclusion_stats (cohort_definition_id, rule_sequence, person_count, gain_count, person_total, mode_id)\r\nselect @target_cohort_id as cohort_definition_id, ir.rule_sequence, coalesce(T.person_count, 0) as person_count, coalesce(SR.person_count, 0) gain_count, EventTotal.total, 0 as mode_id\r\nfrom #inclusion_rules ir\r\nleft join\r\n(\r\n  select i.inclusion_rule_id, count_big(i.event_id) as person_count\r\n  from #qualified_events Q\r\n  JOIN #inclusion_events i on Q.person_id = I.person_id and Q.event_id = i.event_id\r\n  group by i.inclusion_rule_id\r\n) T on ir.rule_sequence = T.inclusion_rule_id\r\nCROSS JOIN (select count(*) as total_rules from #inclusion_rules) RuleTotal\r\nCROSS JOIN (select count_big(event_id) as total from #qualified_events) EventTotal\r\nLEFT JOIN @results_database_schema.cohort_inclusion_result SR on SR.mode_id = 0 AND SR.cohort_definition_id = @target_cohort_id AND (POWER(cast(2 as bigint),RuleTotal.total_rules) - POWER(cast(2 as bigint),ir.rule_sequence) - 1) = SR.inclusion_rule_mask -- POWER(2,rule count) - POWER(2,rule sequence) - 1 is the mask for 'all except this rule'\r\n;\r\n\r\n-- calculate totals\r\ndelete from @results_database_schema.cohort_summary_stats where cohort_definition_id = @target_cohort_id and mode_id = 0;\r\ninsert into @results_database_schema.cohort_summary_stats (cohort_definition_id, base_count, final_count, mode_id)\r\nselect @target_cohort_id as cohort_definition_id, PC.total as person_count, coalesce(FC.total, 0) as final_count, 0 as mode_id\r\nFROM\r\n(select count_big(event_id) as total from #qualified_events) PC,\r\n(select sum(sr.person_count) as total\r\n  from @results_database_schema.cohort_inclusion_result sr\r\n  CROSS JOIN (select count(*) as total_rules from #inclusion_rules) RuleTotal\r\n  where sr.mode_id = 0 and sr.cohort_definition_id = @target_cohort_id and sr.inclusion_rule_mask = POWER(cast(2 as bigint),RuleTotal.total_rules)-1\r\n) FC\r\n;\r\n\r\n-- END: Inclusion Impact Analysis - event\r\n\r\n-- BEGIN: Inclusion Impact Analysis - person\r\n-- calculte matching group counts\r\ndelete from @results_database_schema.cohort_inclusion_result where cohort_definition_id = @target_cohort_id and mode_id = 1;\r\ninsert into @results_database_schema.cohort_inclusion_result (cohort_definition_id, inclusion_rule_mask, person_count, mode_id)\r\nselect @target_cohort_id as cohort_definition_id, inclusion_rule_mask, count_big(*) as person_count, 1 as mode_id\r\nfrom\r\n(\r\n  select Q.person_id, Q.event_id, CAST(SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) AS bigint) as inclusion_rule_mask\r\n  from #best_events Q\r\n  LEFT JOIN #inclusion_events I on q.person_id = i.person_id and q.event_id = i.event_id\r\n  GROUP BY Q.person_id, Q.event_id\r\n) MG -- matching groups\r\ngroup by inclusion_rule_mask\r\n;\r\n\r\n-- calculate gain counts \r\ndelete from @results_database_schema.cohort_inclusion_stats where cohort_definition_id = @target_cohort_id and mode_id = 1;\r\ninsert into @results_database_schema.cohort_inclusion_stats (cohort_definition_id, rule_sequence, person_count, gain_count, person_total, mode_id)\r\nselect @target_cohort_id as cohort_definition_id, ir.rule_sequence, coalesce(T.person_count, 0) as person_count, coalesce(SR.person_count, 0) gain_count, EventTotal.total, 1 as mode_id\r\nfrom #inclusion_rules ir\r\nleft join\r\n(\r\n  select i.inclusion_rule_id, count_big(i.event_id) as person_count\r\n  from #best_events Q\r\n  JOIN #inclusion_events i on Q.person_id = I.person_id and Q.event_id = i.event_id\r\n  group by i.inclusion_rule_id\r\n) T on ir.rule_sequence = T.inclusion_rule_id\r\nCROSS JOIN (select count(*) as total_rules from #inclusion_rules) RuleTotal\r\nCROSS JOIN (select count_big(event_id) as total from #best_events) EventTotal\r\nLEFT JOIN @results_database_schema.cohort_inclusion_result SR on SR.mode_id = 1 AND SR.cohort_definition_id = @target_cohort_id AND (POWER(cast(2 as bigint),RuleTotal.total_rules) - POWER(cast(2 as bigint),ir.rule_sequence) - 1) = SR.inclusion_rule_mask -- POWER(2,rule count) - POWER(2,rule sequence) - 1 is the mask for 'all except this rule'\r\n;\r\n\r\n-- calculate totals\r\ndelete from @results_database_schema.cohort_summary_stats where cohort_definition_id = @target_cohort_id and mode_id = 1;\r\ninsert into @results_database_schema.cohort_summary_stats (cohort_definition_id, base_count, final_count, mode_id)\r\nselect @target_cohort_id as cohort_definition_id, PC.total as person_count, coalesce(FC.total, 0) as final_count, 1 as mode_id\r\nFROM\r\n(select count_big(event_id) as total from #best_events) PC,\r\n(select sum(sr.person_count) as total\r\n  from @results_database_schema.cohort_inclusion_result sr\r\n  CROSS JOIN (select count(*) as total_rules from #inclusion_rules) RuleTotal\r\n  where sr.mode_id = 1 and sr.cohort_definition_id = @target_cohort_id and sr.inclusion_rule_mask = POWER(cast(2 as bigint),RuleTotal.total_rules)-1\r\n) FC\r\n;\r\n\r\n-- END: Inclusion Impact Analysis - person\r\n\r\nTRUNCATE TABLE #best_events;\r\nDROP TABLE #best_events;\r\n\r\nTRUNCATE TABLE #inclusion_rules;\r\nDROP TABLE #inclusion_rules;\r\n}\r\n\r\n\r\n\r\nTRUNCATE TABLE #cohort_rows;\r\nDROP TABLE #cohort_rows;\r\n\r\nTRUNCATE TABLE #final_cohort;\r\nDROP TABLE #final_cohort;\r\n\r\nTRUNCATE TABLE #inclusion_events;\r\nDROP TABLE #inclusion_events;\r\n\r\nTRUNCATE TABLE #qualified_events;\r\nDROP TABLE #qualified_events;\r\n\r\nTRUNCATE TABLE #included_events;\r\nDROP TABLE #included_events;\r\n\r\nTRUNCATE TABLE #Codesets;\r\nDROP TABLE #Codesets;\r\n",
          "json": "{\r\n  \"ConceptSets\": [\r\n    {\r\n      \"id\": 0,\r\n      \"name\": \"[MVK] Viral Sinusitis diagnosis\",\r\n      \"expression\": {\r\n        \"items\": [\r\n          {\r\n            \"concept\": {\r\n              \"CONCEPT_CLASS_ID\": \"Clinical Finding\",\r\n              \"CONCEPT_CODE\": \"444814009\",\r\n              \"CONCEPT_ID\": 40481087,\r\n              \"CONCEPT_NAME\": \"Viral sinusitis\",\r\n              \"DOMAIN_ID\": \"Condition\",\r\n              \"INVALID_REASON\": \"V\",\r\n              \"INVALID_REASON_CAPTION\": \"Valid\",\r\n              \"STANDARD_CONCEPT\": \"S\",\r\n              \"STANDARD_CONCEPT_CAPTION\": \"Standard\",\r\n              \"VOCABULARY_ID\": \"SNOMED\"\r\n            }\r\n          }\r\n        ]\r\n      }\r\n    },\r\n    {\r\n      \"id\": 1,\r\n      \"name\": \"[MVK] Viral Sinusistis drugs\",\r\n      \"expression\": {\r\n        \"items\": [\r\n          {\r\n            \"concept\": {\r\n              \"CONCEPT_CLASS_ID\": \"Ingredient\",\r\n              \"CONCEPT_CODE\": \"161\",\r\n              \"CONCEPT_ID\": 1125315,\r\n              \"CONCEPT_NAME\": \"acetaminophen\",\r\n              \"DOMAIN_ID\": \"Drug\",\r\n              \"INVALID_REASON\": \"V\",\r\n              \"INVALID_REASON_CAPTION\": \"Valid\",\r\n              \"STANDARD_CONCEPT\": \"S\",\r\n              \"STANDARD_CONCEPT_CAPTION\": \"Standard\",\r\n              \"VOCABULARY_ID\": \"RxNorm\"\r\n            }\r\n          },\r\n          {\r\n            \"concept\": {\r\n              \"CONCEPT_CLASS_ID\": \"Ingredient\",\r\n              \"CONCEPT_CODE\": \"723\",\r\n              \"CONCEPT_ID\": 1713332,\r\n              \"CONCEPT_NAME\": \"amoxicillin\",\r\n              \"DOMAIN_ID\": \"Drug\",\r\n              \"INVALID_REASON\": \"V\",\r\n              \"INVALID_REASON_CAPTION\": \"Valid\",\r\n              \"STANDARD_CONCEPT\": \"S\",\r\n              \"STANDARD_CONCEPT_CAPTION\": \"Standard\",\r\n              \"VOCABULARY_ID\": \"RxNorm\"\r\n            }\r\n          },\r\n          {\r\n            \"concept\": {\r\n              \"CONCEPT_CLASS_ID\": \"Ingredient\",\r\n              \"CONCEPT_CODE\": \"1191\",\r\n              \"CONCEPT_ID\": 1112807,\r\n              \"CONCEPT_NAME\": \"aspirin\",\r\n              \"DOMAIN_ID\": \"Drug\",\r\n              \"INVALID_REASON\": \"V\",\r\n              \"INVALID_REASON_CAPTION\": \"Valid\",\r\n              \"STANDARD_CONCEPT\": \"S\",\r\n              \"STANDARD_CONCEPT_CAPTION\": \"Standard\",\r\n              \"VOCABULARY_ID\": \"RxNorm\"\r\n            }\r\n          },\r\n          {\r\n            \"concept\": {\r\n              \"CONCEPT_CLASS_ID\": \"Ingredient\",\r\n              \"CONCEPT_CODE\": \"48203\",\r\n              \"CONCEPT_ID\": 1759842,\r\n              \"CONCEPT_NAME\": \"clavulanate\",\r\n              \"DOMAIN_ID\": \"Drug\",\r\n              \"INVALID_REASON\": \"V\",\r\n              \"INVALID_REASON_CAPTION\": \"Valid\",\r\n              \"STANDARD_CONCEPT\": \"S\",\r\n              \"STANDARD_CONCEPT_CAPTION\": \"Standard\",\r\n              \"VOCABULARY_ID\": \"RxNorm\"\r\n            }\r\n          },\r\n          {\r\n            \"concept\": {\r\n              \"CONCEPT_CLASS_ID\": \"Ingredient\",\r\n              \"CONCEPT_CODE\": \"7984\",\r\n              \"CONCEPT_ID\": 1729720,\r\n              \"CONCEPT_NAME\": \"penicillin V\",\r\n              \"DOMAIN_ID\": \"Drug\",\r\n              \"INVALID_REASON\": \"V\",\r\n              \"INVALID_REASON_CAPTION\": \"Valid\",\r\n              \"STANDARD_CONCEPT\": \"S\",\r\n              \"STANDARD_CONCEPT_CAPTION\": \"Standard\",\r\n              \"VOCABULARY_ID\": \"RxNorm\"\r\n            }\r\n          },\r\n          {\r\n            \"concept\": {\r\n              \"CONCEPT_CLASS_ID\": \"Ingredient\",\r\n              \"CONCEPT_CODE\": \"3642\",\r\n              \"CONCEPT_ID\": 738818,\r\n              \"CONCEPT_NAME\": \"doxylamine\",\r\n              \"DOMAIN_ID\": \"Drug\",\r\n              \"INVALID_REASON\": \"V\",\r\n              \"INVALID_REASON_CAPTION\": \"Valid\",\r\n              \"STANDARD_CONCEPT\": \"S\",\r\n              \"STANDARD_CONCEPT_CAPTION\": \"Standard\",\r\n              \"VOCABULARY_ID\": \"RxNorm\"\r\n            }\r\n          },\r\n          {\r\n            \"concept\": {\r\n              \"CONCEPT_CLASS_ID\": \"Ingredient\",\r\n              \"CONCEPT_CODE\": \"3642\",\r\n              \"CONCEPT_ID\": 738818,\r\n              \"CONCEPT_NAME\": \"doxylamine\",\r\n              \"DOMAIN_ID\": \"Drug\",\r\n              \"INVALID_REASON\": \"V\",\r\n              \"INVALID_REASON_CAPTION\": \"Valid\",\r\n              \"STANDARD_CONCEPT\": \"S\",\r\n              \"STANDARD_CONCEPT_CAPTION\": \"Standard\",\r\n              \"VOCABULARY_ID\": \"RxNorm\"\r\n            }\r\n          },\r\n          {\r\n            \"concept\": {\r\n              \"CONCEPT_CLASS_ID\": \"Ingredient\",\r\n              \"CONCEPT_CODE\": \"3289\",\r\n              \"CONCEPT_ID\": 1119510,\r\n              \"CONCEPT_NAME\": \"dextromethorphan\",\r\n              \"DOMAIN_ID\": \"Drug\",\r\n              \"INVALID_REASON\": \"V\",\r\n              \"INVALID_REASON_CAPTION\": \"Valid\",\r\n              \"STANDARD_CONCEPT\": \"S\",\r\n              \"STANDARD_CONCEPT_CAPTION\": \"Standard\",\r\n              \"VOCABULARY_ID\": \"RxNorm\"\r\n            }\r\n          },\r\n          {\r\n            \"concept\": {\r\n              \"CONCEPT_CLASS_ID\": \"Ingredient\",\r\n              \"CONCEPT_CODE\": \"5640\",\r\n              \"CONCEPT_ID\": 1177480,\r\n              \"CONCEPT_NAME\": \"ibuprofen\",\r\n              \"DOMAIN_ID\": \"Drug\",\r\n              \"INVALID_REASON\": \"V\",\r\n              \"INVALID_REASON_CAPTION\": \"Valid\",\r\n              \"STANDARD_CONCEPT\": \"S\",\r\n              \"STANDARD_CONCEPT_CAPTION\": \"Standard\",\r\n              \"VOCABULARY_ID\": \"RxNorm\"\r\n            }\r\n          },\r\n          {\r\n            \"concept\": {\r\n              \"CONCEPT_CLASS_ID\": \"Ingredient\",\r\n              \"CONCEPT_CODE\": \"140587\",\r\n              \"CONCEPT_ID\": 1118084,\r\n              \"CONCEPT_NAME\": \"celecoxib\",\r\n              \"DOMAIN_ID\": \"Drug\",\r\n              \"INVALID_REASON\": \"V\",\r\n              \"INVALID_REASON_CAPTION\": \"Valid\",\r\n              \"STANDARD_CONCEPT\": \"S\",\r\n              \"STANDARD_CONCEPT_CAPTION\": \"Standard\",\r\n              \"VOCABULARY_ID\": \"RxNorm\"\r\n            }\r\n          },\r\n          {\r\n            \"concept\": {\r\n              \"CONCEPT_CLASS_ID\": \"Ingredient\",\r\n              \"CONCEPT_CODE\": \"7258\",\r\n              \"CONCEPT_ID\": 1115008,\r\n              \"CONCEPT_NAME\": \"naproxen\",\r\n              \"DOMAIN_ID\": \"Drug\",\r\n              \"INVALID_REASON\": \"V\",\r\n              \"INVALID_REASON_CAPTION\": \"Valid\",\r\n              \"STANDARD_CONCEPT\": \"S\",\r\n              \"STANDARD_CONCEPT_CAPTION\": \"Standard\",\r\n              \"VOCABULARY_ID\": \"RxNorm\"\r\n            }\r\n          },\r\n          {\r\n            \"concept\": {\r\n              \"CONCEPT_CLASS_ID\": \"Event\",\r\n              \"CONCEPT_CODE\": \"419620001\",\r\n              \"CONCEPT_ID\": 4306655,\r\n              \"CONCEPT_NAME\": \"Death\",\r\n              \"DOMAIN_ID\": \"Observation\",\r\n              \"INVALID_REASON\": \"V\",\r\n              \"INVALID_REASON_CAPTION\": \"Valid\",\r\n              \"STANDARD_CONCEPT\": \"S\",\r\n              \"STANDARD_CONCEPT_CAPTION\": \"Standard\",\r\n              \"VOCABULARY_ID\": \"SNOMED\",\r\n              \"VALID_START_DATE\": \"2006-01-31\",\r\n              \"VALID_END_DATE\": \"2099-12-31\"\r\n            }\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  ],\r\n  \"PrimaryCriteria\": {\r\n    \"CriteriaList\": [\r\n      {\r\n        \"DrugEra\": {\r\n          \"CodesetId\": 1\r\n        }\r\n      }\r\n    ],\r\n    \"ObservationWindow\": {\r\n      \"PriorDays\": 365,\r\n      \"PostDays\": 1095\r\n    },\r\n    \"PrimaryCriteriaLimit\": {\r\n      \"Type\": \"First\"\r\n    }\r\n  },\r\n  \"QualifiedLimit\": {\r\n    \"Type\": \"First\"\r\n  },\r\n  \"ExpressionLimit\": {\r\n    \"Type\": \"First\"\r\n  },\r\n  \"InclusionRules\": [\r\n    {\r\n      \"name\": \"Viral Sinusitis diagnosis\",\r\n      \"expression\": {\r\n        \"Type\": \"ALL\",\r\n        \"CriteriaList\": [\r\n          {\r\n            \"Criteria\": {\r\n              \"ConditionOccurrence\": {\r\n                \"CodesetId\": 0\r\n              }\r\n            },\r\n            \"StartWindow\": {\r\n              \"Start\": {\r\n                \"Coeff\": -1\r\n              },\r\n              \"End\": {\r\n                \"Coeff\": 1\r\n              },\r\n              \"UseEventEnd\": false\r\n            },\r\n            \"IgnoreObservationPeriod\": true,\r\n            \"Occurrence\": {\r\n              \"Type\": 2,\r\n              \"Count\": 1\r\n            }\r\n          }\r\n        ],\r\n        \"DemographicCriteriaList\": [],\r\n        \"Groups\": []\r\n      }\r\n    },\r\n    {\r\n      \"name\": \"Index year\",\r\n      \"expression\": {\r\n        \"Type\": \"ALL\",\r\n        \"CriteriaList\": [],\r\n        \"DemographicCriteriaList\": [\r\n          {\r\n            \"OccurrenceStartDate\": {\r\n              \"Value\": \"1949-12-31\",\r\n              \"Op\": \"gt\"\r\n            }\r\n          }\r\n        ],\r\n        \"Groups\": []\r\n      }\r\n    }\r\n  ],\r\n  \"CensoringCriteria\": [],\r\n  \"CollapseSettings\": {\r\n    \"CollapseType\": \"ERA\",\r\n    \"EraPad\": 0\r\n  },\r\n  \"CensorWindow\": {},\r\n  \"cdmVersionRange\": \">=5.0.0\"\r\n}",
          "subsetParent": 11,
          "isSubset": false,
          "subsetDefinitionId": "NA"
        }
      ],
      "subsetDefs": [
        "{\n  \"name\": \"age 18 to 64\",\n  \"definitionId\": 1,\n  \"subsetOperators\": [\n    {\n      \"name\": \"Age 18 to 64\",\n      \"subsetType\": \"DemographicSubsetOperator\",\n      \"ageMin\": 18,\n      \"ageMax\": 64\n    }\n  ],\n  \"packageVersion\": \"0.11.2\",\n  \"identifierExpression\": \"targetId * 1000 + definitionId\",\n  \"operatorNameConcatString\": \", \",\n  \"subsetCohortNameTemplate\": \"@baseCohortName - @subsetDefinitionName @operatorNames\"\n}",
        "{\n  \"name\": \"first event with 365 prior obs\",\n  \"definitionId\": 2,\n  \"subsetOperators\": [\n    {\n      \"name\": \"first event with 365 prior obs\",\n      \"subsetType\": \"LimitSubsetOperator\",\n      \"priorTime\": 365,\n      \"followUpTime\": 0,\n      \"limitTo\": \"firstEver\"\n    }\n  ],\n  \"packageVersion\": \"0.11.2\",\n  \"identifierExpression\": \"targetId * 1000 + definitionId\",\n  \"operatorNameConcatString\": \", \",\n  \"subsetCohortNameTemplate\": \"@baseCohortName - @subsetDefinitionName @operatorNames\"\n}",
        "{\n  \"name\": \"age 18 to 64 and first event with 365 prior obs\",\n  \"definitionId\": 3,\n  \"subsetOperators\": [\n    {\n      \"name\": \"Age 18 to 64\",\n      \"subsetType\": \"DemographicSubsetOperator\",\n      \"ageMin\": 18,\n      \"ageMax\": 64\n    },\n    {\n      \"name\": \"first event with 365 prior obs\",\n      \"subsetType\": \"LimitSubsetOperator\",\n      \"priorTime\": 365,\n      \"followUpTime\": 0,\n      \"limitTo\": \"firstEver\"\n    }\n  ],\n  \"packageVersion\": \"0.11.2\",\n  \"identifierExpression\": \"targetId * 1000 + definitionId\",\n  \"operatorNameConcatString\": \", \",\n  \"subsetCohortNameTemplate\": \"@baseCohortName - @subsetDefinitionName @operatorNames\"\n}"
      ],
      "cohortSubsets": [
        {
          "cohortId": 1001,
          "subsetId": 1,
          "targetCohortId": 1
        },
        {
          "cohortId": 2001,
          "subsetId": 1,
          "targetCohortId": 2
        },
        {
          "cohortId": 1002,
          "subsetId": 2,
          "targetCohortId": 1
        },
        {
          "cohortId": 2002,
          "subsetId": 2,
          "targetCohortId": 2
        },
        {
          "cohortId": 1003,
          "subsetId": 3,
          "targetCohortId": 1
        },
        {
          "cohortId": 2003,
          "subsetId": 3,
          "targetCohortId": 2
        }
      ],
      "attr_class": ["CohortDefinitionSharedResources", "SharedResources"]
    },
    {
      "negativeControlOutcomes": {
        "negativeControlOutcomeCohortSet": [
          {
            "cohortId": "10037",
            "cohortName": "Concussion with loss of consciousness",
            "outcomeConceptId": "  375671"
          },
          {
            "cohortId": "10038",
            "cohortName": "Child attention deficit disorder",
            "outcomeConceptId": "  440086"
          },
          {
            "cohortId": "10039",
            "cohortName": "Urinary tract infection caused by Escherichia coli",
            "outcomeConceptId": " 4116491"
          },
          {
            "cohortId": "10040",
            "cohortName": "Anemia",
            "outcomeConceptId": "  439777"
          },
          {
            "cohortId": "10041",
            "cohortName": "Coronary arteriosclerosis",
            "outcomeConceptId": "  317576"
          },
          {
            "cohortId": "10042",
            "cohortName": "Cardiac arrest",
            "outcomeConceptId": "  321042"
          },
          {
            "cohortId": "10043",
            "cohortName": "Atrial fibrillation",
            "outcomeConceptId": "  313217"
          },
          {
            "cohortId": "10044",
            "cohortName": "Alzheimer's disease",
            "outcomeConceptId": "  378419"
          },
          {
            "cohortId": "10046",
            "cohortName": "Viral sinusitis",
            "outcomeConceptId": "40481087"
          },
          {
            "cohortId": "10047",
            "cohortName": "Myocardial infarction",
            "outcomeConceptId": " 4329847"
          },
          {
            "cohortId": "10048",
            "cohortName": "Acute bacterial sinusitis",
            "outcomeConceptId": " 4294548"
          },
          {
            "cohortId": "10049",
            "cohortName": "Polyp of colon",
            "outcomeConceptId": " 4285898"
          }
        ],
        "occurrenceType": "first",
        "detectOnDescendants": true
      },
      "attr_class": ["NegativeControlOutcomeSharedResources", "SharedResources"]
    }
  ],
  "moduleSpecifications": [
    {
      "module": "CohortGeneratorModule",
      "settings": {
        "generateStats": true
      },
      "attr_class": ["ModuleSpecifications", "CohortGeneratorModuleSpecifications"]
    },
    {
      "module": "CohortDiagnosticsModule",
      "settings": {
        "runInclusionStatistics": true,
        "runIncludedSourceConcepts": true,
        "runOrphanConcepts": true,
        "runTimeSeries": false,
        "runVisitContext": true,
        "runBreakdownIndexEvents": true,
        "runIncidenceRate": true,
        "runCohortRelationship": true,
        "runTemporalCohortCharacterization": true,
        "temporalCovariateSettings": {
          "temporal": true,
          "temporalSequence": false,
          "DemographicsGender": true,
          "DemographicsAge": true,
          "DemographicsAgeGroup": true,
          "DemographicsRace": true,
          "DemographicsEthnicity": true,
          "DemographicsIndexYear": true,
          "DemographicsIndexMonth": true,
          "DemographicsPriorObservationTime": true,
          "DemographicsPostObservationTime": true,
          "DemographicsTimeInCohort": true,
          "DemographicsIndexYearMonth": true,
          "ConditionOccurrence": true,
          "ConditionEraStart": true,
          "ConditionEraOverlap": true,
          "ConditionEraGroupOverlap": true,
          "DrugEraStart": true,
          "DrugEraGroupOverlap": true,
          "ProcedureOccurrence": true,
          "DeviceExposure": true,
          "Measurement": true,
          "Observation": true,
          "CharlsonIndex": true,
          "Dcsi": true,
          "Chads2": true,
          "Chads2Vasc": true,
          "temporalStartDays": [-9999, -365, -180, -30, -365, -30, 0, 1, 31, -9999],
          "temporalEndDays": [0, 0, 0, 0, -31, -1, 0, 30, 365, 9999],
          "includedCovariateConceptIds": [],
          "addDescendantsToInclude": false,
          "excludedCovariateConceptIds": [],
          "addDescendantsToExclude": false,
          "includedCovariateIds": [],
          "attr_class": "covariateSettings",
          "attr_fun": "getDbDefaultCovariateData"
        },
        "minCharacterizationMean": 0.01,
        "irWashoutPeriod": 0
      },
      "attr_class": ["ModuleSpecifications", "CohortDiagnosticsModuleSpecifications"]
    },
    {
      "module": "CharacterizationModule",
      "settings": {
        "analysis": {
          "timeToEventSettings": [
            {
              "targetIds": [1, 2, 1001, 2001],
              "outcomeIds": 3,
              "attr_class": "timeToEventSettings"
            }
          ],
          "dechallengeRechallengeSettings": [
            {
              "targetCohortDefinitionIds": [1, 2, 1001, 2001],
              "outcomeCohortDefinitionIds": 3,
              "dechallengeStopInterval": 30,
              "dechallengeEvaluationWindow": 30,
              "attr_class": "dechallengeRechallengeSettings"
            }
          ],
          "aggregateCovariateSettings": [
            {
              "targetIds": [1, 2, 1001, 2001],
              "minPriorObservation": 365,
              "outcomeIds": 3,
              "outcomeWashoutDays": 365,
              "riskWindowStart": 1,
              "startAnchor": "cohort start",
              "riskWindowEnd": 0,
              "endAnchor": "cohort end",
              "covariateSettings": [
                {
                  "temporal": false,
                  "temporalSequence": false,
                  "DemographicsGender": true,
                  "DemographicsAge": true,
                  "DemographicsAgeGroup": true,
                  "DemographicsRace": true,
                  "DemographicsEthnicity": true,
                  "DemographicsIndexYear": true,
                  "DemographicsIndexMonth": true,
                  "DemographicsPriorObservationTime": true,
                  "DemographicsPostObservationTime": true,
                  "DemographicsTimeInCohort": true,
                  "ConditionGroupEraLongTerm": true,
                  "ConditionGroupEraShortTerm": true,
                  "DrugGroupEraLongTerm": true,
                  "DrugGroupEraShortTerm": true,
                  "DrugGroupEraOverlapping": true,
                  "ProcedureOccurrenceLongTerm": true,
                  "ProcedureOccurrenceShortTerm": true,
                  "DeviceExposureLongTerm": true,
                  "DeviceExposureShortTerm": true,
                  "MeasurementLongTerm": true,
                  "MeasurementShortTerm": true,
                  "ObservationLongTerm": true,
                  "ObservationShortTerm": true,
                  "VisitConceptCountLongTerm": true,
                  "VisitConceptCountShortTerm": true,
                  "longTermStartDays": -365,
                  "mediumTermStartDays": -180,
                  "shortTermStartDays": -30,
                  "endDays": 0,
                  "includedCovariateConceptIds": [],
                  "addDescendantsToInclude": false,
                  "excludedCovariateConceptIds": [],
                  "addDescendantsToExclude": false,
                  "includedCovariateIds": [],
                  "attr_class": "covariateSettings",
                  "attr_fun": "getDbDefaultCovariateData"
                }
              ],
              "caseCovariateSettings": {
                "temporal": false,
                "temporalSequence": false,
                "ConditionGroupEraDuring": true,
                "DrugGroupEraDuring": true,
                "ProcedureOccurrenceDuring": true,
                "DeviceExposureDuring": true,
                "MeasurementDuring": true,
                "ObservationDuring": true,
                "VisitConceptCountDuring": true,
                "includedCovariateConceptIds": [],
                "addDescendantsToInclude": false,
                "excludedCovariateConceptIds": [],
                "addDescendantsToExclude": false,
                "includedCovariateIds": [],
                "attr_class": "covariateSettings",
                "attr_fun": "Characterization::getDbDuringCovariateData"
              },
              "casePreTargetDuration": 365,
              "casePostOutcomeDuration": 365,
              "extractNonCaseCovariates": true,
              "attr_class": "aggregateCovariateSettings"
            },
            {
              "targetIds": [1, 2, 1001, 2001],
              "minPriorObservation": 365,
              "outcomeIds": 3,
              "outcomeWashoutDays": 365,
              "riskWindowStart": 1,
              "startAnchor": "cohort start",
              "riskWindowEnd": 365,
              "endAnchor": "cohort end",
              "covariateSettings": [
                {
                  "temporal": false,
                  "temporalSequence": false,
                  "DemographicsGender": true,
                  "DemographicsAge": true,
                  "DemographicsAgeGroup": true,
                  "DemographicsRace": true,
                  "DemographicsEthnicity": true,
                  "DemographicsIndexYear": true,
                  "DemographicsIndexMonth": true,
                  "DemographicsPriorObservationTime": true,
                  "DemographicsPostObservationTime": true,
                  "DemographicsTimeInCohort": true,
                  "ConditionGroupEraLongTerm": true,
                  "ConditionGroupEraShortTerm": true,
                  "DrugGroupEraLongTerm": true,
                  "DrugGroupEraShortTerm": true,
                  "DrugGroupEraOverlapping": true,
                  "ProcedureOccurrenceLongTerm": true,
                  "ProcedureOccurrenceShortTerm": true,
                  "DeviceExposureLongTerm": true,
                  "DeviceExposureShortTerm": true,
                  "MeasurementLongTerm": true,
                  "MeasurementShortTerm": true,
                  "ObservationLongTerm": true,
                  "ObservationShortTerm": true,
                  "VisitConceptCountLongTerm": true,
                  "VisitConceptCountShortTerm": true,
                  "longTermStartDays": -365,
                  "mediumTermStartDays": -180,
                  "shortTermStartDays": -30,
                  "endDays": 0,
                  "includedCovariateConceptIds": [],
                  "addDescendantsToInclude": false,
                  "excludedCovariateConceptIds": [],
                  "addDescendantsToExclude": false,
                  "includedCovariateIds": [],
                  "attr_class": "covariateSettings",
                  "attr_fun": "getDbDefaultCovariateData"
                }
              ],
              "caseCovariateSettings": {
                "temporal": false,
                "temporalSequence": false,
                "ConditionGroupEraDuring": true,
                "DrugGroupEraDuring": true,
                "ProcedureOccurrenceDuring": true,
                "DeviceExposureDuring": true,
                "MeasurementDuring": true,
                "ObservationDuring": true,
                "VisitConceptCountDuring": true,
                "includedCovariateConceptIds": [],
                "addDescendantsToInclude": false,
                "excludedCovariateConceptIds": [],
                "addDescendantsToExclude": false,
                "includedCovariateIds": [],
                "attr_class": "covariateSettings",
                "attr_fun": "Characterization::getDbDuringCovariateData"
              },
              "casePreTargetDuration": 365,
              "casePostOutcomeDuration": 365,
              "extractNonCaseCovariates": true,
              "attr_class": "aggregateCovariateSettings"
            }
          ],
          "attr_class": "characterizationSettings"
        },
        "minCharacterizationMean": 0.01
      },
      "attr_class": ["ModuleSpecifications", "CharacterizationModuleSpecifications"]
    },
    {
      "module": "CohortIncidenceModule",
      "settings": {
        "irDesign": {
          "targetDefs": [
            {
              "id": 1,
              "name": "Celecoxib"
            },
            {
              "id": 2,
              "name": "Diclofenac"
            },
            {
              "id": 1001,
              "name": "Celecoxib Age 18-64"
            },
            {
              "id": 2001,
              "name": "Diclofenac Age 18-64"
            }
          ],
          "outcomeDefs": [
            {
              "id": 1,
              "name": "GI bleed",
              "cohortId": 3,
              "cleanWindow": 9999
            }
          ],
          "timeAtRiskDefs": [
            {
              "id": 1,
              "start": {
                "dateField": "start",
                "offset": 0
              },
              "end": {
                "dateField": "end",
                "offset": 0
              }
            },
            {
              "id": 2,
              "start": {
                "dateField": "start",
                "offset": 0
              },
              "end": {
                "dateField": "start",
                "offset": 365
              }
            }
          ],
          "analysisList": [
            {
              "targets": [1, 2, 1001, 2001],
              "outcomes": 1,
              "tars": [1, 2]
            }
          ],
          "strataSettings": {
            "byAge": false,
            "byGender": true,
            "byYear": true
          }
        }
      },
      "attr_class": ["ModuleSpecifications", "CohortIncidenceModuleSpecifications"]
    },
    {
      "module": "TreatmentPatternsModule",
      "settings": {
        "cohorts": [
          {
            "cohortId": 11,
            "cohortName": "ViralSinusitis",
            "type": "target"
          },
          {
            "cohortId": 1,
            "cohortName": "Celecoxib",
            "type": "event"
          },
          {
            "cohortId": 2,
            "cohortName": "Diclofenac",
            "type": "event"
          },
          {
            "cohortId": 3,
            "cohortName": "GI bleed",
            "type": "event"
          },
          {
            "cohortId": 4,
            "cohortName": "Acetaminophen",
            "type": "event"
          },
          {
            "cohortId": 5,
            "cohortName": "Amoxicillin",
            "type": "event"
          },
          {
            "cohortId": 6,
            "cohortName": "Aspirin",
            "type": "event"
          },
          {
            "cohortId": 7,
            "cohortName": "Clavulanate",
            "type": "event"
          },
          {
            "cohortId": 9,
            "cohortName": "Doxylamine",
            "type": "event"
          },
          {
            "cohortId": 10,
            "cohortName": "PenicillinV",
            "type": "event"
          },
          {
            "cohortId": 1001,
            "cohortName": "Celecoxib - age 18 to 64 Age 18 to 64",
            "type": "event"
          },
          {
            "cohortId": 2001,
            "cohortName": "Diclofenac - age 18 to 64 Age 18 to 64",
            "type": "event"
          },
          {
            "cohortId": 1002,
            "cohortName": "Celecoxib - first event with 365 prior obs first event with 365 prior obs",
            "type": "event"
          },
          {
            "cohortId": 2002,
            "cohortName": "Diclofenac - first event with 365 prior obs first event with 365 prior obs",
            "type": "event"
          },
          {
            "cohortId": 1003,
            "cohortName": "Celecoxib - age 18 to 64 and first event with 365 prior obs Age 18 to 64, first event with 365 prior obs",
            "type": "event"
          },
          {
            "cohortId": 2003,
            "cohortName": "Diclofenac - age 18 to 64 and first event with 365 prior obs Age 18 to 64, first event with 365 prior obs",
            "type": "event"
          },
          {
            "cohortId": 8,
            "cohortName": "Death",
            "type": "exit"
          }
        ],
        "includeTreatments": "startDate",
        "indexDateOffset": 0,
        "minEraDuration": 7,
        "eraCollapseSize": 14,
        "combinationWindow": 7,
        "minPostCombinationDuration": 7,
        "filterTreatments": "First",
        "maxPathLength": 5,
        "ageWindow": 5,
        "minCellCount": 1,
        "censorType": "minCellCount"
      },
      "attr_class": ["ModuleSpecifications", "TreatmentPatternsModuleSpecifications"]
    },
    {
      "module": "CohortMethodModule",
      "settings": {
        "cmAnalysisList": [
          {
            "analysisId": 1,
            "description": "No matching, simple outcome model",
            "getDbCohortMethodDataArgs": {
              "studyStartDate": "",
              "studyEndDate": "",
              "firstExposureOnly": true,
              "removeDuplicateSubjects": "remove all",
              "restrictToCommonPeriod": false,
              "washoutPeriod": 183,
              "maxCohortSize": 100000,
              "covariateSettings": {
                "temporal": false,
                "temporalSequence": false,
                "DemographicsGender": true,
                "DemographicsAgeGroup": true,
                "DemographicsRace": true,
                "DemographicsEthnicity": true,
                "DemographicsIndexYear": true,
                "DemographicsIndexMonth": true,
                "ConditionGroupEraLongTerm": true,
                "ConditionGroupEraShortTerm": true,
                "DrugGroupEraLongTerm": true,
                "DrugGroupEraShortTerm": true,
                "DrugGroupEraOverlapping": true,
                "ProcedureOccurrenceLongTerm": true,
                "ProcedureOccurrenceShortTerm": true,
                "DeviceExposureLongTerm": true,
                "DeviceExposureShortTerm": true,
                "MeasurementLongTerm": true,
                "MeasurementShortTerm": true,
                "MeasurementRangeGroupLongTerm": true,
                "MeasurementRangeGroupShortTerm": true,
                "MeasurementValueAsConceptLongTerm": true,
                "MeasurementValueAsConceptShortTerm": true,
                "ObservationLongTerm": true,
                "ObservationShortTerm": true,
                "ObservationValueAsConceptLongTerm": true,
                "ObservationValueAsConceptShortTerm": true,
                "CharlsonIndex": true,
                "Dcsi": true,
                "Chads2": true,
                "Chads2Vasc": true,
                "includedCovariateConceptIds": [],
                "includedCovariateIds": [],
                "addDescendantsToInclude": false,
                "excludedCovariateConceptIds": [],
                "addDescendantsToExclude": true,
                "shortTermStartDays": -30,
                "mediumTermStartDays": -180,
                "endDays": 0,
                "longTermStartDays": -365,
                "attr_class": "covariateSettings",
                "attr_fun": "getDbDefaultCovariateData"
              },
              "attr_class": "args"
            },
            "createStudyPopArgs": {
              "firstExposureOnly": false,
              "restrictToCommonPeriod": false,
              "washoutPeriod": 0,
              "removeDuplicateSubjects": "keep all",
              "removeSubjectsWithPriorOutcome": true,
              "priorOutcomeLookback": 99999,
              "minDaysAtRisk": 1,
              "maxDaysAtRisk": 99999,
              "riskWindowStart": 0,
              "startAnchor": "cohort start",
              "riskWindowEnd": 365,
              "endAnchor": "cohort end",
              "censorAtNewRiskWindow": false,
              "attr_class": "args"
            },
            "fitOutcomeModelArgs": {
              "modelType": "cox",
              "stratified": false,
              "useCovariates": false,
              "inversePtWeighting": false,
              "profileBounds": [-2.3026, 2.3026],
              "prior": {
                "priorType": "laplace",
                "variance": 1,
                "exclude": null,
                "graph": null,
                "neighborhood": null,
                "useCrossValidation": true,
                "forceIntercept": false,
                "attr_class": "cyclopsPrior"
              },
              "control": {
                "maxIterations": 1000,
                "tolerance": 2e-07,
                "convergenceType": "gradient",
                "autoSearch": true,
                "fold": 10,
                "lowerLimit": 0.01,
                "upperLimit": 20,
                "gridSteps": 10,
                "minCVData": 100,
                "cvRepetitions": 10,
                "noiseLevel": "quiet",
                "threads": 1,
                "seed": 1,
                "resetCoefficients": true,
                "startingVariance": 0.01,
                "useKKTSwindle": false,
                "tuneSwindle": 10,
                "selectorType": "auto",
                "initialBound": 2,
                "maxBoundCount": 5,
                "algorithm": "ccd",
                "doItAll": true,
                "syncCV": false,
                "attr_class": "cyclopsControl"
              },
              "attr_class": "args"
            },
            "attr_class": "cmAnalysis"
          },
          {
            "analysisId": 2,
            "description": "Matching on ps and covariates, simple outcomeModel",
            "getDbCohortMethodDataArgs": {
              "studyStartDate": "",
              "studyEndDate": "",
              "firstExposureOnly": true,
              "removeDuplicateSubjects": "remove all",
              "restrictToCommonPeriod": false,
              "washoutPeriod": 183,
              "maxCohortSize": 100000,
              "covariateSettings": {
                "temporal": false,
                "temporalSequence": false,
                "DemographicsGender": true,
                "DemographicsAgeGroup": true,
                "DemographicsRace": true,
                "DemographicsEthnicity": true,
                "DemographicsIndexYear": true,
                "DemographicsIndexMonth": true,
                "ConditionGroupEraLongTerm": true,
                "ConditionGroupEraShortTerm": true,
                "DrugGroupEraLongTerm": true,
                "DrugGroupEraShortTerm": true,
                "DrugGroupEraOverlapping": true,
                "ProcedureOccurrenceLongTerm": true,
                "ProcedureOccurrenceShortTerm": true,
                "DeviceExposureLongTerm": true,
                "DeviceExposureShortTerm": true,
                "MeasurementLongTerm": true,
                "MeasurementShortTerm": true,
                "MeasurementRangeGroupLongTerm": true,
                "MeasurementRangeGroupShortTerm": true,
                "MeasurementValueAsConceptLongTerm": true,
                "MeasurementValueAsConceptShortTerm": true,
                "ObservationLongTerm": true,
                "ObservationShortTerm": true,
                "ObservationValueAsConceptLongTerm": true,
                "ObservationValueAsConceptShortTerm": true,
                "CharlsonIndex": true,
                "Dcsi": true,
                "Chads2": true,
                "Chads2Vasc": true,
                "includedCovariateConceptIds": [],
                "includedCovariateIds": [],
                "addDescendantsToInclude": false,
                "excludedCovariateConceptIds": [],
                "addDescendantsToExclude": true,
                "shortTermStartDays": -30,
                "mediumTermStartDays": -180,
                "endDays": 0,
                "longTermStartDays": -365,
                "attr_class": "covariateSettings",
                "attr_fun": "getDbDefaultCovariateData"
              },
              "attr_class": "args"
            },
            "createStudyPopArgs": {
              "firstExposureOnly": false,
              "restrictToCommonPeriod": false,
              "washoutPeriod": 0,
              "removeDuplicateSubjects": "keep all",
              "removeSubjectsWithPriorOutcome": true,
              "priorOutcomeLookback": 99999,
              "minDaysAtRisk": 1,
              "maxDaysAtRisk": 99999,
              "riskWindowStart": 0,
              "startAnchor": "cohort start",
              "riskWindowEnd": 365,
              "endAnchor": "cohort end",
              "censorAtNewRiskWindow": false,
              "attr_class": "args"
            },
            "createPsArgs": {
              "maxCohortSizeForFitting": 250000,
              "errorOnHighCorrelation": true,
              "stopOnError": false,
              "prior": {
                "priorType": "laplace",
                "variance": 1,
                "exclude": 0,
                "graph": null,
                "neighborhood": null,
                "useCrossValidation": true,
                "forceIntercept": false,
                "attr_class": "cyclopsPrior"
              },
              "control": {
                "maxIterations": 1000,
                "tolerance": 1e-06,
                "convergenceType": "gradient",
                "autoSearch": true,
                "fold": 10,
                "lowerLimit": 0.01,
                "upperLimit": 20,
                "gridSteps": 10,
                "minCVData": 100,
                "cvRepetitions": 1,
                "noiseLevel": "silent",
                "threads": 1,
                "seed": null,
                "resetCoefficients": false,
                "startingVariance": -1,
                "useKKTSwindle": false,
                "tuneSwindle": 10,
                "selectorType": "auto",
                "initialBound": 2,
                "maxBoundCount": 5,
                "algorithm": "ccd",
                "doItAll": true,
                "syncCV": false,
                "attr_class": "cyclopsControl"
              },
              "estimator": "att",
              "attr_class": "args"
            },
            "matchOnPsArgs": {
              "caliper": 0.2,
              "caliperScale": "standardized logit",
              "maxRatio": 1,
              "allowReverseMatch": false,
              "attr_class": "args"
            },
            "computeSharedCovariateBalanceArgs": {
              "maxCohortSize": 250000,
              "attr_class": "args"
            },
            "computeCovariateBalanceArgs": {
              "maxCohortSize": 250000,
              "covariateFilter": {
                "label": ["Age group", "Gender: female", "Race", "Ethnicity", "Medical history: General", "Medical history: Cardiovascular disease", "Medical history: Neoplasms", "Medication use", "Charlson comorbidity index", "CHADS2Vasc", "DCSI"],
                "analysisId": [3, 1, 4, 5, 210, 210, 210, 410, 901, 904, 902],
                "covariateIds": [null, "8532001", null, null, "4006969210,438409210,4212540210,255573210,201606210,4182210210,440383210,201820210,318800210,192671210,439727210,432867210,316866210,4104000210,433736210,80180210,255848210,140168210,4030518210,80809210,435783210,4279309210,81893210,81902210,197494210,4134440210", "313217210,381591210,317576210,321588210,316139210,4185932210,321052210,440417210,444247210", "4044013210,432571210,40481902210,443392210,4112853210,4180790210,443388210,197508210,200962210", "21601782410,21602796410,21604686410,21604389410,21603932410,21601387410,21602028410,21600960410,21601664410,21601744410,21601461410,21600046410,21603248410,21600712410,21603890410,21601853410,21604254410,21604489410,21604752410", "1901", "1904", "1902"],
                "attr_class": ["spec_tbl_df", "tbl_df", "tbl", "data.frame"],
                "attr_row.names": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11],
                "attr_spec": {
                  "cols": {
                    "label": [],
                    "analysisId": [],
                    "covariateIds": []
                  },
                  "default": [],
                  "skip": 1
                }
              },
              "attr_class": "args"
            },
            "fitOutcomeModelArgs": {
              "modelType": "cox",
              "stratified": false,
              "useCovariates": false,
              "inversePtWeighting": false,
              "profileBounds": [-2.3026, 2.3026],
              "prior": {
                "priorType": "laplace",
                "variance": 1,
                "exclude": null,
                "graph": null,
                "neighborhood": null,
                "useCrossValidation": true,
                "forceIntercept": false,
                "attr_class": "cyclopsPrior"
              },
              "control": {
                "maxIterations": 1000,
                "tolerance": 2e-07,
                "convergenceType": "gradient",
                "autoSearch": true,
                "fold": 10,
                "lowerLimit": 0.01,
                "upperLimit": 20,
                "gridSteps": 10,
                "minCVData": 100,
                "cvRepetitions": 10,
                "noiseLevel": "quiet",
                "threads": 1,
                "seed": 1,
                "resetCoefficients": true,
                "startingVariance": 0.01,
                "useKKTSwindle": false,
                "tuneSwindle": 10,
                "selectorType": "auto",
                "initialBound": 2,
                "maxBoundCount": 5,
                "algorithm": "ccd",
                "doItAll": true,
                "syncCV": false,
                "attr_class": "cyclopsControl"
              },
              "attr_class": "args"
            },
            "attr_class": "cmAnalysis"
          }
        ],
        "targetComparatorOutcomesList": [
          {
            "targetId": 1002,
            "comparatorId": 2002,
            "outcomes": [
              {
                "outcomeId": 10037,
                "outcomeOfInterest": false,
                "trueEffectSize": 1,
                "priorOutcomeLookback": 5,
                "attr_class": "outcome"
              },
              {
                "outcomeId": 10038,
                "outcomeOfInterest": false,
                "trueEffectSize": 1,
                "priorOutcomeLookback": 5,
                "attr_class": "outcome"
              },
              {
                "outcomeId": 10039,
                "outcomeOfInterest": false,
                "trueEffectSize": 1,
                "priorOutcomeLookback": 5,
                "attr_class": "outcome"
              },
              {
                "outcomeId": 10040,
                "outcomeOfInterest": false,
                "trueEffectSize": 1,
                "priorOutcomeLookback": 5,
                "attr_class": "outcome"
              },
              {
                "outcomeId": 10041,
                "outcomeOfInterest": false,
                "trueEffectSize": 1,
                "priorOutcomeLookback": 5,
                "attr_class": "outcome"
              },
              {
                "outcomeId": 10042,
                "outcomeOfInterest": false,
                "trueEffectSize": 1,
                "priorOutcomeLookback": 5,
                "attr_class": "outcome"
              },
              {
                "outcomeId": 10043,
                "outcomeOfInterest": false,
                "trueEffectSize": 1,
                "priorOutcomeLookback": 5,
                "attr_class": "outcome"
              },
              {
                "outcomeId": 10044,
                "outcomeOfInterest": false,
                "trueEffectSize": 1,
                "priorOutcomeLookback": 5,
                "attr_class": "outcome"
              },
              {
                "outcomeId": 10046,
                "outcomeOfInterest": false,
                "trueEffectSize": 1,
                "priorOutcomeLookback": 5,
                "attr_class": "outcome"
              },
              {
                "outcomeId": 10047,
                "outcomeOfInterest": false,
                "trueEffectSize": 1,
                "priorOutcomeLookback": 5,
                "attr_class": "outcome"
              },
              {
                "outcomeId": 10048,
                "outcomeOfInterest": false,
                "trueEffectSize": 1,
                "priorOutcomeLookback": 5,
                "attr_class": "outcome"
              },
              {
                "outcomeId": 10049,
                "outcomeOfInterest": false,
                "trueEffectSize": 1,
                "priorOutcomeLookback": 5,
                "attr_class": "outcome"
              },
              {
                "outcomeId": 3,
                "outcomeOfInterest": true,
                "trueEffectSize": null,
                "attr_class": "outcome"
              }
            ],
            "excludedCovariateConceptIds": [1118084, 1124300],
            "attr_class": "targetComparatorOutcomes"
          },
          {
            "targetId": 1003,
            "comparatorId": 2003,
            "outcomes": [
              {
                "outcomeId": 10037,
                "outcomeOfInterest": false,
                "trueEffectSize": 1,
                "priorOutcomeLookback": 5,
                "attr_class": "outcome"
              },
              {
                "outcomeId": 10038,
                "outcomeOfInterest": false,
                "trueEffectSize": 1,
                "priorOutcomeLookback": 5,
                "attr_class": "outcome"
              },
              {
                "outcomeId": 10039,
                "outcomeOfInterest": false,
                "trueEffectSize": 1,
                "priorOutcomeLookback": 5,
                "attr_class": "outcome"
              },
              {
                "outcomeId": 10040,
                "outcomeOfInterest": false,
                "trueEffectSize": 1,
                "priorOutcomeLookback": 5,
                "attr_class": "outcome"
              },
              {
                "outcomeId": 10041,
                "outcomeOfInterest": false,
                "trueEffectSize": 1,
                "priorOutcomeLookback": 5,
                "attr_class": "outcome"
              },
              {
                "outcomeId": 10042,
                "outcomeOfInterest": false,
                "trueEffectSize": 1,
                "priorOutcomeLookback": 5,
                "attr_class": "outcome"
              },
              {
                "outcomeId": 10043,
                "outcomeOfInterest": false,
                "trueEffectSize": 1,
                "priorOutcomeLookback": 5,
                "attr_class": "outcome"
              },
              {
                "outcomeId": 10044,
                "outcomeOfInterest": false,
                "trueEffectSize": 1,
                "priorOutcomeLookback": 5,
                "attr_class": "outcome"
              },
              {
                "outcomeId": 10046,
                "outcomeOfInterest": false,
                "trueEffectSize": 1,
                "priorOutcomeLookback": 5,
                "attr_class": "outcome"
              },
              {
                "outcomeId": 10047,
                "outcomeOfInterest": false,
                "trueEffectSize": 1,
                "priorOutcomeLookback": 5,
                "attr_class": "outcome"
              },
              {
                "outcomeId": 10048,
                "outcomeOfInterest": false,
                "trueEffectSize": 1,
                "priorOutcomeLookback": 5,
                "attr_class": "outcome"
              },
              {
                "outcomeId": 10049,
                "outcomeOfInterest": false,
                "trueEffectSize": 1,
                "priorOutcomeLookback": 5,
                "attr_class": "outcome"
              },
              {
                "outcomeId": 3,
                "outcomeOfInterest": true,
                "trueEffectSize": null,
                "attr_class": "outcome"
              }
            ],
            "excludedCovariateConceptIds": [1118084, 1124300],
            "attr_class": "targetComparatorOutcomes"
          }
        ],
        "refitPsForEveryOutcome": false,
        "refitPsForEveryStudyPopulation": false,
        "cmDiagnosticThresholds": {
          "mdrrThreshold": "Inf",
          "easeThreshold": 0.6,
          "sdmThreshold": 0.1,
          "equipoiseThreshold": 0.2,
          "generalizabilitySdmThreshold": 1,
          "attr_class": "CmDiagnosticThresholds"
        }
      },
      "attr_class": ["ModuleSpecifications", "CohortMethodModuleSpecifications"]
    },
    {
      "module": "SelfControlledCaseSeriesModule",
      "settings": {
        "sccsAnalysisList": [
          {
            "analysisId": 1,
            "description": "SCCS 18+",
            "getDbSccsDataArgs": {
              "useCustomCovariates": false,
              "useNestingCohort": false,
              "deleteCovariatesSmallCount": 0,
              "studyStartDate": "",
              "studyEndDate": "",
              "maxCasesPerOutcome": 1000000,
              "exposureIds": "exposureId",
              "customCovariateIds": "",
              "attr_class": "args"
            },
            "createStudyPopulationArgs": {
              "firstOutcomeOnly": false,
              "naivePeriod": 365,
              "minAge": 18,
              "attr_class": "args"
            },
            "createIntervalDataArgs": {
              "eraCovariateSettings": [
                {
                  "includeEraIds": "exposureId",
                  "label": "Pre-exposure",
                  "stratifyById": false,
                  "start": -30,
                  "startAnchor": "era start",
                  "end": -1,
                  "endAnchor": "era start",
                  "firstOccurrenceOnly": false,
                  "allowRegularization": false,
                  "profileLikelihood": false,
                  "exposureOfInterest": false,
                  "isControlInterval": false,
                  "attr_class": "EraCovariateSettings"
                },
                {
                  "includeEraIds": "exposureId",
                  "label": "Main",
                  "stratifyById": false,
                  "start": 0,
                  "startAnchor": "era start",
                  "end": 365,
                  "endAnchor": "era end",
                  "firstOccurrenceOnly": false,
                  "allowRegularization": false,
                  "profileLikelihood": true,
                  "exposureOfInterest": true,
                  "isControlInterval": false,
                  "attr_class": "EraCovariateSettings"
                }
              ],
              "seasonalityCovariateSettings": {
                "seasonKnots": 5,
                "allowRegularization": true,
                "computeConfidenceIntervals": false,
                "attr_class": "SeasonalityCovariateSettings"
              },
              "calendarTimeCovariateSettings": {
                "calendarTimeKnots": 5,
                "allowRegularization": true,
                "computeConfidenceIntervals": false,
                "attr_class": "CalendarTimeCovariateSettings"
              },
              "minCasesForTimeCovariates": 100000,
              "eventDependentObservation": false,
              "attr_class": "args"
            },
            "fitSccsModelArgs": {
              "prior": {
                "priorType": "laplace",
                "variance": 1,
                "exclude": null,
                "graph": null,
                "neighborhood": null,
                "useCrossValidation": true,
                "forceIntercept": false,
                "attr_class": "cyclopsPrior"
              },
              "control": {
                "maxIterations": 1000,
                "tolerance": 1e-06,
                "convergenceType": "gradient",
                "autoSearch": true,
                "fold": 10,
                "lowerLimit": 0.01,
                "upperLimit": 20,
                "gridSteps": 10,
                "minCVData": 100,
                "cvRepetitions": 1,
                "noiseLevel": "quiet",
                "threads": 1,
                "seed": 1,
                "resetCoefficients": true,
                "startingVariance": 0.1,
                "useKKTSwindle": false,
                "tuneSwindle": 10,
                "selectorType": "byPid",
                "initialBound": 2,
                "maxBoundCount": 5,
                "algorithm": "ccd",
                "doItAll": true,
                "syncCV": false,
                "attr_class": "cyclopsControl"
              },
              "profileBounds": [-2.3026, 2.3026],
              "attr_class": "args"
            },
            "attr_class": "SccsAnalysis"
          }
        ],
        "exposuresOutcomeList": [
          {
            "outcomeId": 3,
            "exposures": [
              {
                "exposureId": 1,
                "exposureIdRef": "exposureId",
                "trueEffectSize": null,
                "attr_class": "Exposure"
              }
            ],
            "attr_class": "ExposuresOutcome"
          },
          {
            "outcomeId": 10037,
            "exposures": [
              {
                "exposureId": 1,
                "exposureIdRef": "exposureId",
                "trueEffectSize": 1,
                "attr_class": "Exposure"
              }
            ],
            "attr_class": "ExposuresOutcome"
          },
          {
            "outcomeId": 10038,
            "exposures": [
              {
                "exposureId": 1,
                "exposureIdRef": "exposureId",
                "trueEffectSize": 1,
                "attr_class": "Exposure"
              }
            ],
            "attr_class": "ExposuresOutcome"
          },
          {
            "outcomeId": 10039,
            "exposures": [
              {
                "exposureId": 1,
                "exposureIdRef": "exposureId",
                "trueEffectSize": 1,
                "attr_class": "Exposure"
              }
            ],
            "attr_class": "ExposuresOutcome"
          },
          {
            "outcomeId": 10040,
            "exposures": [
              {
                "exposureId": 1,
                "exposureIdRef": "exposureId",
                "trueEffectSize": 1,
                "attr_class": "Exposure"
              }
            ],
            "attr_class": "ExposuresOutcome"
          },
          {
            "outcomeId": 10041,
            "exposures": [
              {
                "exposureId": 1,
                "exposureIdRef": "exposureId",
                "trueEffectSize": 1,
                "attr_class": "Exposure"
              }
            ],
            "attr_class": "ExposuresOutcome"
          },
          {
            "outcomeId": 10042,
            "exposures": [
              {
                "exposureId": 1,
                "exposureIdRef": "exposureId",
                "trueEffectSize": 1,
                "attr_class": "Exposure"
              }
            ],
            "attr_class": "ExposuresOutcome"
          },
          {
            "outcomeId": 10043,
            "exposures": [
              {
                "exposureId": 1,
                "exposureIdRef": "exposureId",
                "trueEffectSize": 1,
                "attr_class": "Exposure"
              }
            ],
            "attr_class": "ExposuresOutcome"
          },
          {
            "outcomeId": 10044,
            "exposures": [
              {
                "exposureId": 1,
                "exposureIdRef": "exposureId",
                "trueEffectSize": 1,
                "attr_class": "Exposure"
              }
            ],
            "attr_class": "ExposuresOutcome"
          },
          {
            "outcomeId": 10046,
            "exposures": [
              {
                "exposureId": 1,
                "exposureIdRef": "exposureId",
                "trueEffectSize": 1,
                "attr_class": "Exposure"
              }
            ],
            "attr_class": "ExposuresOutcome"
          },
          {
            "outcomeId": 10047,
            "exposures": [
              {
                "exposureId": 1,
                "exposureIdRef": "exposureId",
                "trueEffectSize": 1,
                "attr_class": "Exposure"
              }
            ],
            "attr_class": "ExposuresOutcome"
          },
          {
            "outcomeId": 10048,
            "exposures": [
              {
                "exposureId": 1,
                "exposureIdRef": "exposureId",
                "trueEffectSize": 1,
                "attr_class": "Exposure"
              }
            ],
            "attr_class": "ExposuresOutcome"
          },
          {
            "outcomeId": 10049,
            "exposures": [
              {
                "exposureId": 1,
                "exposureIdRef": "exposureId",
                "trueEffectSize": 1,
                "attr_class": "Exposure"
              }
            ],
            "attr_class": "ExposuresOutcome"
          },
          {
            "outcomeId": 3,
            "exposures": [
              {
                "exposureId": 2,
                "exposureIdRef": "exposureId",
                "trueEffectSize": null,
                "attr_class": "Exposure"
              }
            ],
            "attr_class": "ExposuresOutcome"
          },
          {
            "outcomeId": 10037,
            "exposures": [
              {
                "exposureId": 2,
                "exposureIdRef": "exposureId",
                "trueEffectSize": 1,
                "attr_class": "Exposure"
              }
            ],
            "attr_class": "ExposuresOutcome"
          },
          {
            "outcomeId": 10038,
            "exposures": [
              {
                "exposureId": 2,
                "exposureIdRef": "exposureId",
                "trueEffectSize": 1,
                "attr_class": "Exposure"
              }
            ],
            "attr_class": "ExposuresOutcome"
          },
          {
            "outcomeId": 10039,
            "exposures": [
              {
                "exposureId": 2,
                "exposureIdRef": "exposureId",
                "trueEffectSize": 1,
                "attr_class": "Exposure"
              }
            ],
            "attr_class": "ExposuresOutcome"
          },
          {
            "outcomeId": 10040,
            "exposures": [
              {
                "exposureId": 2,
                "exposureIdRef": "exposureId",
                "trueEffectSize": 1,
                "attr_class": "Exposure"
              }
            ],
            "attr_class": "ExposuresOutcome"
          },
          {
            "outcomeId": 10041,
            "exposures": [
              {
                "exposureId": 2,
                "exposureIdRef": "exposureId",
                "trueEffectSize": 1,
                "attr_class": "Exposure"
              }
            ],
            "attr_class": "ExposuresOutcome"
          },
          {
            "outcomeId": 10042,
            "exposures": [
              {
                "exposureId": 2,
                "exposureIdRef": "exposureId",
                "trueEffectSize": 1,
                "attr_class": "Exposure"
              }
            ],
            "attr_class": "ExposuresOutcome"
          },
          {
            "outcomeId": 10043,
            "exposures": [
              {
                "exposureId": 2,
                "exposureIdRef": "exposureId",
                "trueEffectSize": 1,
                "attr_class": "Exposure"
              }
            ],
            "attr_class": "ExposuresOutcome"
          },
          {
            "outcomeId": 10044,
            "exposures": [
              {
                "exposureId": 2,
                "exposureIdRef": "exposureId",
                "trueEffectSize": 1,
                "attr_class": "Exposure"
              }
            ],
            "attr_class": "ExposuresOutcome"
          },
          {
            "outcomeId": 10046,
            "exposures": [
              {
                "exposureId": 2,
                "exposureIdRef": "exposureId",
                "trueEffectSize": 1,
                "attr_class": "Exposure"
              }
            ],
            "attr_class": "ExposuresOutcome"
          },
          {
            "outcomeId": 10047,
            "exposures": [
              {
                "exposureId": 2,
                "exposureIdRef": "exposureId",
                "trueEffectSize": 1,
                "attr_class": "Exposure"
              }
            ],
            "attr_class": "ExposuresOutcome"
          },
          {
            "outcomeId": 10048,
            "exposures": [
              {
                "exposureId": 2,
                "exposureIdRef": "exposureId",
                "trueEffectSize": 1,
                "attr_class": "Exposure"
              }
            ],
            "attr_class": "ExposuresOutcome"
          },
          {
            "outcomeId": 10049,
            "exposures": [
              {
                "exposureId": 2,
                "exposureIdRef": "exposureId",
                "trueEffectSize": 1,
                "attr_class": "Exposure"
              }
            ],
            "attr_class": "ExposuresOutcome"
          }
        ],
        "combineDataFetchAcrossOutcomes": false,
        "sccsDiagnosticThresholds": {
          "mdrrThreshold": "Inf",
          "easeThreshold": 0.42,
          "timeTrendPThreshold": 0.05,
          "preExposurePThreshold": 0.05,
          "attr_class": "SccsDiagnosticThresholds"
        }
      },
      "attr_class": ["ModuleSpecifications", "SelfControlledCaseSeriesModuleSpecifications"]
    },
    {
      "module": "PatientLevelPredictionModule",
      "settings": {
        "modelDesignList": [
          {
            "targetId": 1002,
            "outcomeId": 3,
            "restrictPlpDataSettings": {
              "studyStartDate": "",
              "studyEndDate": "",
              "firstExposureOnly": false,
              "washoutPeriod": 0,
              "sampleSize": null,
              "attr_class": "restrictPlpDataSettings"
            },
            "covariateSettings": {
              "temporal": false,
              "temporalSequence": false,
              "DemographicsGender": true,
              "DemographicsAgeGroup": true,
              "DemographicsRace": true,
              "DemographicsEthnicity": true,
              "DemographicsIndexYear": true,
              "DemographicsIndexMonth": true,
              "ConditionGroupEraLongTerm": true,
              "ConditionGroupEraShortTerm": true,
              "DrugGroupEraLongTerm": true,
              "DrugGroupEraShortTerm": true,
              "DrugGroupEraOverlapping": true,
              "ProcedureOccurrenceLongTerm": true,
              "ProcedureOccurrenceShortTerm": true,
              "DeviceExposureLongTerm": true,
              "DeviceExposureShortTerm": true,
              "MeasurementLongTerm": true,
              "MeasurementShortTerm": true,
              "MeasurementRangeGroupLongTerm": true,
              "MeasurementRangeGroupShortTerm": true,
              "MeasurementValueAsConceptLongTerm": true,
              "MeasurementValueAsConceptShortTerm": true,
              "ObservationLongTerm": true,
              "ObservationShortTerm": true,
              "ObservationValueAsConceptLongTerm": true,
              "ObservationValueAsConceptShortTerm": true,
              "CharlsonIndex": true,
              "Dcsi": true,
              "Chads2": true,
              "Chads2Vasc": true,
              "includedCovariateConceptIds": [],
              "includedCovariateIds": [],
              "addDescendantsToInclude": false,
              "excludedCovariateConceptIds": [],
              "addDescendantsToExclude": false,
              "shortTermStartDays": -30,
              "mediumTermStartDays": -180,
              "endDays": 0,
              "longTermStartDays": -365,
              "attr_class": "covariateSettings",
              "attr_fun": "getDbDefaultCovariateData"
            },
            "populationSettings": {
              "binary": true,
              "includeAllOutcomes": true,
              "firstExposureOnly": false,
              "washoutPeriod": 0,
              "removeSubjectsWithPriorOutcome": true,
              "priorOutcomeLookback": 99999,
              "requireTimeAtRisk": true,
              "minTimeAtRisk": 1,
              "riskWindowStart": 1,
              "startAnchor": "cohort start",
              "riskWindowEnd": 365,
              "endAnchor": "cohort start",
              "restrictTarToCohortEnd": false,
              "attr_class": "populationSettings"
            },
            "sampleSettings": [
              {
                "numberOutcomestoNonOutcomes": 1,
                "sampleSeed": 1,
                "attr_class": "sampleSettings",
                "attr_fun": "sameData"
              }
            ],
            "featureEngineeringSettings": [
              {
                "attr_class": "featureEngineeringSettings",
                "attr_fun": "sameData"
              }
            ],
            "preprocessSettings": {
              "minFraction": 0.001,
              "normalize": true,
              "removeRedundancy": true,
              "attr_class": "preprocessSettings"
            },
            "modelSettings": {
              "fitFunction": "fitCyclopsModel",
              "param": {
                "priorParams": {
                  "priorType": "laplace",
                  "forceIntercept": false,
                  "variance": 0.01,
                  "exclude": 0
                },
                "includeCovariateIds": null,
                "upperLimit": 20,
                "lowerLimit": 0.01,
                "priorCoefs": null,
                "attr_settings": {
                  "priorfunction": "Cyclops::createPrior",
                  "selectorType": "byPid",
                  "crossValidationInPrior": true,
                  "modelType": "logistic",
                  "addIntercept": true,
                  "useControl": true,
                  "seed": 39295854,
                  "name": "Lasso Logistic Regression",
                  "threads": -1,
                  "tolerance": 2e-06,
                  "cvRepetitions": 1,
                  "maxIterations": 3000
                },
                "attr_modelType": "binary",
                "attr_saveType": "RtoJson"
              },
              "attr_class": "modelSettings"
            },
            "splitSettings": {
              "test": 0.25,
              "train": 0.75,
              "seed": 52769,
              "nfold": 3,
              "attr_class": "splitSettings",
              "attr_fun": "randomSplitter"
            },
            "executeSettings": {
              "runSplitData": true,
              "runSampleData": false,
              "runFeatureEngineering": false,
              "runPreprocessData": true,
              "runModelDevelopment": true,
              "runCovariateSummary": true,
              "attr_class": "executeSettings"
            },
            "attr_class": "modelDesign"
          },
          {
            "targetId": 1003,
            "outcomeId": 3,
            "restrictPlpDataSettings": {
              "studyStartDate": "",
              "studyEndDate": "",
              "firstExposureOnly": false,
              "washoutPeriod": 0,
              "sampleSize": null,
              "attr_class": "restrictPlpDataSettings"
            },
            "covariateSettings": {
              "temporal": false,
              "temporalSequence": false,
              "DemographicsGender": true,
              "DemographicsAgeGroup": true,
              "DemographicsRace": true,
              "DemographicsEthnicity": true,
              "DemographicsIndexYear": true,
              "DemographicsIndexMonth": true,
              "ConditionGroupEraLongTerm": true,
              "ConditionGroupEraShortTerm": true,
              "DrugGroupEraLongTerm": true,
              "DrugGroupEraShortTerm": true,
              "DrugGroupEraOverlapping": true,
              "ProcedureOccurrenceLongTerm": true,
              "ProcedureOccurrenceShortTerm": true,
              "DeviceExposureLongTerm": true,
              "DeviceExposureShortTerm": true,
              "MeasurementLongTerm": true,
              "MeasurementShortTerm": true,
              "MeasurementRangeGroupLongTerm": true,
              "MeasurementRangeGroupShortTerm": true,
              "MeasurementValueAsConceptLongTerm": true,
              "MeasurementValueAsConceptShortTerm": true,
              "ObservationLongTerm": true,
              "ObservationShortTerm": true,
              "ObservationValueAsConceptLongTerm": true,
              "ObservationValueAsConceptShortTerm": true,
              "CharlsonIndex": true,
              "Dcsi": true,
              "Chads2": true,
              "Chads2Vasc": true,
              "includedCovariateConceptIds": [],
              "includedCovariateIds": [],
              "addDescendantsToInclude": false,
              "excludedCovariateConceptIds": [],
              "addDescendantsToExclude": false,
              "shortTermStartDays": -30,
              "mediumTermStartDays": -180,
              "endDays": 0,
              "longTermStartDays": -365,
              "attr_class": "covariateSettings",
              "attr_fun": "getDbDefaultCovariateData"
            },
            "populationSettings": {
              "binary": true,
              "includeAllOutcomes": true,
              "firstExposureOnly": false,
              "washoutPeriod": 0,
              "removeSubjectsWithPriorOutcome": true,
              "priorOutcomeLookback": 99999,
              "requireTimeAtRisk": true,
              "minTimeAtRisk": 1,
              "riskWindowStart": 1,
              "startAnchor": "cohort start",
              "riskWindowEnd": 365,
              "endAnchor": "cohort start",
              "restrictTarToCohortEnd": false,
              "attr_class": "populationSettings"
            },
            "sampleSettings": [
              {
                "numberOutcomestoNonOutcomes": 1,
                "sampleSeed": 1,
                "attr_class": "sampleSettings",
                "attr_fun": "sameData"
              }
            ],
            "featureEngineeringSettings": [
              {
                "attr_class": "featureEngineeringSettings",
                "attr_fun": "sameData"
              }
            ],
            "preprocessSettings": {
              "minFraction": 0.001,
              "normalize": true,
              "removeRedundancy": true,
              "attr_class": "preprocessSettings"
            },
            "modelSettings": {
              "fitFunction": "fitCyclopsModel",
              "param": {
                "priorParams": {
                  "priorType": "laplace",
                  "forceIntercept": false,
                  "variance": 0.01,
                  "exclude": 0
                },
                "includeCovariateIds": null,
                "upperLimit": 20,
                "lowerLimit": 0.01,
                "priorCoefs": null,
                "attr_settings": {
                  "priorfunction": "Cyclops::createPrior",
                  "selectorType": "byPid",
                  "crossValidationInPrior": true,
                  "modelType": "logistic",
                  "addIntercept": true,
                  "useControl": true,
                  "seed": 35500699,
                  "name": "Lasso Logistic Regression",
                  "threads": -1,
                  "tolerance": 2e-06,
                  "cvRepetitions": 1,
                  "maxIterations": 3000
                },
                "attr_modelType": "binary",
                "attr_saveType": "RtoJson"
              },
              "attr_class": "modelSettings"
            },
            "splitSettings": {
              "test": 0.25,
              "train": 0.75,
              "seed": 45169,
              "nfold": 3,
              "attr_class": "splitSettings",
              "attr_fun": "randomSplitter"
            },
            "executeSettings": {
              "runSplitData": true,
              "runSampleData": false,
              "runFeatureEngineering": false,
              "runPreprocessData": true,
              "runModelDevelopment": true,
              "runCovariateSummary": true,
              "attr_class": "executeSettings"
            },
            "attr_class": "modelDesign"
          }
        ]
      },
      "attr_class": ["ModuleSpecifications", "PatientLevelPredictionModuleSpecifications"]
    }
  ],
  "attr_class": "AnalysisSpecifications"
}
